// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using LibreBooks.Data;

#nullable disable

namespace LibreBooks.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241114175714_M1.0")]
    partial class M10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<bool>("System")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VATId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentAccountId");

                    b.HasIndex("VATId");

                    b.HasIndex("CompanyId", "CategoryId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.AccountCashFlowType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("AccountCashFlowType", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.AccountCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CashFlowTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CashFlowTypeId");

                    b.ToTable("AccountCategory", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.Journal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DebitAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Posted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("VATId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("VATId");

                    b.ToTable("Journal", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.JournalNote", b =>
                {
                    b.Property<string>("JournalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("JournalId", "NoteId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("JournalNote", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.BankingSpace.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("BankName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("BankAccount", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.BankingSpace.BankAccountCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("BankAccountCategory", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessSectorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultBankAccountCompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("LegalName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.Property<string>("TradingName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueAddedTaxNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("YearsInBusienss")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("DefaultBankAccountCompanyId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultBankAccount", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("BankAccountId")
                        .IsUnique();

                    b.ToTable("CompanyDefaultBankAccount", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultValueAddedTax", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyVATId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CompanyVATId")
                        .IsUnique();

                    b.ToTable("CompanyDefaultValueAddedTax", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyMailSettings", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("SmtpPort")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmtpServerName")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanyMailSettings", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyRegionalSettings", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateFormatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DecimalMark")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundToNearest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("ThousandsSeperator")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CountryCode")
                        .IsUnique();

                    b.HasIndex("CurrencyCode")
                        .IsUnique();

                    b.HasIndex("DateFormatId")
                        .IsUnique();

                    b.ToTable("CompanyRegionalSettings", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId", "CompanyId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("CompanyUser", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VATId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("VATId")
                        .IsUnique();

                    b.HasIndex("CompanyId", "VATId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("CompanyValueAddedTax", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AcceptsElectronicInvoices")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("LegalName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTermsFrom")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentTermsInDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingMethodId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingTermId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TradingName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueAddedTaxNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CategoryId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShippingMethodId")
                        .IsUnique();

                    b.HasIndex("ShippingTermId")
                        .IsUnique();

                    b.HasIndex("CompanyId", "CategoryId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerAccountsContact", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerContactId")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId", "CustomerContactId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CustomerContactId")
                        .IsUnique();

                    b.ToTable("CustomerAccountsContact", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerAdjustment", b =>
                {
                    b.Property<string>("JournalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.HasKey("JournalId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("CompanyId", "CustomerId", "JournalId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("CustomerAdjustment", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCategory", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("CustomerContact", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerNote", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId", "NoteId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("CustomerNote", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerWriteOff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId", "CustomerId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CompanyId", "Number")
                        .IsUnique();

                    b.ToTable("CustomerWriteOff", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.DocumentSpace.DocumentPrintTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("DocumentPrintTemplate", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.DocumentSpace.DocumentSetup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("FootMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberPrefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberSuffix")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrintTemplateId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RemoveLeadingZeros")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CompanyId");

                    b.HasIndex("PrintTemplateId");

                    b.ToTable("DocumentSetup", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.DocumentSpace.DocumentStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("DocumentStatus", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.GeneralSpace.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.GeneralSpace.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Actionable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.ToTable("Note", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastLoggedIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshLoginHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshSecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Physical")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<string>("VATId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CategoryId");

                    b.HasIndex("VATId");

                    b.HasIndex("CompanyId", "Code")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.ItemAdjustment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FromSales")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("OldQuantityOnHand")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ItemId");

                    b.HasIndex("CompanyId", "ItemId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("ItemAdjustment", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.ItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ParentId");

                    b.ToTable("ItemCategory", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.ItemInventory", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxQuantityAllowed")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("MinQuantityAllowed")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId");

                    b.ToTable("ItemInventory", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseBuyer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyUserId")
                        .IsUnique();

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("CompanyId", "Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PurchaseBuyer", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("Footer")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Printed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierDetailsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SuppplierReference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierDetailsId");

                    b.HasIndex("CompanyId", "Number")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PurchaseDocument", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentLine", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("DocumentId", "LineId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LineId");

                    b.ToTable("PurchaseDocumentLine", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentNote", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId", "NoteId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("PurchaseDocumentNote", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentSupplierDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Supplier")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VATNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PurchaseDocumentSupplierDetails", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierId");

                    b.HasIndex("CompanyId", "SupplierId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PurchaseInvoice", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoiceReceipt", b =>
                {
                    b.Property<string>("ReceiptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceDocumentId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("ReceiptId", "InvoiceId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("InvoiceDocumentId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("PurchaseInvoiceReceipt", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoiceReturn", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReturnId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceId", "ReturnId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ReturnId");

                    b.ToTable("PurchaseInvoiceReturn", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseLine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemCode")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<string>("VATId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("VATId");

                    b.ToTable("PurchaseLine", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseOrder", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("SupplierId", "CompanyId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PurchaseOrder", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseOrderInvoice", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "InvoiceId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("InvoiceId");

                    b.ToTable("PurchaseOrderInvoice", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("BankAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Recorded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BankAccountId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("CompanyId", "SupplierId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PurchaseReceipt", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReturn", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierId");

                    b.HasIndex("CompanyId", "SupplierId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("PurchaseReturn", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesCredit", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("CompanyId", "CustomerId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SalesCredit", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerDetailsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("Footer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Printed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Recorded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingMethodId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingTermId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TaxExempt")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.HasIndex("CustomerDetailsId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("ShippingTermId");

                    b.HasIndex("StatusId");

                    b.HasIndex("CompanyId", "Number")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SalesDocument", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocumentCustomerDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("VATNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SalesDocumentCustomerDetails", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocumentLine", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("DocumentId", "LineId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("LineId");

                    b.ToTable("SalesDocumentLine", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocumentNote", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId", "NoteId");

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("SalesDocumentNote", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesInvoice", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerWriteOffId")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerWriteOffId");

                    b.HasIndex("CompanyId", "CustomerId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SalesInvoice", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesInvoiceCredit", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceId", "CreditId");

                    b.HasIndex("CreditId");

                    b.ToTable("SalesInvoiceCredit", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesInvoiceReceipt", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("InvoiceId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("SalesInvoiceReceipt", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesLine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemCode")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<string>("VATId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ItemCode")
                        .IsUnique();

                    b.HasIndex("VATId");

                    b.ToTable("SalesLine", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesOrder", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId", "CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SalesOrder", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesOrderInvoice", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "InvoiceId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("InvoiceId");

                    b.ToTable("SalesOrderInvoice", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesPerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CompanyUserId")
                        .IsUnique();

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.ToTable("SalesPerson", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesQuote", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("CompanyId", "CustomerId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SalesQuote", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesQuoteOrder", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("QuoteId", "OrderId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("OrderId");

                    b.ToTable("SalesQuoteOrder", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<bool>("Archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Recorded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CompanyId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("SalesReceipt", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentTermId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegisteredName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.Property<string>("TradingName")
                        .HasColumnType("TEXT");

                    b.Property<string>("VATId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VATRegNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CategoryId");

                    b.HasIndex("VATId")
                        .IsUnique();

                    b.HasIndex("CompanyId", "VendorNumber")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierAccountsContact", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierContactId")
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId", "SupplierContactId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("SupplierContactId")
                        .IsUnique();

                    b.ToTable("SupplierAccountsContact", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierAdjustment", b =>
                {
                    b.Property<string>("JournalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("JournalId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierId");

                    b.HasIndex("CompanyId", "JournalId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SupplierAdjustment", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SupplierCategory", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("SupplierId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SupplierContact", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierNote", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId", "NoteId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("SupplierNote", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.BusinessSector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusinessSector", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("DialingCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Code")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Code")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.DateFormat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Format")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Format")
                        .IsUnique();

                    b.ToTable("DateFormat", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.PaymentTerm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.ShippingMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("ShippingMethod", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.ShippingTerm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("ShippingTerm", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.SystemCompanyNumber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberFormat")
                        .HasColumnType("TEXT");

                    b.Property<long>("NumberNext")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumberPrefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SystemCompanyNumber");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.ValueAddedTax", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<bool>("System")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueAddedTax", (string)null);
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.Account", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.AccountCategory", "Category")
                        .WithMany("Accounts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("ChartOfAccounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.Account", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "VAT")
                        .WithMany()
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("ParentAccount");

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.AccountCategory", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.AccountCashFlowType", "CashFlowType")
                        .WithMany()
                        .HasForeignKey("CashFlowTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CashFlowType");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.Journal", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("JournalEntries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.Account", "CreditAccount")
                        .WithMany("CreditHistory")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.Account", "DebitAccount")
                        .WithMany("DebitHistory")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "VAT")
                        .WithMany()
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.JournalNote", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.Journal", null)
                        .WithMany("Notes")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Note", "Note")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.AccountingSpace.JournalNote", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.BankingSpace.BankAccount", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.BankingSpace.BankAccountCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.Company", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.BusinessSector", "BusinessSector")
                        .WithMany("Companies")
                        .HasForeignKey("BusinessSectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultBankAccount", "DefaultBankAccount")
                        .WithMany()
                        .HasForeignKey("DefaultBankAccountCompanyId");

                    b.Navigation("BusinessSector");

                    b.Navigation("DefaultBankAccount");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultBankAccount", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.BankingSpace.BankAccount", "BankAccount")
                        .WithOne("DefaultBankAccount")
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultBankAccount", "BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultBankAccount", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultValueAddedTax", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithOne("DefaultVAT")
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultValueAddedTax", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "CompanyVAT")
                        .WithOne("CompanyDefaultVAT")
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyDefaultValueAddedTax", "CompanyVATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyVAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyMailSettings", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithOne("MailSettings")
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyMailSettings", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyRegionalSettings", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithOne("RegionalSettings")
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyRegionalSettings", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.Country", "Country")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyRegionalSettings", "CountryCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.Currency", "Currency")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyRegionalSettings", "CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.DateFormat", "DateFormat")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyRegionalSettings", "DateFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("DateFormat");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyUser", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.User", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("ValueAddedTaxes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.ValueAddedTax", "VAT")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "VATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.Customer", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.CustomerCategory", "Category")
                        .WithMany("Customers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesPerson", "SalesPerson")
                        .WithMany("Customers")
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.ShippingMethod", "ShippingMethod")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CustomerSpace.Customer", "ShippingMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.ShippingTerm", "ShippingTerm")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CustomerSpace.Customer", "ShippingTermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShippingMethod");

                    b.Navigation("ShippingTerm");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerAccountsContact", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.CustomerContact", "CustomerContact")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CustomerSpace.CustomerAccountsContact", "CustomerContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerContact");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerAdjustment", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.Journal", "Journal")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CustomerSpace.CustomerAdjustment", "JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerCategory", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerContact", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CustomerSpace.CustomerContact", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany("ContactPeople")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerNote", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", null)
                        .WithMany("Notes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Note", "Note")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.CustomerSpace.CustomerNote", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.DocumentSpace.DocumentSetup", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("DocumentSetups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.DocumentSpace.DocumentPrintTemplate", "PrintTemplate")
                        .WithMany()
                        .HasForeignKey("PrintTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PrintTemplate");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.GeneralSpace.Note", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.User", "Creator")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.GeneralSpace.Note", "CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.RoleClaim", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserClaim", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserLogin", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserRole", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.UserToken", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.Item", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.InventorySpace.ItemCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("Items")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "VAT")
                        .WithMany()
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.ItemAdjustment", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("ItemAdjustments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.InventorySpace.Item", "Item")
                        .WithMany("Adjustments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.ItemCategory", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("ItemCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.InventorySpace.ItemCategory", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.ItemInventory", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.InventorySpace.Item", "Item")
                        .WithOne("Inventory")
                        .HasForeignKey("LibreBooks.Models.Entity.InventorySpace.ItemInventory", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseBuyer", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("Buyers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyUser", "CompanyUser")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseBuyer", "CompanyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseBuyer", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.DocumentSpace.DocumentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentSupplierDetails", "SupplierDetails")
                        .WithMany()
                        .HasForeignKey("SupplierDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("SupplierDetails");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentLine", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", "Document")
                        .WithMany("Lines")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseLine", "Line")
                        .WithMany("DocumentLines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentNote", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", null)
                        .WithMany("Notes")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Note", "Note")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentNote", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentSupplierDetails", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", null)
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocumentSupplierDetails", "SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("CompanyId");

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", "Document")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Document");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoiceReceipt", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", "Invoice")
                        .WithMany("Receipts")
                        .HasForeignKey("InvoiceDocumentId");

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", null)
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoiceReceipt", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReceipt", "Receipt")
                        .WithMany("AllocatedInvoices")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoiceReturn", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", "Invoice")
                        .WithMany("Returns")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReturn", "Return")
                        .WithMany("Invoices")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseLine", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "VAT")
                        .WithMany()
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseOrder", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CompanyId");

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", "Document")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseOrder", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Document");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseOrderInvoice", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseOrder", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReceipt", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.BankingSpace.BankAccount", "BankAccount")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", "Supplier")
                        .WithMany("Receipts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Company");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReturn", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("CompanyId");

                    b.HasOne("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", "Document")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReturn", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", "Supplier")
                        .WithMany("Returns")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Document");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesCredit", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("SalesCredits")
                        .HasForeignKey("CompanyId");

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany("Credits")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesDocument", "Document")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesCredit", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocument", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.IdentitySpace.User", "Creator")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesDocument", "CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesDocumentCustomerDetails", "CustomerDetails")
                        .WithMany()
                        .HasForeignKey("CustomerDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesPerson", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.ShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodId");

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.ShippingTerm", "ShippingTerm")
                        .WithMany()
                        .HasForeignKey("ShippingTermId");

                    b.HasOne("LibreBooks.Models.Entity.DocumentSpace.DocumentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("CustomerDetails");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShippingMethod");

                    b.Navigation("ShippingTerm");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocumentCustomerDetails", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesDocumentCustomerDetails", "CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocumentLine", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesDocument", "Document")
                        .WithMany("Lines")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesLine", "Line")
                        .WithMany("DocumentLines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocumentNote", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesDocument", null)
                        .WithMany("Notes")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Note", "Note")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesDocumentNote", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesInvoice", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.CustomerWriteOff", null)
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerWriteOffId");

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesDocument", "Document")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesInvoice", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesInvoiceCredit", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesCredit", "Credit")
                        .WithMany("CreditedInvoices")
                        .HasForeignKey("CreditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesInvoice", "Invoice")
                        .WithMany("Credits")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Credit");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesInvoiceReceipt", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesInvoice", "Invoice")
                        .WithMany("Receipts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesReceipt", "Receipt")
                        .WithMany("AllocatedInvoices")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesLine", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.InventorySpace.Item", "Item")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesLine", "ItemCode")
                        .HasPrincipalKey("LibreBooks.Models.Entity.InventorySpace.Item", "Code")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "VAT")
                        .WithMany()
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Item");

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesOrder", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesDocument", "Document")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesOrder", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesOrderInvoice", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesInvoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesOrder", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesPerson", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("SalesPeople")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyUser", "CompanyUser")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesPerson", "CompanyUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesPerson", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesQuote", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("SalesQuotes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany("Quotes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesDocument", "Document")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SalesSpace.SalesQuote", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesQuoteOrder", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesOrder", "Order")
                        .WithMany("Quotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SalesSpace.SalesQuote", "Quote")
                        .WithMany("Orders")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesReceipt", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.BankingSpace.BankAccount", "BankAccount")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CustomerSpace.Customer", "Customer")
                        .WithMany("Receipts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SystemSpace.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.Supplier", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.SupplierCategory", "Category")
                        .WithMany("Suppliers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", "VAT")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SupplierSpace.Supplier", "VATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("VAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierAccountsContact", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.SupplierContact", "SupplierContact")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SupplierSpace.SupplierAccountsContact", "SupplierContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", "Supplier")
                        .WithMany("AccountsContacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("SupplierContact");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierAdjustment", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany("SupplierAdjustments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.AccountingSpace.Journal", "Journal")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SupplierSpace.SupplierAdjustment", "JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", "Supplier")
                        .WithMany("Adjustments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Journal");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierCategory", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.CompanySpace.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierContact", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SupplierSpace.SupplierContact", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", "Supplier")
                        .WithMany("Contacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierNote", b =>
                {
                    b.HasOne("LibreBooks.Models.Entity.GeneralSpace.Note", "Note")
                        .WithOne()
                        .HasForeignKey("LibreBooks.Models.Entity.SupplierSpace.SupplierNote", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibreBooks.Models.Entity.SupplierSpace.Supplier", null)
                        .WithMany("Notes")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.Account", b =>
                {
                    b.Navigation("CreditHistory");

                    b.Navigation("DebitHistory");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.AccountCategory", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.AccountingSpace.Journal", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.BankingSpace.BankAccount", b =>
                {
                    b.Navigation("DefaultBankAccount");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("SalesReceipts");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.Company", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Buyers");

                    b.Navigation("ChartOfAccounts");

                    b.Navigation("Customers");

                    b.Navigation("DefaultVAT");

                    b.Navigation("DocumentSetups");

                    b.Navigation("ItemAdjustments");

                    b.Navigation("ItemCategories");

                    b.Navigation("Items");

                    b.Navigation("JournalEntries");

                    b.Navigation("MailSettings");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("RegionalSettings");

                    b.Navigation("SalesCredits");

                    b.Navigation("SalesInvoices");

                    b.Navigation("SalesOrders");

                    b.Navigation("SalesPeople");

                    b.Navigation("SalesQuotes");

                    b.Navigation("SalesReceipts");

                    b.Navigation("SupplierAdjustments");

                    b.Navigation("Suppliers");

                    b.Navigation("Users");

                    b.Navigation("ValueAddedTaxes");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CompanySpace.CompanyValueAddedTax", b =>
                {
                    b.Navigation("CompanyDefaultVAT");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.Customer", b =>
                {
                    b.Navigation("ContactPeople");

                    b.Navigation("Credits");

                    b.Navigation("Invoices");

                    b.Navigation("Notes");

                    b.Navigation("Orders");

                    b.Navigation("Quotes");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerCategory", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.CustomerSpace.CustomerWriteOff", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.IdentitySpace.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Companies");

                    b.Navigation("Logins");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.Item", b =>
                {
                    b.Navigation("Adjustments");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.InventorySpace.ItemCategory", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseDocument", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseInvoice", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Receipts");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseLine", b =>
                {
                    b.Navigation("DocumentLines");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseOrder", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReceipt", b =>
                {
                    b.Navigation("AllocatedInvoices");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.PurchasesSpace.PurchaseReturn", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesCredit", b =>
                {
                    b.Navigation("CreditedInvoices");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesDocument", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesInvoice", b =>
                {
                    b.Navigation("Credits");

                    b.Navigation("Orders");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesLine", b =>
                {
                    b.Navigation("DocumentLines");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesOrder", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesPerson", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesQuote", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SalesSpace.SalesReceipt", b =>
                {
                    b.Navigation("AllocatedInvoices");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.Supplier", b =>
                {
                    b.Navigation("AccountsContacts");

                    b.Navigation("Adjustments");

                    b.Navigation("Contacts");

                    b.Navigation("Invoices");

                    b.Navigation("Notes");

                    b.Navigation("Orders");

                    b.Navigation("Receipts");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SupplierSpace.SupplierCategory", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("LibreBooks.Models.Entity.SystemSpace.BusinessSector", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
