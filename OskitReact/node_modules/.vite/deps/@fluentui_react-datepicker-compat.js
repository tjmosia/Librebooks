import {
  ArrowDown,
  ArrowLeft,
  ArrowRight,
  ArrowUp,
  Backspace,
  Enter,
  Escape,
  Input,
  PageDown,
  PageUp,
  Portal,
  Space,
  assertSlots,
  getRTLSafeKey,
  import_react,
  jsx,
  jsxs,
  mergeCallbacks,
  resolvePositioningShorthand,
  slot_exports,
  useArrowNavigationGroup,
  useControllableState,
  useEventCallback,
  useFieldContext_unstable,
  useFluent,
  useId,
  useMergedRefs,
  useModalAttributes,
  useOnClickOutside,
  useOnScrollOutside,
  usePositioning
} from "./chunk-DGZP3PHX.js";
import {
  ArrowDownRegular,
  ArrowUpRegular,
  CalendarMonthRegular,
  DismissRegular,
  __resetStyles,
  __styles2 as __styles,
  mergeClasses
} from "./chunk-S7MDVNOS.js";
import "./chunk-KBTYAULA.js";
import "./chunk-RPCDYKBN.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@fluentui/react-calendar-compat/lib/components/Calendar/Calendar.js
var React11 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/utils/constants.js
var DayOfWeek;
(function(DayOfWeek2) {
  DayOfWeek2[DayOfWeek2["Sunday"] = 0] = "Sunday";
  DayOfWeek2[DayOfWeek2["Monday"] = 1] = "Monday";
  DayOfWeek2[DayOfWeek2["Tuesday"] = 2] = "Tuesday";
  DayOfWeek2[DayOfWeek2["Wednesday"] = 3] = "Wednesday";
  DayOfWeek2[DayOfWeek2["Thursday"] = 4] = "Thursday";
  DayOfWeek2[DayOfWeek2["Friday"] = 5] = "Friday";
  DayOfWeek2[DayOfWeek2["Saturday"] = 6] = "Saturday";
})(DayOfWeek || (DayOfWeek = {}));
var MonthOfYear;
(function(MonthOfYear2) {
  MonthOfYear2[MonthOfYear2["January"] = 0] = "January";
  MonthOfYear2[MonthOfYear2["February"] = 1] = "February";
  MonthOfYear2[MonthOfYear2["March"] = 2] = "March";
  MonthOfYear2[MonthOfYear2["April"] = 3] = "April";
  MonthOfYear2[MonthOfYear2["May"] = 4] = "May";
  MonthOfYear2[MonthOfYear2["June"] = 5] = "June";
  MonthOfYear2[MonthOfYear2["July"] = 6] = "July";
  MonthOfYear2[MonthOfYear2["August"] = 7] = "August";
  MonthOfYear2[MonthOfYear2["September"] = 8] = "September";
  MonthOfYear2[MonthOfYear2["October"] = 9] = "October";
  MonthOfYear2[MonthOfYear2["November"] = 10] = "November";
  MonthOfYear2[MonthOfYear2["December"] = 11] = "December";
})(MonthOfYear || (MonthOfYear = {}));
var FirstWeekOfYear;
(function(FirstWeekOfYear2) {
  FirstWeekOfYear2[FirstWeekOfYear2["FirstDay"] = 0] = "FirstDay";
  FirstWeekOfYear2[FirstWeekOfYear2["FirstFullWeek"] = 1] = "FirstFullWeek";
  FirstWeekOfYear2[FirstWeekOfYear2["FirstFourDayWeek"] = 2] = "FirstFourDayWeek";
})(FirstWeekOfYear || (FirstWeekOfYear = {}));
var DateRangeType;
(function(DateRangeType2) {
  DateRangeType2[DateRangeType2["Day"] = 0] = "Day";
  DateRangeType2[DateRangeType2["Week"] = 1] = "Week";
  DateRangeType2[DateRangeType2["Month"] = 2] = "Month";
  DateRangeType2[DateRangeType2["WorkWeek"] = 3] = "WorkWeek";
})(DateRangeType || (DateRangeType = {}));
var DAYS_IN_WEEK = 7;
var TimeConstants = {
  MillisecondsInOneDay: 864e5,
  MillisecondsIn1Sec: 1e3,
  MillisecondsIn1Min: 6e4,
  MillisecondsIn30Mins: 18e5,
  MillisecondsIn1Hour: 36e5,
  MinutesInOneDay: 1440,
  MinutesInOneHour: 60,
  DaysInOneWeek: 7,
  MonthInOneYear: 12,
  HoursInOneDay: 24,
  SecondsInOneMinute: 60,
  OffsetTo24HourFormat: 12,
  /**
  * Matches a time string. Groups:
  * 1. hours (with or without leading 0)
  * 2. minutes
  * 3. seconds (optional)
  * 4. meridiem (am/pm, case-insensitive, optional)
  */
  TimeFormatRegex: /^(\d\d?):(\d\d):?(\d\d)? ?([ap]m)?/i
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateFormatting/dateFormatting.defaults.js
var formatDay = (date) => date.getDate().toString();
var formatMonthDayYear = (date, strings) => strings.months[date.getMonth()] + " " + date.getDate() + ", " + date.getFullYear();
var formatMonthYear = (date, strings) => strings.months[date.getMonth()] + " " + date.getFullYear();
var formatMonth = (date, strings) => strings.months[date.getMonth()];
var formatYear = (date) => date.getFullYear().toString();
var DEFAULT_DATE_GRID_STRINGS = {
  months: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  shortMonths: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  days: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ],
  shortDays: [
    "S",
    "M",
    "T",
    "W",
    "T",
    "F",
    "S"
  ]
};
var DEFAULT_DATE_FORMATTING = {
  formatDay,
  formatMonth,
  formatYear,
  formatMonthDayYear,
  formatMonthYear
};
var DEFAULT_CALENDAR_STRINGS = {
  ...DEFAULT_DATE_GRID_STRINGS,
  goToToday: "Go to today",
  weekNumberFormatString: "Week number {0}",
  prevMonthAriaLabel: "Previous month",
  nextMonthAriaLabel: "Next month",
  prevYearAriaLabel: "Previous year",
  nextYearAriaLabel: "Next year",
  prevYearRangeAriaLabel: "Previous year range",
  nextYearRangeAriaLabel: "Next year range",
  closeButtonAriaLabel: "Close",
  selectedDateFormatString: "Selected date {0}",
  todayDateFormatString: "Today's date {0}",
  monthPickerHeaderAriaLabel: "{0}, change year",
  yearPickerHeaderAriaLabel: "{0}, change month",
  dayMarkedAriaLabel: "marked"
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateMath/dateMath.js
function addDays(date, days) {
  const result = new Date(date.getTime());
  result.setDate(result.getDate() + days);
  return result;
}
function addWeeks(date, weeks) {
  return addDays(date, weeks * TimeConstants.DaysInOneWeek);
}
function addMonths(date, months) {
  let result = new Date(date.getTime());
  const newMonth = result.getMonth() + months;
  result.setMonth(newMonth);
  if (result.getMonth() !== (newMonth % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {
    result = addDays(result, -result.getDate());
  }
  return result;
}
function addYears(date, years) {
  let result = new Date(date.getTime());
  result.setFullYear(date.getFullYear() + years);
  if (result.getMonth() !== (date.getMonth() % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {
    result = addDays(result, -result.getDate());
  }
  return result;
}
function getMonthStart(date) {
  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);
}
function getMonthEnd(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);
}
function getYearStart(date) {
  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);
}
function getYearEnd(date) {
  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);
}
function setMonth(date, month) {
  return addMonths(date, month - date.getMonth());
}
function compareDates(date1, date2) {
  if (!date1 && !date2) {
    return true;
  } else if (!date1 || !date2) {
    return false;
  } else {
    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
  }
}
function compareDatePart(date1, date2) {
  return getDatePartHashValue(date1) - getDatePartHashValue(date2);
}
function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView = 1) {
  const datesArray = [];
  let startDate;
  let endDate = null;
  if (!workWeekDays) {
    workWeekDays = [
      DayOfWeek.Monday,
      DayOfWeek.Tuesday,
      DayOfWeek.Wednesday,
      DayOfWeek.Thursday,
      DayOfWeek.Friday
    ];
  }
  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);
  switch (dateRangeType) {
    case DateRangeType.Day:
      startDate = getDatePart(date);
      endDate = addDays(startDate, daysToSelectInDayView);
      break;
    case DateRangeType.Week:
    case DateRangeType.WorkWeek:
      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);
      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);
      break;
    case DateRangeType.Month:
      startDate = new Date(date.getFullYear(), date.getMonth(), 1);
      endDate = addMonths(startDate, 1);
      break;
    default:
      throw new Error("Unexpected object: " + dateRangeType);
  }
  let nextDate = startDate;
  do {
    if (dateRangeType !== DateRangeType.WorkWeek) {
      datesArray.push(nextDate);
    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {
      datesArray.push(nextDate);
    }
    nextDate = addDays(nextDate, 1);
  } while (!compareDates(nextDate, endDate));
  return datesArray;
}
function isInDateRangeArray(date, dateRange) {
  for (const dateInRange of dateRange) {
    if (compareDates(date, dateInRange)) {
      return true;
    }
  }
  return false;
}
function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {
  const selectedYear = navigatedDate.getFullYear();
  const selectedMonth = navigatedDate.getMonth();
  let dayOfMonth = 1;
  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);
  const endOfFirstWeek = dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());
  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);
  dayOfMonth = endOfWeekRange.getDate();
  const weeksArray = [];
  for (let i = 0; i < weeksInMonth; i++) {
    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));
    dayOfMonth += TimeConstants.DaysInOneWeek;
    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);
  }
  return weeksArray;
}
function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {
  const fourDayWeek = 4;
  switch (firstWeekOfYear) {
    case FirstWeekOfYear.FirstFullWeek:
      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);
    case FirstWeekOfYear.FirstFourDayWeek:
      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);
    default:
      return getFirstDayWeekOfYear(date, firstDayOfWeek);
  }
}
function getStartDateOfWeek(date, firstDayOfWeek) {
  let daysOffset = firstDayOfWeek - date.getDay();
  if (daysOffset > 0) {
    daysOffset -= TimeConstants.DaysInOneWeek;
  }
  return addDays(date, daysOffset);
}
function getDatePart(date) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}
function getDatePartHashValue(date) {
  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);
}
function getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {
  const dayOfYear = getDayOfYear(date) - 1;
  let num = date.getDay() - dayOfYear % TimeConstants.DaysInOneWeek;
  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);
  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;
  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;
  if (num2 !== 0 && num2 >= numberOfFullDays) {
    num2 -= TimeConstants.DaysInOneWeek;
  }
  let num3 = dayOfYear - num2;
  if (num3 < 0) {
    num -= daysInYear % TimeConstants.DaysInOneWeek;
    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;
    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {
      num2 -= TimeConstants.DaysInOneWeek;
    }
    num3 = daysInYear - num2;
  }
  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);
}
function getFirstDayWeekOfYear(date, firstDayOfWeek) {
  const num = getDayOfYear(date) - 1;
  const num2 = date.getDay() - num % TimeConstants.DaysInOneWeek;
  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;
  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);
}
function adjustWeekDay(firstDayOfWeek, dateWeekDay) {
  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;
}
function getDayOfYear(date) {
  const month = date.getMonth();
  const year = date.getFullYear();
  let daysUntilDate = 0;
  for (let i = 0; i < month; i++) {
    daysUntilDate += daysInMonth(i + 1, year);
  }
  daysUntilDate += date.getDate();
  return daysUntilDate;
}
function daysInMonth(month, year) {
  return new Date(year, month, 0).getDate();
}

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/isBeforeMinDate.js
var isBeforeMinDate = (date, options) => {
  const { minDate } = options;
  return minDate ? compareDatePart(minDate, date) >= 1 : false;
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/isAfterMaxDate.js
var isAfterMaxDate = (date, options) => {
  const { maxDate } = options;
  return maxDate ? compareDatePart(date, maxDate) >= 1 : false;
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/isRestrictedDate.js
var isRestrictedDate = (date, options) => {
  const { restrictedDates, minDate, maxDate } = options;
  if (!restrictedDates && !minDate && !maxDate) {
    return false;
  }
  const inRestrictedDates = restrictedDates && restrictedDates.some((rd) => compareDates(rd, date));
  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/findAvailableDate.js
var findAvailableDate = (options) => {
  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;
  let availableDate = targetDate;
  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {
    return targetDate;
  }
  while (compareDatePart(initialDate, availableDate) !== 0 && isRestrictedDate(availableDate, restrictedDateOptions) && !isAfterMaxDate(availableDate, restrictedDateOptions) && !isBeforeMinDate(availableDate, restrictedDateOptions)) {
    availableDate = addDays(availableDate, direction);
  }
  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {
    return availableDate;
  }
  return void 0;
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/getBoundedDateRange.js
var getBoundedDateRange = (dateRange, minDate, maxDate) => {
  let boundedDateRange = [
    ...dateRange
  ];
  if (minDate) {
    boundedDateRange = boundedDateRange.filter((date) => compareDatePart(date, minDate) >= 0);
  }
  if (maxDate) {
    boundedDateRange = boundedDateRange.filter((date) => compareDatePart(date, maxDate) <= 0);
  }
  return boundedDateRange;
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/isContiguous.js
var isContiguous = (days, isSingleWeek, firstDayOfWeek) => {
  const daySet = new Set(days);
  let amountOfNoNeighbors = 0;
  for (const day of days) {
    const nextDay = (day + 1) % 7;
    if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {
      amountOfNoNeighbors++;
    }
  }
  return amountOfNoNeighbors < 2;
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/getDateRangeTypeToUse.js
var getDateRangeTypeToUse = (dateRangeType, workWeekDays, firstDayOfWeek) => {
  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {
    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {
      return DateRangeType.Week;
    }
  }
  return dateRangeType;
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/dateGrid/getDayGrid.js
var getDayGrid = (options) => {
  const { selectedDate, dateRangeType, firstDayOfWeek, today, minDate, maxDate, weeksToShow, workWeekDays, daysToSelectInDayView, restrictedDates, markedDays } = options;
  const restrictedDateOptions = {
    minDate,
    maxDate,
    restrictedDates
  };
  const todaysDate = today || /* @__PURE__ */ new Date();
  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;
  let date;
  if (weeksToShow && weeksToShow <= 4) {
    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());
  } else {
    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);
  }
  const weeks = [];
  while (date.getDay() !== firstDayOfWeek) {
    date.setDate(date.getDate() - 1);
  }
  date = addDays(date, -DAYS_IN_WEEK);
  let isAllDaysOfWeekOutOfMonth = false;
  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);
  let selectedDates = [];
  if (selectedDate) {
    selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);
    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);
  }
  let shouldGetWeeks = true;
  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {
    const week = [];
    isAllDaysOfWeekOutOfMonth = true;
    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {
      const originalDate = new Date(date.getTime());
      const dayInfo = {
        key: date.toString(),
        date: date.getDate().toString(),
        originalDate,
        isInMonth: date.getMonth() === navigatedDate.getMonth(),
        isToday: compareDates(todaysDate, date),
        isSelected: isInDateRangeArray(date, selectedDates),
        isSingleSelected: selectedDates.length === 1 && compareDates(date, selectedDate),
        isInBounds: !isRestrictedDate(date, restrictedDateOptions),
        isMarked: (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some((markedDay) => compareDates(originalDate, markedDay))) || false
      };
      week.push(dayInfo);
      if (dayInfo.isInMonth) {
        isAllDaysOfWeekOutOfMonth = false;
      }
      date.setDate(date.getDate() + 1);
    }
    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;
    weeks.push(week);
  }
  return weeks;
};

// node_modules/@fluentui/react-calendar-compat/lib/utils/focus.js
var targetToFocusOnNextRepaint = void 0;
function focusAsync(element, win) {
  if (element) {
    if (targetToFocusOnNextRepaint) {
      targetToFocusOnNextRepaint = element;
      return;
    }
    targetToFocusOnNextRepaint = element;
    if (win) {
      win.requestAnimationFrame(() => {
        targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();
        targetToFocusOnNextRepaint = void 0;
      });
    }
  }
}

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDay/CalendarDay.js
var React7 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/CalendarDayGrid.js
var React6 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/Calendar/Calendar.types.js
var React = __toESM(require_react());
var AnimationDirection;
(function(AnimationDirection2) {
  AnimationDirection2[AnimationDirection2["Horizontal"] = 0] = "Horizontal";
  AnimationDirection2[AnimationDirection2["Vertical"] = 1] = "Vertical";
})(AnimationDirection || (AnimationDirection = {}));

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/useWeekCornerStyles.styles.js
var weekCornersClassNames = {
  topRightCornerDate: "fui-CalendarDayGrid__topRightCornerDate",
  topLeftCornerDate: "fui-CalendarDayGrid__topLeftCornerDate",
  bottomRightCornerDate: "fui-CalendarDayGrid__bottomRightCornerDate",
  bottomLeftCornerDate: "fui-CalendarDayGrid__bottomLeftCornerDate"
};
function useWeekCornerStyles(props) {
  const {
    dir
  } = useFluent();
  const getWeekCornerStyles = (initialWeeks) => {
    const weekCornersStyled = {};
    const weeks = initialWeeks.slice(1, initialWeeks.length - 1);
    weeks.forEach((week, weekIndex) => {
      week.forEach((day, dayIndex) => {
        const above = weeks[weekIndex - 1] && weeks[weekIndex - 1][dayIndex] && isInSameHoverRange(weeks[weekIndex - 1][dayIndex].originalDate, day.originalDate, weeks[weekIndex - 1][dayIndex].isSelected, day.isSelected);
        const below = weeks[weekIndex + 1] && weeks[weekIndex + 1][dayIndex] && isInSameHoverRange(weeks[weekIndex + 1][dayIndex].originalDate, day.originalDate, weeks[weekIndex + 1][dayIndex].isSelected, day.isSelected);
        const left = weeks[weekIndex][dayIndex - 1] && isInSameHoverRange(weeks[weekIndex][dayIndex - 1].originalDate, day.originalDate, weeks[weekIndex][dayIndex - 1].isSelected, day.isSelected);
        const right = weeks[weekIndex][dayIndex + 1] && isInSameHoverRange(weeks[weekIndex][dayIndex + 1].originalDate, day.originalDate, weeks[weekIndex][dayIndex + 1].isSelected, day.isSelected);
        weekCornersStyled[weekIndex + "_" + dayIndex] = calculateRoundedStyles(above, below, left, right);
      });
    });
    return weekCornersStyled;
  };
  const calculateRoundedStyles = (above, below, left, right) => {
    const style = [];
    const roundedTopLeft = !above && !left;
    const roundedTopRight = !above && !right;
    const roundedBottomLeft = !below && !left;
    const roundedBottomRight = !below && !right;
    if (roundedTopLeft) {
      style.push(dir === "rtl" ? weekCornersClassNames.topRightCornerDate : weekCornersClassNames.topLeftCornerDate);
    }
    if (roundedTopRight) {
      style.push(dir === "rtl" ? weekCornersClassNames.topLeftCornerDate : weekCornersClassNames.topRightCornerDate);
    }
    if (roundedBottomLeft) {
      style.push(dir === "rtl" ? weekCornersClassNames.bottomRightCornerDate : weekCornersClassNames.bottomLeftCornerDate);
    }
    if (roundedBottomRight) {
      style.push(dir === "rtl" ? weekCornersClassNames.bottomLeftCornerDate : weekCornersClassNames.bottomRightCornerDate);
    }
    return mergeClasses(...style);
  };
  const isInSameHoverRange = (date1, date2, date1Selected, date2Selected) => {
    const {
      dateRangeType,
      firstDayOfWeek,
      workWeekDays
    } = props;
    const dateRangeHoverType = dateRangeType === DateRangeType.WorkWeek ? DateRangeType.Week : dateRangeType;
    const dateRange = getDateRangeArray(date1, dateRangeHoverType, firstDayOfWeek, workWeekDays);
    if (date1Selected !== date2Selected) {
      return false;
    } else if (date1Selected && date2Selected) {
      return true;
    }
    return dateRange.filter((date) => date.getTime() === date2.getTime()).length > 0;
  };
  return [getWeekCornerStyles, calculateRoundedStyles];
}

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/useCalendarDayGridStyles.styles.js
var calendarDayGridClassNames = {
  wrapper: "fui-CalendarDayGrid__wrapper",
  table: "fui-CalendarDayGrid__table",
  dayCell: "fui-CalendarDayGrid__dayCell",
  daySelected: "fui-CalendarDayGrid__daySelected",
  daySingleSelected: "fui-CalendarDayGrid__daySingleSelected",
  weekRow: "fui-CalendarDayGrid__weekRow",
  weekDayLabelCell: "fui-CalendarDayGrid__weekDayLabelCell",
  weekNumberCell: "fui-CalendarDayGrid__weekNumberCell",
  dayOutsideBounds: "fui-CalendarDayGrid__dayOutsideBounds",
  dayOutsideNavigatedMonth: "fui-CalendarDayGrid__dayOutsideNavigatedMonth",
  dayButton: "fui-CalendarDayGrid__dayButton",
  dayIsToday: "fui-CalendarDayGrid__dayIsToday",
  firstTransitionWeek: "fui-CalendarDayGrid__firstTransitionWeek",
  lastTransitionWeek: "fui-CalendarDayGrid__lastTransitionWeek",
  dayMarker: "fui-CalendarDayGrid__dayMarker",
  dayTodayMarker: "fui-CalendarDayGrid__dayTodayMarker"
};
var extraCalendarDayGridClassNames = {
  hoverStyle: "fui-CalendarDayGrid__hoverStyle",
  pressedStyle: "fui-CalendarDayGrid__pressedStyle"
};
var useWrapperStyles = __styles({
  base: {
    Byoj8tv: "f1fow5ox"
  }
}, {
  d: [".f1fow5ox{padding-bottom:10px;}"]
});
var useTableStyles = __styles({
  base: {
    po53p8: "fgkb47j",
    Bxjg3zr: "f16vktn6",
    Be2twd7: "fjoy568",
    B6of3ja: "fvjh0tl",
    Byoj8tv: "f1fow5ox",
    qhf8xq: "f10pi13n",
    B73mfa3: "f14m3nip",
    fsow6f: "f17mccla",
    a9b677: "f4m2ahc"
  },
  showWeekNumbers: {
    a9b677: "fl524qk"
  }
}, {
  d: [".fgkb47j{border-collapse:collapse;}", ".f16vktn6{border-spacing:0;}", ".fjoy568{font-size:inherit;}", ".fvjh0tl{margin-top:4px;}", ".f1fow5ox{padding-bottom:10px;}", ".f10pi13n{position:relative;}", ".f14m3nip{table-layout:fixed;}", ".f17mccla{text-align:center;}", ".f4m2ahc{width:196px;}", ".fl524qk{width:226px;}"]
});
var useDayCellStyles = __styles({
  base: {
    sj55zd: "f19n0e5",
    Bceei9c: "f1k6fduh",
    Be2twd7: "fy9rknc",
    Bhrd7zp: "figsok6",
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: "f1s184ao",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "fqtknz5",
    qhf8xq: "f10pi13n",
    Bsw6fvg: "f8pusc0",
    Bbusuzp: "fqgauei",
    cvlxnx: "fp6dsbd",
    Bweudez: "f4xgodq",
    Bsnevi5: 0,
    z1p9vi: 0,
    dua3dm: 0,
    Bf7el8m: "f1ko8o2g",
    xnb59o: "fts5qqo",
    B0mcfed: "fq2wdp5",
    Bj67fi1: "f1lhgsq9",
    B2gfgcj: "fdbuq6n",
    B6cqqer: "f16j2ub3",
    fpurfy: "f5hk6jp",
    Fioj4w: ["f1d258es", "f1llk4aj"],
    Bq9yiu4: "ftezgwa",
    cpbo2x: ["f1llk4aj", "f1d258es"],
    Bq268z6: "f1iohfpm"
  },
  focusIndicator: {
    Brovlpu: "ftqa4ok",
    B486eqv: "f2hkw1w",
    B8q5s1w: "f8hki3x",
    Bci5o5g: ["f1d2448m", "ffh67wi"],
    n8qw10: "f1bjia2o",
    Bdrgwmp: ["ffh67wi", "f1d2448m"],
    Bb7d1vk: "f226i61",
    zhwhgb: ["f13kzufm", "fsx75g8"],
    dhy2o1: "flujwa2",
    Gfyso: ["fsx75g8", "f13kzufm"],
    Bm4h7ae: "f15bsgw9",
    B7ys5i9: "f14e48fq",
    Busjfv9: "f18yb2kv",
    Bhk32uz: "fd6o370",
    f6g5ot: 0,
    Boxcth7: 0,
    Bhdgwq3: 0,
    hgwjuy: 0,
    Bshpdp8: 0,
    Bsom6fd: 0,
    Blkhhs4: 0,
    Bonggc9: 0,
    Ddfuxk: 0,
    i03rao: 0,
    kclons: 0,
    clg4pj: 0,
    Bpqj9nj: 0,
    B6dhp37: 0,
    Bf4ptjt: 0,
    Bqtpl0w: 0,
    i4rwgc: "fpqizxz",
    Dah5zi: 0,
    B1tsrr9: 0,
    qqdqy8: 0,
    Bkh64rk: 0,
    e3fwne: "f3znvyf",
    J0r882: "fqkqgbk",
    Bule8hv: ["f1as04kd", "ft30ozv"],
    Bjwuhne: "f8pxvb2",
    Ghsupd: ["ft30ozv", "f1as04kd"]
  }
}, {
  d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1k6fduh{cursor:pointer;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", [".f1s184ao{margin:0;}", {
    p: -1
  }], [".fqtknz5{padding:2px;}", {
    p: -1
  }], ".f10pi13n{position:relative;}", ".fp6dsbd.fui-CalendarDayGrid__hoverStyle{color:var(--colorNeutralForeground1Static);}", ".f4xgodq.fui-CalendarDayGrid__hoverStyle{background-color:var(--colorBrandBackgroundInvertedHover);}", ".f1lhgsq9.fui-CalendarDayGrid__pressedStyle{color:var(--colorNeutralForeground1Static);}", ".fdbuq6n.fui-CalendarDayGrid__pressedStyle{background-color:var(--colorBrandBackgroundInvertedPressed);}", ".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", [".fpqizxz[data-fui-focus-visible]::after{border:var(--strokeWidthThick) solid var(--colorStrokeFocus2);}", {
    p: -2
  }], [".f3znvyf[data-fui-focus-visible]::after{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }], ".fqkqgbk[data-fui-focus-visible]::after{top:calc(var(--strokeWidthThick) * -1);}", ".f1as04kd[data-fui-focus-visible]::after{right:calc(var(--strokeWidthThick) * -1);}", ".ft30ozv[data-fui-focus-visible]::after{left:calc(var(--strokeWidthThick) * -1);}", ".f8pxvb2[data-fui-focus-visible]::after{bottom:calc(var(--strokeWidthThick) * -1);}"],
  m: [["@media (forced-colors: active){.f8pusc0{background-color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fqgauei{color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1ko8o2g.fui-CalendarDayGrid__hoverStyle{outline:1px solid Highlight;}}", {
    p: -1,
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fts5qqo.fui-CalendarDayGrid__hoverStyle{z-index:3;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fq2wdp5.fui-CalendarDayGrid__hoverStyle .fui-CalendarDayGrid__dayTodayMarker{background-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f16j2ub3.fui-CalendarDayGrid__pressedStyle{background-color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f5hk6jp.fui-CalendarDayGrid__pressedStyle{border-top-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1d258es.fui-CalendarDayGrid__pressedStyle{border-right-color:Highlight;}.f1llk4aj.fui-CalendarDayGrid__pressedStyle{border-left-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.ftezgwa.fui-CalendarDayGrid__pressedStyle{border-bottom-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1iohfpm.fui-CalendarDayGrid__pressedStyle{color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f226i61[data-fui-focus-visible]::after{border-top-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f13kzufm[data-fui-focus-visible]::after{border-right-color:Highlight;}.fsx75g8[data-fui-focus-visible]::after{border-left-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.flujwa2[data-fui-focus-visible]::after{border-bottom-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }]],
  f: [".ftqa4ok:focus{outline-style:none;}"],
  i: [".f2hkw1w:focus-visible{outline-style:none;}"]
});
var useDaySelectedStyles = __styles({
  base: {
    De3pzq: "f1vevd59",
    sj55zd: "ff5vbop",
    Bsw6fvg: "f1rirnrt",
    Bjwas2f: "f132fbg1",
    Bn1d65q: ["f1ene5x0", "fzbc999"],
    Bxeuatn: "f6jgcol",
    n51gp8: ["fzbc999", "f1ene5x0"],
    Bbusuzp: "f1lkg8j3",
    ycbfsm: "fkc42ay",
    a3nq4f: "f1chdfq9",
    Bnf3alp: "fq0dbue",
    H2c3sd: "f3pe0v7",
    qu8ld: "f3t0uu2",
    E9zv3o: "ft4goo8"
  }
}, {
  d: [".f1vevd59{background-color:var(--colorBrandBackgroundInvertedSelected);}", ".ff5vbop{color:var(--colorNeutralForeground1Static);}"],
  m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f132fbg1{border-top-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1ene5x0{border-right-color:Highlight;}.fzbc999{border-left-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f6jgcol{border-bottom-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f3pe0v7:hover,.f3pe0v7.fui-CalendarDayGrid__hoverStyle,.f3pe0v7.fui-CalendarDayGrid__pressedStyle{background-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f3t0uu2:hover,.f3t0uu2.fui-CalendarDayGrid__hoverStyle,.f3t0uu2.fui-CalendarDayGrid__pressedStyle{color:HighlightText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.ft4goo8>.fui-CalendarDayGrid__dayMarker{background-color:Window;}}", {
    m: "(forced-colors: active)"
  }]],
  h: [".f1chdfq9:hover,.f1chdfq9.fui-CalendarDayGrid__hoverStyle,.f1chdfq9.fui-CalendarDayGrid__pressedStyle{color:var(--colorNeutralForeground1Static);}", ".fq0dbue:hover,.fq0dbue.fui-CalendarDayGrid__hoverStyle,.fq0dbue.fui-CalendarDayGrid__pressedStyle{background-color:var(--colorBrandBackgroundInvertedSelected);}"]
});
var useDaySingleSelectedStyles = __styles({
  base: {
    sj55zd: "ff5vbop",
    E9zv3o: "ft4goo8",
    B2ns3jv: "fy35frb",
    Bwxf4zv: 0,
    Bp8cau8: 0,
    Buy161k: 0,
    Bpzqh5e: 0,
    Fh6yq5: "f8kna22",
    B75pphk: "f3ef5pp",
    Cmeexk: ["f1lmnm0c", "f1nrej41"],
    yen2pv: "f1pt3b1q",
    ydc5we: ["f1nrej41", "f1lmnm0c"],
    Bz06psx: "fcydihv",
    Bvql7r5: ["fgb2y1b", "fzbode6"],
    k24jl4: "fofq8g1",
    Bksmc0g: ["fzbode6", "fgb2y1b"],
    Buxuwzc: "f36ub4m",
    xn840g: ["f19aczhj", "ffhc5ea"],
    Jh9m0u: "flfq9gv",
    Fmkg4n: ["ffhc5ea", "f19aczhj"],
    kmtgwu: "fv38a4k",
    g6m10a: "f1wil596",
    Birdjzs: ["f1941p3i", "fsfopon"],
    yojo9v: "f14tb4e3",
    qdeutu: ["fsfopon", "f1941p3i"],
    yfp87c: "f161hy0n",
    zuskld: "fbp2bxz"
  }
}, {
  d: [".ff5vbop{color:var(--colorNeutralForeground1Static);}", ".fy35frb>.fui-CalendarDayGrid__dayButton{background-color:var(--colorBrandBackgroundInvertedSelected);}", [".f8kna22>.fui-CalendarDayGrid__dayButton{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }], ".f3ef5pp>.fui-CalendarDayGrid__dayButton{border-top-width:1px;}", ".f1lmnm0c>.fui-CalendarDayGrid__dayButton{border-right-width:1px;}", ".f1nrej41>.fui-CalendarDayGrid__dayButton{border-left-width:1px;}", ".f1pt3b1q>.fui-CalendarDayGrid__dayButton{border-bottom-width:1px;}", ".fcydihv>.fui-CalendarDayGrid__dayButton{border-top-style:solid;}", ".fgb2y1b>.fui-CalendarDayGrid__dayButton{border-right-style:solid;}", ".fzbode6>.fui-CalendarDayGrid__dayButton{border-left-style:solid;}", ".fofq8g1>.fui-CalendarDayGrid__dayButton{border-bottom-style:solid;}", ".f36ub4m>.fui-CalendarDayGrid__dayButton{border-top-color:var(--colorBrandStroke1);}", ".f19aczhj>.fui-CalendarDayGrid__dayButton{border-right-color:var(--colorBrandStroke1);}", ".ffhc5ea>.fui-CalendarDayGrid__dayButton{border-left-color:var(--colorBrandStroke1);}", ".flfq9gv>.fui-CalendarDayGrid__dayButton{border-bottom-color:var(--colorBrandStroke1);}"],
  m: [["@media (forced-colors: active){.ft4goo8>.fui-CalendarDayGrid__dayMarker{background-color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fv38a4k>.fui-CalendarDayGrid__dayButton{background-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1wil596>.fui-CalendarDayGrid__dayButton{border-top-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1941p3i>.fui-CalendarDayGrid__dayButton{border-right-color:Highlight;}.fsfopon>.fui-CalendarDayGrid__dayButton{border-left-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f14tb4e3>.fui-CalendarDayGrid__dayButton{border-bottom-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f161hy0n>.fui-CalendarDayGrid__dayButton{color:HighlightText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fbp2bxz>.fui-CalendarDayGrid__dayButton{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useWeekRowStyles = __styles({
  base: {
    qhf8xq: "f10pi13n",
    mlyf9c: "f1gazwyt"
  },
  animation: {
    vin17d: "f5f2jbu",
    Bf5fcs: "fywypte",
    Ezkn3b: "f1ee2ue"
  },
  horizontalBackward: {
    Bv12yb3: ["f1o9w3l8", "f1kwjajc"]
  },
  horizontalForward: {
    Bv12yb3: ["f1kwjajc", "f1o9w3l8"]
  },
  verticalBackward: {
    Bv12yb3: "fgl3yn7"
  },
  verticalForward: {
    Bv12yb3: "faiu5ye"
  }
}, {
  d: [".f10pi13n{position:relative;}", ".f5f2jbu{animation-duration:0.367s;}", ".fywypte{animation-fill-mode:both;}", ".f1ee2ue{animation-timing-function:cubic-bezier(.1,.9,.2,1);}", ".f1o9w3l8{animation-name:f5j8bii,f2lgmc3;}", ".f1kwjajc{animation-name:f5j8bii,fpktcv7;}", ".fgl3yn7{animation-name:f5j8bii,f3bv9km;}", ".faiu5ye{animation-name:f5j8bii,funtx0y;}"],
  w: [".f1gazwyt:focus-within{z-index:1;}"],
  k: ["@keyframes f5j8bii{from{opacity:0;}to{opacity:1;}}", "@keyframes f2lgmc3{from{pointer-events:none;transform:translate3d(-20px, 0, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}", "@keyframes fpktcv7{from{pointer-events:none;transform:translate3d(20px, 0, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}", "@keyframes f3bv9km{from{pointer-events:none;transform:translate3d(0, -20px, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}", "@keyframes funtx0y{from{pointer-events:none;transform:translate3d(0, 20px, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}"]
});
var useWeekDayLabelCellStyles = __styles({
  base: {
    famaaq: "f1xqy1su",
    vin17d: "fhsqnsn",
    Bf5fcs: "fywypte",
    Bv12yb3: "f1h7u52p",
    Ezkn3b: "fjq4c94"
  }
}, {
  d: [".f1xqy1su{-webkit-user-select:none;-moz-user-select:none;user-select:none;}", ".fhsqnsn{animation-duration:0.267s;}", ".fywypte{animation-fill-mode:both;}", ".f1h7u52p{animation-name:f5j8bii;}", ".fjq4c94{animation-timing-function:cubic-bezier(.1,.25,.75,.9);}"],
  k: ["@keyframes f5j8bii{from{opacity:0;}to{opacity:1;}}"]
});
var useWeekNumberCellStyles = __styles({
  base: {
    De3pzq: "f1c21dwh",
    h3c5rm: 0,
    vrafjx: 0,
    Bekrc4i: 0,
    u1mtju: ["fe2nn5g", "f1rcbay7"],
    B7ck84d: "f1ewtqcl",
    sj55zd: "fxc4j92",
    Be2twd7: "fy9rknc",
    Bhrd7zp: "figsok6",
    Bqenvij: "fxldao9",
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: "f1s184ao",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai",
    a9b677: "f1w9dchk"
  }
}, {
  d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", [".fe2nn5g{border-right:1px solid var(--colorNeutralStroke2);}", {
    p: -1
  }], [".f1rcbay7{border-left:1px solid var(--colorNeutralStroke2);}", {
    p: -1
  }], ".f1ewtqcl{box-sizing:border-box;}", ".fxc4j92{color:var(--colorNeutralForeground4);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fxldao9{height:28px;}", [".f1s184ao{margin:0;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".f1w9dchk{width:28px;}"]
});
var useDayOutsideBoundsStyles = __styles({
  base: {
    x734em: "f1v4z6xg",
    B0ssf13: "f1u9q7oh",
    B8h8h5z: "f1a22lcc",
    Bbusuzp: "f1dcs8yz"
  }
}, {
  d: [".f1v4z6xg,.f1v4z6xg:disabled,.f1v4z6xg button,.f1v4z6xg.fui-CalendarDayGrid__hoverStyle,.f1v4z6xg.fui-CalendarDayGrid__pressedStyle{background-color:var(--colorTransparentBackground);}", ".f1u9q7oh,.f1u9q7oh:disabled,.f1u9q7oh button,.f1u9q7oh.fui-CalendarDayGrid__hoverStyle,.f1u9q7oh.fui-CalendarDayGrid__pressedStyle{color:var(--colorNeutralForegroundDisabled);}", ".f1a22lcc,.f1a22lcc:disabled,.f1a22lcc button,.f1a22lcc.fui-CalendarDayGrid__hoverStyle,.f1a22lcc.fui-CalendarDayGrid__pressedStyle{pointer-events:none;}"],
  m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useDayOutsideNavigatedMonthStyles = __styles({
  lightenDaysOutsideNavigatedMonth: {
    sj55zd: "fxc4j92",
    Bhrd7zp: "figsok6",
    Bbusuzp: "f1dcs8yz"
  }
}, {
  d: [".fxc4j92{color:var(--colorNeutralForeground4);}", ".figsok6{font-weight:var(--fontWeightRegular);}"],
  m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useDayButtonStyles = __styles({
  base: {
    De3pzq: "f1c21dwh",
    Bgfg5da: 0,
    B9xav0g: 0,
    oivjwe: 0,
    Bn0qgzm: 0,
    B4g9neb: 0,
    zhjwy3: 0,
    wvpqe5: 0,
    ibv6hh: 0,
    u1mtju: 0,
    h3c5rm: 0,
    vrafjx: 0,
    Bekrc4i: 0,
    i8vvqc: 0,
    g2u3we: 0,
    icvyot: 0,
    B4j52fo: 0,
    irswps: "f3bhgqh",
    sj55zd: "f1ym3bx4",
    Bceei9c: "f1k6fduh",
    Be2twd7: "fy9rknc",
    Bhrd7zp: "ff5ikls",
    Bqenvij: "frvgh55",
    Bg96gwp: "f8xlz6g",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1gl81tg",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai",
    a9b677: "fq4mcun",
    Bx0yju7: "f10y451g",
    l98f4w: "f1dwpgx3",
    Jwef8y: "f18a0fwf",
    Btmb5he: 0,
    gu71dq: 0,
    B2zomw9: 0,
    Fgk69s: 0,
    Bw6eyry: "f1mhq3ai",
    ecr2s2: "f7la2e8"
  }
}, {
  d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", [".f3bhgqh{border:none;}", {
    p: -2
  }], ".f1ym3bx4{color:inherit;}", ".f1k6fduh{cursor:pointer;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".ff5ikls{font-weight:inherit;}", ".frvgh55{height:24px;}", ".f8xlz6g{line-height:24px;}", [".f1gl81tg{overflow:visible;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".fq4mcun{width:24px;}", ".f10y451gspan{height:inherit;}", ".f1dwpgx3span{line-height:inherit;}"],
  h: [".f18a0fwf:hover{background-color:var(--colorBrandBackgroundInvertedHover);}", [".f1mhq3ai:hover{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }]],
  a: [".f7la2e8:active{background-color:var(--colorBrandBackgroundInvertedPressed);}"]
});
var useDayIsTodayStyles = __styles({
  base: {
    mc9l5x: "f22iagw",
    Brf1p80: "f4d9j23",
    Bt984gj: "f122n59",
    sj55zd: "f1phragk",
    Bhrd7zp: "fl43uef",
    kof2un: "f1b5s8wn",
    E9zv3o: "ft4goo8"
  }
}, {
  d: [".f22iagw{display:flex;}", ".f4d9j23{justify-content:center;}", ".f122n59{align-items:center;}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".f1b5s8wn>.fui-CalendarDayGrid__dayMarker{background-color:var(--colorNeutralForegroundOnBrand);}"],
  m: [["@media (forced-colors: active){.ft4goo8>.fui-CalendarDayGrid__dayMarker{background-color:Window;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useDayTodayMarkerStyles = __styles({
  base: {
    mc9l5x: "f22iagw",
    Brf1p80: "f4d9j23",
    Bt984gj: "f122n59",
    De3pzq: "ffp7eso",
    Beyfa6y: 0,
    Bbmb7ep: 0,
    Btl43ni: 0,
    B7oj6ja: 0,
    Dimara: "f1qtlz2s",
    a9b677: "f64fuq3",
    Bqenvij: "fjamq6b",
    Bg96gwp: "f1n95isl",
    Bsw6fvg: "fg374yq",
    Bjwas2f: "fx4t0an",
    Bn1d65q: ["f1bd7qk0", "fk5vpic"],
    Bxeuatn: "fgxnpfp",
    n51gp8: ["fk5vpic", "f1bd7qk0"],
    Bbusuzp: "f1yig07e",
    ycbfsm: "fkc42ay"
  }
}, {
  d: [".f22iagw{display:flex;}", ".f4d9j23{justify-content:center;}", ".f122n59{align-items:center;}", ".ffp7eso{background-color:var(--colorBrandBackground);}", [".f1qtlz2s{border-radius:100%;}", {
    p: -1
  }], ".f64fuq3{width:20px;}", ".fjamq6b{height:20px;}", ".f1n95isl{line-height:20px;}"],
  m: [["@media (forced-colors: active){.fg374yq{background-color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fx4t0an{border-top-color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1bd7qk0{border-right-color:WindowText;}.fk5vpic{border-left-color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fgxnpfp{border-bottom-color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1yig07e{color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useFirstTransitionWeekStyles = __styles({
  base: {
    Bqenvij: "fniina8",
    abs64n: "fk73vx1",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1a3p1vp",
    qhf8xq: "f1euv43f",
    a9b677: "f3tsq5r"
  },
  verticalForward: {
    vin17d: "f5f2jbu",
    Bf5fcs: "fywypte",
    Bv12yb3: "fupj2f5",
    Ezkn3b: "f1ee2ue"
  }
}, {
  d: [".fniina8{height:0;}", ".fk73vx1{opacity:0;}", [".f1a3p1vp{overflow:hidden;}", {
    p: -1
  }], ".f1euv43f{position:absolute;}", ".f3tsq5r{width:0;}", ".f5f2jbu{animation-duration:0.367s;}", ".fywypte{animation-fill-mode:both;}", ".fupj2f5{animation-name:f199e34v,f76svrd,f13agkrc;}", ".f1ee2ue{animation-timing-function:cubic-bezier(.1,.9,.2,1);}"],
  k: ["@keyframes f199e34v{from{opacity:1;}to{opacity:0;visibility:hidden;}}", "@keyframes f76svrd{from{transform:translate3d(0, 0, 0);}to{transform:translate3d(0, -20px, 0);}}", "@keyframes f13agkrc{100%{height:0px;overflow:hidden;width:0px;}99.9%{height:28px;overflow:visible;width:100%;}0%{height:28px;overflow:visible;width:100%;}}"]
});
var useLastTransitionWeekStyles = __styles({
  base: {
    Bqenvij: "fniina8",
    B6of3ja: "flykjtj",
    abs64n: "fk73vx1",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1a3p1vp",
    qhf8xq: "f1euv43f",
    a9b677: "f3tsq5r"
  },
  verticalBackward: {
    vin17d: "f5f2jbu",
    Bf5fcs: "fywypte",
    Bv12yb3: "fifoktk",
    Ezkn3b: "f1ee2ue"
  }
}, {
  d: [".fniina8{height:0;}", ".flykjtj{margin-top:-28px;}", ".fk73vx1{opacity:0;}", [".f1a3p1vp{overflow:hidden;}", {
    p: -1
  }], ".f1euv43f{position:absolute;}", ".f3tsq5r{width:0;}", ".f5f2jbu{animation-duration:0.367s;}", ".fywypte{animation-fill-mode:both;}", ".fifoktk{animation-name:f199e34v,f18895iq,f13agkrc;}", ".f1ee2ue{animation-timing-function:cubic-bezier(.1,.9,.2,1);}"],
  k: ["@keyframes f199e34v{from{opacity:1;}to{opacity:0;visibility:hidden;}}", "@keyframes f18895iq{from{transform:translate3d(0, 0, 0);}to{transform:translate3d(0, 20px, 0);}}", "@keyframes f13agkrc{100%{height:0px;overflow:hidden;width:0px;}99.9%{height:28px;overflow:visible;width:100%;}0%{height:28px;overflow:visible;width:100%;}}"]
});
var useDayMarkerStyles = __styles({
  base: {
    De3pzq: "fnggedw",
    Beyfa6y: 0,
    Bbmb7ep: 0,
    Btl43ni: 0,
    B7oj6ja: 0,
    Dimara: "f1qtlz2s",
    B5kzvoi: "f1oq0udb",
    Bqenvij: "f6ywr7j",
    oyh7mz: ["f1vgc2s3", "f1e31b4d"],
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: "fcpdi13",
    qhf8xq: "f1euv43f",
    j35jbq: ["f1e31b4d", "f1vgc2s3"],
    a9b677: "faro0ui",
    Bsw6fvg: "fg374yq",
    ycbfsm: "fkc42ay"
  }
}, {
  d: [".fnggedw{background-color:var(--colorBrandForeground2);}", [".f1qtlz2s{border-radius:100%;}", {
    p: -1
  }], ".f1oq0udb{bottom:1px;}", ".f6ywr7j{height:4px;}", ".f1vgc2s3{left:0;}", ".f1e31b4d{right:0;}", [".fcpdi13{margin:auto;}", {
    p: -1
  }], ".f1euv43f{position:absolute;}", ".faro0ui{width:4px;}"],
  m: [["@media (forced-colors: active){.fg374yq{background-color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useCornerBorderAndRadiusStyles = __styles({
  corners: {
    Cy64m2: ["f1yxjewa", "f5xfyye"],
    Bnn43bw: ["f1kpdnd7", "fokqrni"],
    feanbc: ["f127emps", "f1s6s1el"],
    B4268ip: ["f39vr2a", "frpqyrn"]
  }
}, {
  d: [".f1yxjewa.fui-CalendarDayGrid__topRightCornerDate{border-top-right-radius:var(--borderRadiusMedium);}", ".f5xfyye.fui-CalendarDayGrid__topRightCornerDate{border-top-left-radius:var(--borderRadiusMedium);}", ".f1kpdnd7.fui-CalendarDayGrid__topLeftCornerDate{border-top-left-radius:var(--borderRadiusMedium);}", ".fokqrni.fui-CalendarDayGrid__topLeftCornerDate{border-top-right-radius:var(--borderRadiusMedium);}", ".f127emps.fui-CalendarDayGrid__bottomRightCornerDate{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f1s6s1el.fui-CalendarDayGrid__bottomRightCornerDate{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f39vr2a.fui-CalendarDayGrid__bottomLeftCornerDate{border-bottom-left-radius:var(--borderRadiusMedium);}", ".frpqyrn.fui-CalendarDayGrid__bottomLeftCornerDate{border-bottom-right-radius:var(--borderRadiusMedium);}"]
});
var useCalendarDayGridStyles_unstable = (props) => {
  "use no memo";
  const wrapperStyles = useWrapperStyles();
  const tableStyles = useTableStyles();
  const dayCellStyles = useDayCellStyles();
  const daySelectedStyles = useDaySelectedStyles();
  const daySingleSelectedStyles = useDaySingleSelectedStyles();
  const weekRowStyles = useWeekRowStyles();
  const weekDayLabelCellStyles = useWeekDayLabelCellStyles();
  const weekNumberCellStyles = useWeekNumberCellStyles();
  const dayOutsideBoundsStyles = useDayOutsideBoundsStyles();
  const dayOutsideNavigatedMonthStyles = useDayOutsideNavigatedMonthStyles();
  const dayButtonStyles = useDayButtonStyles();
  const dayIsTodayStyles = useDayIsTodayStyles();
  const firstTransitionWeekStyles = useFirstTransitionWeekStyles();
  const lastTransitionWeekStyles = useLastTransitionWeekStyles();
  const dayMarkerStyles = useDayMarkerStyles();
  const cornerBorderAndRadiusStyles = useCornerBorderAndRadiusStyles();
  const dayTodayMarkerStyles = useDayTodayMarkerStyles();
  const {
    animateBackwards,
    animationDirection,
    lightenDaysOutsideNavigatedMonth,
    showWeekNumbers
  } = props;
  return {
    wrapper: mergeClasses(calendarDayGridClassNames.wrapper, wrapperStyles.base),
    table: mergeClasses(calendarDayGridClassNames.table, tableStyles.base, showWeekNumbers && tableStyles.showWeekNumbers),
    dayCell: mergeClasses(calendarDayGridClassNames.dayCell, dayCellStyles.base, dayCellStyles.focusIndicator, cornerBorderAndRadiusStyles.corners),
    daySelected: mergeClasses(calendarDayGridClassNames.daySelected, daySelectedStyles.base),
    daySingleSelected: mergeClasses(calendarDayGridClassNames.daySingleSelected, daySingleSelectedStyles.base),
    weekRow: mergeClasses(calendarDayGridClassNames.weekRow, weekRowStyles.base, animateBackwards !== void 0 && weekRowStyles.animation, animateBackwards !== void 0 && (animationDirection === AnimationDirection.Horizontal ? animateBackwards ? weekRowStyles.horizontalBackward : weekRowStyles.horizontalForward : animateBackwards ? weekRowStyles.verticalBackward : weekRowStyles.verticalForward)),
    weekDayLabelCell: mergeClasses(calendarDayGridClassNames.weekDayLabelCell, weekDayLabelCellStyles.base),
    weekNumberCell: mergeClasses(calendarDayGridClassNames.weekNumberCell, weekNumberCellStyles.base),
    dayOutsideBounds: mergeClasses(calendarDayGridClassNames.dayOutsideBounds, dayOutsideBoundsStyles.base),
    dayOutsideNavigatedMonth: mergeClasses(calendarDayGridClassNames.dayOutsideNavigatedMonth, lightenDaysOutsideNavigatedMonth && dayOutsideNavigatedMonthStyles.lightenDaysOutsideNavigatedMonth),
    dayButton: mergeClasses(calendarDayGridClassNames.dayButton, dayButtonStyles.base),
    dayIsToday: mergeClasses(calendarDayGridClassNames.dayIsToday, dayIsTodayStyles.base),
    firstTransitionWeek: mergeClasses(calendarDayGridClassNames.firstTransitionWeek, firstTransitionWeekStyles.base, animateBackwards !== void 0 && animationDirection !== AnimationDirection.Horizontal && !animateBackwards && firstTransitionWeekStyles.verticalForward),
    lastTransitionWeek: mergeClasses(calendarDayGridClassNames.lastTransitionWeek, lastTransitionWeekStyles.base, animateBackwards !== void 0 && animationDirection !== AnimationDirection.Horizontal && animateBackwards && lastTransitionWeekStyles.verticalBackward),
    dayMarker: mergeClasses(calendarDayGridClassNames.dayMarker, dayMarkerStyles.base),
    dayTodayMarker: mergeClasses(calendarDayGridClassNames.dayTodayMarker, dayTodayMarkerStyles.base)
  };
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/CalendarMonthHeaderRow.js
var React2 = __toESM(require_react());
var CalendarMonthHeaderRow = (props) => {
  const { showWeekNumbers, strings, firstDayOfWeek, allFocusable, weeksToShow, weeks, classNames } = props;
  const dayLabels = strings.shortDays.slice();
  let firstOfMonthIndex = -1;
  const firstWeekOfMonth = weeks[1];
  for (let i = 0; i < weeks[1].length; i++) {
    if (firstWeekOfMonth[i].originalDate.getDate() === 1) {
      firstOfMonthIndex = i;
      break;
    }
  }
  if (weeksToShow === 1 && firstOfMonthIndex >= 0) {
    const firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;
    dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks[1][firstOfMonthIndex].originalDate.getMonth()];
  }
  return React2.createElement("tr", null, showWeekNumbers && React2.createElement("th", {
    className: classNames.dayCell
  }), dayLabels.map((val, index) => {
    const i = (index + firstDayOfWeek) % DAYS_IN_WEEK;
    const label = strings.days[i];
    return React2.createElement("th", {
      className: mergeClasses(classNames.dayCell, classNames.weekDayLabelCell),
      scope: "col",
      key: dayLabels[i] + " " + index,
      title: label,
      "aria-label": label,
      tabIndex: allFocusable ? 0 : void 0
    }, dayLabels[i]);
  }));
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/CalendarGridRow.js
var React4 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/CalendarGridDayCell.js
var React3 = __toESM(require_react());
var CalendarGridDayCell = (props) => {
  "use no memo";
  const { navigatedDate, dateTimeFormatter, allFocusable, strings, activeDescendantId, navigatedDayRef, calculateRoundedStyles, weeks, classNames, day, dayIndex, weekIndex, weekCorners, ariaHidden, customDayCellRef, dateRangeType, daysToSelectInDayView, onSelectDate, restrictedDates, minDate, maxDate, onNavigateDate, getDayInfosInRangeOfDay, getRefsFromDayInfos } = props;
  var _weekCorners_;
  const cornerStyle = (_weekCorners_ = weekCorners === null || weekCorners === void 0 ? void 0 : weekCorners[weekIndex + "_" + dayIndex]) !== null && _weekCorners_ !== void 0 ? _weekCorners_ : "";
  const isNavigatedDate = compareDates(navigatedDate, day.originalDate);
  const { dir } = useFluent();
  const navigateMonthEdge = (ev, date) => {
    let targetDate = void 0;
    let direction = 1;
    if (ev.key === ArrowUp) {
      targetDate = addWeeks(date, -1);
      direction = -1;
    } else if (ev.key === ArrowDown) {
      targetDate = addWeeks(date, 1);
    } else if (ev.key === getRTLSafeKey(ArrowLeft, dir)) {
      targetDate = addDays(date, -1);
      direction = -1;
    } else if (ev.key === getRTLSafeKey(ArrowRight, dir)) {
      targetDate = addDays(date, 1);
    }
    if (!targetDate) {
      return;
    }
    const findAvailableDateOptions = {
      initialDate: date,
      targetDate,
      direction,
      restrictedDates,
      minDate,
      maxDate
    };
    let nextDate = findAvailableDate(findAvailableDateOptions);
    if (!nextDate) {
      findAvailableDateOptions.direction = -direction;
      nextDate = findAvailableDate(findAvailableDateOptions);
    }
    const isInCurrentView = weeks && nextDate && weeks.slice(1, weeks.length - 1).some((week) => {
      return week.some((dayToCompare) => {
        return compareDates(dayToCompare.originalDate, nextDate);
      });
    });
    if (isInCurrentView) {
      return;
    }
    if (nextDate) {
      onNavigateDate(nextDate, true);
      ev.preventDefault();
    }
  };
  const onMouseOverDay = (ev) => {
    const dayInfos = getDayInfosInRangeOfDay(day);
    const dayRefs = getRefsFromDayInfos(dayInfos);
    dayRefs.forEach((dayRef, index) => {
      if (dayRef) {
        dayRef.classList.add(extraCalendarDayGridClassNames.hoverStyle);
        if (!dayInfos[index].isSelected && dateRangeType === DateRangeType.Day && daysToSelectInDayView && daysToSelectInDayView > 1) {
          dayRef.classList.remove(weekCornersClassNames.bottomLeftCornerDate, weekCornersClassNames.bottomRightCornerDate, weekCornersClassNames.topLeftCornerDate, weekCornersClassNames.topRightCornerDate);
          const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();
          if (classNamesToAdd) {
            dayRef.classList.add(...classNamesToAdd.trim().split(" "));
          }
        }
      }
    });
  };
  const onMouseDownDay = (ev) => {
    const dayInfos = getDayInfosInRangeOfDay(day);
    const dayRefs = getRefsFromDayInfos(dayInfos);
    dayRefs.forEach((dayRef) => {
      if (dayRef) {
        dayRef.classList.add(extraCalendarDayGridClassNames.pressedStyle);
      }
    });
  };
  const onMouseUpDay = (ev) => {
    const dayInfos = getDayInfosInRangeOfDay(day);
    const dayRefs = getRefsFromDayInfos(dayInfos);
    dayRefs.forEach((dayRef) => {
      if (dayRef) {
        dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);
      }
    });
  };
  const onMouseOutDay = (ev) => {
    const dayInfos = getDayInfosInRangeOfDay(day);
    const dayRefs = getRefsFromDayInfos(dayInfos);
    dayRefs.forEach((dayRef, index) => {
      if (dayRef) {
        dayRef.classList.remove(extraCalendarDayGridClassNames.hoverStyle);
        dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);
        if (!dayInfos[index].isSelected && dateRangeType === DateRangeType.Day && daysToSelectInDayView && daysToSelectInDayView > 1) {
          const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();
          if (classNamesToAdd) {
            dayRef.classList.remove(...classNamesToAdd.trim().split(" "));
          }
        }
      }
    });
  };
  const onDayKeyDown = (ev) => {
    if (ev.key === Enter) {
      onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(day.originalDate);
    } else {
      navigateMonthEdge(ev, day.originalDate);
    }
  };
  let ariaLabel = day.originalDate.getDate() + ", " + strings.months[day.originalDate.getMonth()] + ", " + day.originalDate.getFullYear();
  if (day.isMarked) {
    ariaLabel = ariaLabel + ", " + strings.dayMarkedAriaLabel;
  }
  const isFocusable = !ariaHidden && (allFocusable || (day.isInBounds ? true : void 0));
  return React3.createElement("td", {
    className: mergeClasses(classNames.dayCell, weekCorners && cornerStyle, day.isSelected && !day.isSingleSelected && classNames.daySelected, day.isSingleSelected && classNames.daySingleSelected, !day.isInBounds && classNames.dayOutsideBounds, !day.isInMonth && classNames.dayOutsideNavigatedMonth),
    ref: (element) => {
      customDayCellRef === null || customDayCellRef === void 0 ? void 0 : customDayCellRef(element, day.originalDate, classNames);
      day.setRef(element);
      isNavigatedDate && (navigatedDayRef.current = element);
    },
    "aria-disabled": !ariaHidden && !day.isInBounds,
    onClick: day.isInBounds && !ariaHidden ? day.onSelected : void 0,
    onMouseOver: !ariaHidden ? onMouseOverDay : void 0,
    onMouseDown: !ariaHidden ? onMouseDownDay : void 0,
    onMouseUp: !ariaHidden ? onMouseUpDay : void 0,
    onMouseOut: !ariaHidden ? onMouseOutDay : void 0,
    onKeyDown: !ariaHidden ? onDayKeyDown : void 0,
    role: "gridcell",
    tabIndex: isNavigatedDate || isFocusable ? 0 : void 0,
    "aria-current": day.isToday ? "date" : void 0,
    "aria-selected": day.isInBounds ? day.isSelected : void 0
  }, React3.createElement("button", {
    key: day.key + "button",
    className: mergeClasses(classNames.dayButton, day.isToday && classNames.dayIsToday),
    "aria-label": ariaLabel,
    id: isNavigatedDate ? activeDescendantId : void 0,
    disabled: !ariaHidden && !day.isInBounds,
    type: "button",
    tabIndex: -1
  }, React3.createElement("span", {
    className: day.isToday ? mergeClasses(classNames.dayTodayMarker) : void 0
  }, dateTimeFormatter.formatDay(day.originalDate)), day.isMarked && React3.createElement("div", {
    "aria-hidden": "true",
    className: classNames.dayMarker
  })));
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/CalendarGridRow.js
var CalendarGridRow = (props) => {
  const { ariaHidden, classNames, week, weeks, weekIndex, rowClassName, ariaRole, showWeekNumbers, firstDayOfWeek, firstWeekOfYear, navigatedDate, strings } = props;
  const weekNumbers = showWeekNumbers ? getWeekNumbersInMonth(weeks.length, firstDayOfWeek, firstWeekOfYear, navigatedDate) : null;
  const titleString = weekNumbers ? strings.weekNumberFormatString && strings.weekNumberFormatString.replace("{0}", `${weekNumbers[weekIndex]}`) : "";
  return React4.createElement("tr", {
    role: ariaRole,
    "aria-hidden": ariaHidden,
    className: rowClassName,
    key: weekIndex + "_" + week[0].key
  }, showWeekNumbers && weekNumbers && React4.createElement("th", {
    className: classNames.weekNumberCell,
    key: weekIndex,
    title: titleString,
    "aria-label": titleString,
    scope: "row"
  }, React4.createElement("span", null, weekNumbers[weekIndex])), week.map((day, dayIndex) => React4.createElement(CalendarGridDayCell, {
    ...props,
    key: day.key,
    day,
    dayIndex
  })));
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/useWeeks.js
var React5 = __toESM(require_react());
function useWeeks(props, onSelectDate, getSetRefCallback) {
  "use no memo";
  const weeks = React5.useMemo(() => {
    var _props_getMarkedDays;
    const weeksGrid = getDayGrid(props);
    const firstVisibleDay = weeksGrid[1][0].originalDate;
    const lastVisibleDay = weeksGrid[weeksGrid.length - 1][6].originalDate;
    const markedDays = ((_props_getMarkedDays = props.getMarkedDays) === null || _props_getMarkedDays === void 0 ? void 0 : _props_getMarkedDays.call(props, firstVisibleDay, lastVisibleDay)) || [];
    const returnValue = [];
    for (let weekIndex = 0; weekIndex < weeksGrid.length; weekIndex++) {
      const week = [];
      for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {
        const day = weeksGrid[weekIndex][dayIndex];
        const dayInfo = {
          onSelected: () => onSelectDate(day.originalDate),
          setRef: getSetRefCallback(day.key),
          ...day,
          isMarked: day.isMarked || (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some((markedDay) => compareDates(day.originalDate, markedDay)))
        };
        week.push(dayInfo);
      }
      returnValue.push(week);
    }
    return returnValue;
  }, [
    props
  ]);
  return weeks;
}

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/CalendarDayGrid.js
function useDayRefs() {
  const daysRef = React6.useRef({});
  const getSetRefCallback = (dayKey) => (element) => {
    if (element === null) {
      delete daysRef.current[dayKey];
    } else {
      daysRef.current[dayKey] = element;
    }
  };
  return [
    daysRef,
    getSetRefCallback
  ];
}
function useAnimateBackwards(weeks) {
  const previousNavigatedDateRef = React6.useRef();
  React6.useEffect(() => {
    previousNavigatedDateRef.current = weeks[0][0].originalDate;
  });
  const previousNavigatedDate = previousNavigatedDateRef.current;
  if (!previousNavigatedDate || previousNavigatedDate.getTime() === weeks[0][0].originalDate.getTime()) {
    return void 0;
  } else if (previousNavigatedDate <= weeks[0][0].originalDate) {
    return false;
  } else {
    return true;
  }
}
var CalendarDayGrid = (props) => {
  const navigatedDayRef = React6.useRef(null);
  const activeDescendantId = useId();
  const onSelectDate = (selectedDate) => {
    var _props_onSelectDate, _props_onNavigateDate;
    const { firstDayOfWeek, minDate, maxDate, workWeekDays, daysToSelectInDayView, restrictedDates } = props;
    const restrictedDatesOptions = {
      minDate,
      maxDate,
      restrictedDates
    };
    let dateRange = getDateRangeArray(selectedDate, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);
    dateRange = getBoundedDateRange(dateRange, minDate, maxDate);
    dateRange = dateRange.filter((d) => {
      return !isRestrictedDate(d, restrictedDatesOptions);
    });
    (_props_onSelectDate = props.onSelectDate) === null || _props_onSelectDate === void 0 ? void 0 : _props_onSelectDate.call(props, selectedDate, dateRange);
    (_props_onNavigateDate = props.onNavigateDate) === null || _props_onNavigateDate === void 0 ? void 0 : _props_onNavigateDate.call(props, selectedDate, true);
  };
  const [daysRef, getSetRefCallback] = useDayRefs();
  const weeks = useWeeks(props, onSelectDate, getSetRefCallback);
  const animateBackwards = useAnimateBackwards(weeks);
  const [getWeekCornerStyles, calculateRoundedStyles] = useWeekCornerStyles(props);
  React6.useImperativeHandle(props.componentRef, () => ({
    focus() {
      var _navigatedDayRef_current_focus, _navigatedDayRef_current;
      (_navigatedDayRef_current = navigatedDayRef.current) === null || _navigatedDayRef_current === void 0 ? void 0 : (_navigatedDayRef_current_focus = _navigatedDayRef_current.focus) === null || _navigatedDayRef_current_focus === void 0 ? void 0 : _navigatedDayRef_current_focus.call(_navigatedDayRef_current);
    }
  }), []);
  const getDayInfosInRangeOfDay = (dayToCompare) => {
    const dateRangeHoverType = getDateRangeTypeToUse2(props.dateRangeType, props.workWeekDays);
    const dateRange = getDateRangeArray(dayToCompare.originalDate, dateRangeHoverType, props.firstDayOfWeek, props.workWeekDays, props.daysToSelectInDayView).map((date) => date.getTime());
    const dayInfosInRange = weeks.reduce((accumulatedValue, currentWeek) => {
      return accumulatedValue.concat(currentWeek.filter((weekDay) => dateRange.indexOf(weekDay.originalDate.getTime()) !== -1));
    }, []);
    return dayInfosInRange;
  };
  const getRefsFromDayInfos = (dayInfosInRange) => {
    let dayRefs = [];
    dayRefs = dayInfosInRange.map((dayInfo) => daysRef.current[dayInfo.key]);
    return dayRefs;
  };
  const { gridLabel, dateRangeType, showWeekNumbers, labelledBy, lightenDaysOutsideNavigatedMonth, animationDirection } = props;
  const classNames = useCalendarDayGridStyles_unstable({
    animateBackwards,
    animationDirection,
    dateRangeType,
    lightenDaysOutsideNavigatedMonth: lightenDaysOutsideNavigatedMonth === void 0 ? true : lightenDaysOutsideNavigatedMonth,
    showWeekNumbers
  });
  const weekCorners = getWeekCornerStyles(weeks);
  const partialWeekProps = {
    weeks,
    navigatedDayRef,
    calculateRoundedStyles,
    activeDescendantId,
    classNames,
    weekCorners,
    getDayInfosInRangeOfDay,
    getRefsFromDayInfos
  };
  const arrowNavigationAttributes = useArrowNavigationGroup({
    axis: "grid"
  });
  return React6.createElement("table", {
    className: mergeClasses(classNames.table, props.className),
    "aria-multiselectable": "false",
    "aria-label": gridLabel,
    "aria-labelledby": labelledBy,
    "aria-activedescendant": activeDescendantId,
    role: "grid",
    ...arrowNavigationAttributes
  }, React6.createElement("tbody", null, React6.createElement(CalendarMonthHeaderRow, {
    ...props,
    classNames,
    weeks
  }), React6.createElement(CalendarGridRow, {
    ...props,
    ...partialWeekProps,
    week: weeks[0],
    weekIndex: -1,
    rowClassName: classNames.firstTransitionWeek,
    "aria-role": "presentation",
    ariaHidden: true
  }), weeks.slice(1, weeks.length - 1).map((week, weekIndex) => React6.createElement(CalendarGridRow, {
    ...props,
    ...partialWeekProps,
    key: weekIndex,
    week,
    weekIndex,
    rowClassName: classNames.weekRow
  })), React6.createElement(CalendarGridRow, {
    ...props,
    ...partialWeekProps,
    week: weeks[weeks.length - 1],
    weekIndex: -2,
    rowClassName: classNames.lastTransitionWeek,
    "aria-role": "presentation",
    ariaHidden: true
  })));
};
CalendarDayGrid.displayName = "CalendarDayGrid";
function getDateRangeTypeToUse2(dateRangeType, workWeekDays) {
  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {
    const sortedWWDays = workWeekDays.slice().sort();
    let isContiguous2 = true;
    for (let i = 1; i < sortedWWDays.length; i++) {
      if (sortedWWDays[i] !== sortedWWDays[i - 1] + 1) {
        isContiguous2 = false;
        break;
      }
    }
    if (!isContiguous2 || workWeekDays.length === 0) {
      return DateRangeType.Week;
    }
  }
  return dateRangeType;
}

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDay/useCalendarDayStyles.styles.js
var calendarDayClassNames = {
  root: "fui-CalendarDay",
  header: "fui-CalendarDay__header",
  monthAndYear: "fui-CalendarDay__monthAndYear",
  monthComponents: "fui-CalendarDay__monthComponents",
  headerIconButton: "fui-CalendarDay__headerIconButton",
  disabledStyle: "fui-CalendarDay__disabledStyle"
};
var useRootStyles = __styles({
  base: {
    B7ck84d: "f1e4lqlz",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1sy4kr4",
    a9b677: "f4m2ahc"
  },
  normalize: {
    E5pizo: "f1couhl3",
    B7ck84d: "f1ewtqcl",
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: "f1s184ao",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai"
  },
  showWeekNumbers: {
    a9b677: "fl524qk"
  }
}, {
  d: [".f1e4lqlz{box-sizing:content-box;}", [".f1sy4kr4{padding:12px;}", {
    p: -1
  }], ".f4m2ahc{width:196px;}", ".f1couhl3{box-shadow:none;}", ".f1ewtqcl{box-sizing:border-box;}", [".f1s184ao{margin:0;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".fl524qk{width:226px;}"]
});
var useHeaderStyles = __styles({
  base: {
    mc9l5x: "ftuwxu6",
    Bqenvij: "fxldao9",
    Bg96gwp: "f1vzymgo",
    qhf8xq: "f10pi13n",
    a9b677: "fly5x3f"
  }
}, {
  d: [".ftuwxu6{display:inline-flex;}", ".fxldao9{height:28px;}", ".f1vzymgo{line-height:44px;}", ".f10pi13n{position:relative;}", ".fly5x3f{width:100%;}"]
});
var useMonthAndYearStyles = __styles({
  base: {
    Bt984gj: "f122n59",
    De3pzq: "f1c21dwh",
    icvyot: "f1ern45e",
    vrafjx: ["f1n71otn", "f1deefiw"],
    oivjwe: "f1h8hb77",
    wvpqe5: ["f1deefiw", "f1n71otn"],
    Beyfa6y: 0,
    Bbmb7ep: 0,
    Btl43ni: 0,
    B7oj6ja: 0,
    Dimara: "ft85np5",
    sj55zd: "f19n0e5",
    mc9l5x: "f14t3ns0",
    Bh6795r: "fqerorx",
    Bahqtrf: "f1mo0ibp",
    Be2twd7: "fkhj508",
    Bhrd7zp: "fl43uef",
    Bg96gwp: "f336tjw",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1a3p1vp",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: ["f1td8mcv", "f1udkdxo"],
    fsow6f: ["f1o700av", "fes3tcz"],
    ygn44y: "f1cmbuwj",
    Huce71: "fz5stix"
  },
  animation: {
    vin17d: "fhsqnsn",
    Bf5fcs: "fywypte",
    Bv12yb3: "f1h7u52p",
    Ezkn3b: "fjq4c94"
  },
  headerIsClickable: {
    Jwef8y: "f18a0fwf",
    Bi91k9c: "f3sdaeg",
    eoavqd: "f8491dx",
    pugfm4: 0,
    ukgb2i: 0,
    Dwtyhm: 0,
    Biisq0s: "f15rpok4",
    iro3zm: "f1wvkgvo",
    B2d53fq: "f1wdoaqd",
    c3iz72: "f13c0t7h",
    mghro0: 0,
    Bx68yb: 0,
    syojd9: 0,
    E5hylx: "fy2scak"
  }
}, {
  d: [".f122n59{align-items:center;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }], ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f14t3ns0{display:inline-block;}", ".fqerorx{flex-grow:1;}", ".f1mo0ibp{font-family:inherit;}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".f336tjw{line-height:28px;}", [".f1a3p1vp{overflow:hidden;}", {
    p: -1
  }], [".f1td8mcv{padding:0 4px 0 10px;}", {
    p: -1
  }], [".f1udkdxo{padding:0 10px 0 4px;}", {
    p: -1
  }], ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".f1cmbuwj{text-overflow:ellipsis;}", ".fz5stix{white-space:nowrap;}", ".fhsqnsn{animation-duration:0.267s;}", ".fywypte{animation-fill-mode:both;}", ".f1h7u52p{animation-name:f5j8bii;}", ".fjq4c94{animation-timing-function:cubic-bezier(.1,.25,.75,.9);}"],
  k: ["@keyframes f5j8bii{from{opacity:0;}to{opacity:1;}}"],
  h: [".f18a0fwf:hover{background-color:var(--colorBrandBackgroundInvertedHover);}", ".f3sdaeg:hover{color:var(--colorBrandForegroundOnLightHover);}", ".f8491dx:hover{cursor:pointer;}", [".f15rpok4:hover{outline:1px solid var(--colorTransparentStroke);}", {
    p: -1
  }], ".f1wvkgvo:hover:active{background-color:var(--colorBrandBackgroundInvertedPressed);}", ".f1wdoaqd:hover:active{color:var(--colorBrandForegroundOnLightPressed);}", ".f13c0t7h:hover:active{cursor:pointer;}", [".fy2scak:hover:active{outline:1px solid var(--colorTransparentStroke);}", {
    p: -1
  }]]
});
var useMonthComponentsStyles = __styles({
  base: {
    qb2dma: "fpydfdc",
    mc9l5x: "ftuwxu6"
  }
}, {
  d: [".fpydfdc{align-self:flex-end;}", ".ftuwxu6{display:inline-flex;}"]
});
var useHeaderIconButtonStyles = __styles({
  base: {
    De3pzq: "f1c21dwh",
    icvyot: "f1ern45e",
    vrafjx: ["f1n71otn", "f1deefiw"],
    oivjwe: "f1h8hb77",
    wvpqe5: ["f1deefiw", "f1n71otn"],
    Beyfa6y: 0,
    Bbmb7ep: 0,
    Btl43ni: 0,
    B7oj6ja: 0,
    Dimara: "ft85np5",
    sj55zd: "f11d4kpn",
    mc9l5x: "ftgm304",
    Bahqtrf: "f1mo0ibp",
    Be2twd7: "fy9rknc",
    Bqenvij: "fxldao9",
    Bg96gwp: "f336tjw",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1gl81tg",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai",
    qhf8xq: "f10pi13n",
    fsow6f: "f17mccla",
    a9b677: "f1w9dchk",
    Jwef8y: "f18a0fwf",
    Bi91k9c: "f3sdaeg",
    eoavqd: "f8491dx",
    pugfm4: 0,
    ukgb2i: 0,
    Dwtyhm: 0,
    Biisq0s: "f15rpok4",
    iro3zm: "f1wvkgvo",
    B2d53fq: "f1wdoaqd"
  }
}, {
  d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }], ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".ftgm304{display:block;}", ".f1mo0ibp{font-family:inherit;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fxldao9{height:28px;}", ".f336tjw{line-height:28px;}", [".f1gl81tg{overflow:visible;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".f10pi13n{position:relative;}", ".f17mccla{text-align:center;}", ".f1w9dchk{width:28px;}"],
  h: [".f18a0fwf:hover{background-color:var(--colorBrandBackgroundInvertedHover);}", ".f3sdaeg:hover{color:var(--colorBrandForegroundOnLightHover);}", ".f8491dx:hover{cursor:pointer;}", [".f15rpok4:hover{outline:1px solid var(--colorTransparentStroke);}", {
    p: -1
  }], ".f1wvkgvo:hover:active{background-color:var(--colorBrandBackgroundInvertedPressed);}", ".f1wdoaqd:hover:active{color:var(--colorBrandForegroundOnLightPressed);}"]
});
var useDisabledStyleStyles = __styles({
  base: {
    Bg33ivm: "f1oelgmz",
    t69wg0: "fhh1ekj"
  }
}, {
  d: [".f1oelgmz,.f1oelgmz:disabled,.f1oelgmz button{color:var(--colorNeutralForegroundDisabled);}", ".fhh1ekj,.fhh1ekj:disabled,.fhh1ekj button{pointer-events:none;}"]
});
var useCalendarDayStyles_unstable = (props) => {
  "use no memo";
  const rootStyles = useRootStyles();
  const headerStyles = useHeaderStyles();
  const monthAndYearStyles = useMonthAndYearStyles();
  const monthComponentsStyles = useMonthComponentsStyles();
  const headerIconButtonStyles = useHeaderIconButtonStyles();
  const disabledStyleStyles = useDisabledStyleStyles();
  const {
    className,
    headerIsClickable,
    showWeekNumbers
  } = props;
  return {
    root: mergeClasses(calendarDayClassNames.root, rootStyles.normalize, rootStyles.base, showWeekNumbers && rootStyles.showWeekNumbers, className),
    header: mergeClasses(calendarDayClassNames.header, headerStyles.base),
    monthAndYear: mergeClasses(calendarDayClassNames.monthAndYear, monthAndYearStyles.base, monthAndYearStyles.animation, headerIsClickable && monthAndYearStyles.headerIsClickable),
    monthComponents: mergeClasses(calendarDayClassNames.monthComponents, monthComponentsStyles.base),
    headerIconButton: mergeClasses(calendarDayClassNames.headerIconButton, headerIconButtonStyles.base),
    disabledStyle: mergeClasses(calendarDayClassNames.disabledStyle, disabledStyleStyles.base)
  };
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDay/CalendarDay.js
var CalendarDay = (props) => {
  const dayGrid = React7.useRef(null);
  React7.useImperativeHandle(props.componentRef, () => ({
    focus() {
      var _dayGrid_current_focus, _dayGrid_current;
      (_dayGrid_current = dayGrid.current) === null || _dayGrid_current === void 0 ? void 0 : (_dayGrid_current_focus = _dayGrid_current.focus) === null || _dayGrid_current_focus === void 0 ? void 0 : _dayGrid_current_focus.call(_dayGrid_current);
    }
  }), []);
  const { strings, gridLabel, navigatedDate, dateTimeFormatter, className, onHeaderSelect, showSixWeeksByDefault, minDate, maxDate, restrictedDates, onNavigateDate, showWeekNumbers, dateRangeType, animationDirection } = props;
  const classNames = useCalendarDayStyles_unstable({
    className,
    headerIsClickable: !!onHeaderSelect,
    showWeekNumbers,
    animationDirection
  });
  const monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);
  const HeaderButtonComponentType = onHeaderSelect ? "button" : "div";
  const headerAriaLabel = strings.yearPickerHeaderAriaLabel ? strings.yearPickerHeaderAriaLabel.replace("{0}", monthAndYear) : monthAndYear;
  const { ...propsWithoutStyles } = props;
  return React7.createElement("div", {
    className: classNames.root
  }, React7.createElement("div", {
    className: classNames.header
  }, React7.createElement(HeaderButtonComponentType, {
    "aria-label": onHeaderSelect ? headerAriaLabel : void 0,
    className: classNames.monthAndYear,
    onClick: onHeaderSelect,
    tabIndex: onHeaderSelect ? 0 : -1,
    onKeyDown: onButtonKeyDown(onHeaderSelect),
    type: "button"
  }, React7.createElement("span", {
    "aria-live": "polite",
    "aria-atomic": "true"
  }, monthAndYear)), React7.createElement(CalendarDayNavigationButtons, {
    ...props,
    classNames
  })), React7.createElement(CalendarDayGrid, {
    ...propsWithoutStyles,
    gridLabel: `${monthAndYear}, ${gridLabel}`,
    componentRef: dayGrid,
    strings,
    navigatedDate,
    weeksToShow: showSixWeeksByDefault ? 6 : void 0,
    dateTimeFormatter,
    minDate,
    maxDate,
    restrictedDates,
    onNavigateDate,
    dateRangeType
  }));
};
CalendarDay.displayName = "CalendarDay";
var CalendarDayNavigationButtons = (props) => {
  const { minDate, maxDate, navigatedDate, navigationIcons, allFocusable, strings, showCloseButton, classNames, onNavigateDate, onDismiss } = props;
  const onSelectNextMonth = () => {
    onNavigateDate(addMonths(navigatedDate, 1), false);
  };
  const onSelectPrevMonth = () => {
    onNavigateDate(addMonths(navigatedDate, -1), false);
  };
  const prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;
  const nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true;
  return React7.createElement("div", {
    className: classNames.monthComponents
  }, React7.createElement("button", {
    className: mergeClasses(classNames.headerIconButton, !prevMonthInBounds && classNames.disabledStyle),
    tabIndex: prevMonthInBounds ? void 0 : allFocusable ? 0 : -1,
    "aria-disabled": !prevMonthInBounds,
    onClick: prevMonthInBounds ? onSelectPrevMonth : void 0,
    onKeyDown: prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : void 0,
    title: strings.prevMonthAriaLabel ? strings.prevMonthAriaLabel + " " + strings.months[addMonths(navigatedDate, -1).getMonth()] : void 0,
    type: "button"
  }, navigationIcons.upNavigation), React7.createElement("button", {
    className: mergeClasses(classNames.headerIconButton, !nextMonthInBounds && classNames.disabledStyle),
    tabIndex: nextMonthInBounds ? void 0 : allFocusable ? 0 : -1,
    "aria-disabled": !nextMonthInBounds,
    onClick: nextMonthInBounds ? onSelectNextMonth : void 0,
    onKeyDown: nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : void 0,
    title: strings.nextMonthAriaLabel ? strings.nextMonthAriaLabel + " " + strings.months[addMonths(navigatedDate, 1).getMonth()] : void 0,
    type: "button"
  }, navigationIcons.downNavigation), showCloseButton && React7.createElement("button", {
    className: classNames.headerIconButton,
    onClick: onDismiss,
    onKeyDown: onButtonKeyDown(onDismiss),
    title: strings.closeButtonAriaLabel,
    type: "button"
  }, navigationIcons.dismiss));
};
CalendarDayNavigationButtons.displayName = "CalendarDayNavigationButtons";
var onButtonKeyDown = (callback) => (ev) => {
  switch (ev.key) {
    case Enter:
      callback === null || callback === void 0 ? void 0 : callback();
      break;
  }
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarMonth/CalendarMonth.js
var React9 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarYear/CalendarYear.js
var React8 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarPicker/useCalendarPickerStyles.styles.js
var calendarPickerClassNames = {
  root: "fui-CalendarPicker",
  headerContainer: "fui-CalendarPicker__headerContainer",
  currentItemButton: "fui-CalendarPicker__currentItemButton",
  navigationButtonsContainer: "fui-CalendarPicker__navigationButtonsContainer",
  navigationButton: "fui-CalendarPicker__navigationButton",
  gridContainer: "fui-CalendarPicker__gridContainer",
  buttonRow: "fui-CalendarPicker__buttonRow",
  itemButton: "fui-CalendarPicker__itemButton",
  current: "fui-CalendarPicker__current",
  selected: "fui-CalendarPicker__selected",
  disabled: "fui-CalendarPicker__disabled"
};
var useRootStyles2 = __styles({
  base: {
    B7ck84d: "f1e4lqlz",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1a3p1vp",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1sy4kr4",
    a9b677: "f4m2ahc"
  },
  normalize: {
    E5pizo: "f1couhl3",
    B7ck84d: "f1ewtqcl",
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: "f1s184ao",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai"
  }
}, {
  d: [".f1e4lqlz{box-sizing:content-box;}", [".f1a3p1vp{overflow:hidden;}", {
    p: -1
  }], [".f1sy4kr4{padding:12px;}", {
    p: -1
  }], ".f4m2ahc{width:196px;}", ".f1couhl3{box-shadow:none;}", ".f1ewtqcl{box-sizing:border-box;}", [".f1s184ao{margin:0;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }]]
});
var useHeaderContainerStyles = __styles({
  base: {
    mc9l5x: "f22iagw"
  }
}, {
  d: [".f22iagw{display:flex;}"]
});
var useCurrentItemButtonStyles = __styles({
  base: {
    De3pzq: "f1c21dwh",
    icvyot: "f1ern45e",
    vrafjx: ["f1n71otn", "f1deefiw"],
    oivjwe: "f1h8hb77",
    wvpqe5: ["f1deefiw", "f1n71otn"],
    Beyfa6y: 0,
    Bbmb7ep: 0,
    Btl43ni: 0,
    B7oj6ja: 0,
    Dimara: "ft85np5",
    sj55zd: "f1ym3bx4",
    Bh6795r: "fqerorx",
    Bahqtrf: "f1mo0ibp",
    Be2twd7: "fkhj508",
    Bhrd7zp: "fl43uef",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1gl81tg",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: ["f1td8mcv", "f1udkdxo"],
    fsow6f: ["f1o700av", "fes3tcz"]
  },
  animation: {
    vin17d: "fhsqnsn",
    Bf5fcs: "fywypte",
    Bv12yb3: "f1h7u52p",
    Ezkn3b: "fjq4c94"
  },
  hasHeaderClickCallback: {
    Jwef8y: "f18a0fwf",
    Bi91k9c: "f3sdaeg",
    eoavqd: "f8491dx",
    pugfm4: 0,
    ukgb2i: 0,
    Dwtyhm: 0,
    Biisq0s: "f15rpok4",
    iro3zm: "f1wvkgvo",
    B2d53fq: "f1wdoaqd",
    c3iz72: "f13c0t7h",
    mghro0: 0,
    Bx68yb: 0,
    syojd9: 0,
    E5hylx: "fy2scak"
  }
}, {
  d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }], ".f1ym3bx4{color:inherit;}", ".fqerorx{flex-grow:1;}", ".f1mo0ibp{font-family:inherit;}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", [".f1gl81tg{overflow:visible;}", {
    p: -1
  }], [".f1td8mcv{padding:0 4px 0 10px;}", {
    p: -1
  }], [".f1udkdxo{padding:0 10px 0 4px;}", {
    p: -1
  }], ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".fhsqnsn{animation-duration:0.267s;}", ".fywypte{animation-fill-mode:both;}", ".f1h7u52p{animation-name:f5j8bii;}", ".fjq4c94{animation-timing-function:cubic-bezier(.1,.25,.75,.9);}"],
  k: ["@keyframes f5j8bii{from{opacity:0;}to{opacity:1;}}"],
  h: [".f18a0fwf:hover{background-color:var(--colorBrandBackgroundInvertedHover);}", ".f3sdaeg:hover{color:var(--colorBrandForegroundOnLightHover);}", ".f8491dx:hover{cursor:pointer;}", [".f15rpok4:hover{outline:1px solid var(--colorTransparentStroke);}", {
    p: -1
  }], ".f1wvkgvo:hover:active{background-color:var(--colorBrandBackgroundInvertedPressed);}", ".f1wdoaqd:hover:active{color:var(--colorBrandForegroundOnLightPressed);}", ".f13c0t7h:hover:active{cursor:pointer;}", [".fy2scak:hover:active{outline:1px solid var(--colorTransparentStroke);}", {
    p: -1
  }]]
});
var useNavigationButtonsContainerStyles = __styles({
  base: {
    Bt984gj: "f122n59",
    mc9l5x: "f22iagw"
  }
}, {
  d: [".f122n59{align-items:center;}", ".f22iagw{display:flex;}"]
});
var useNavigationButtonStyles = __styles({
  base: {
    De3pzq: "f1c21dwh",
    Bgfg5da: 0,
    B9xav0g: 0,
    oivjwe: 0,
    Bn0qgzm: 0,
    B4g9neb: 0,
    zhjwy3: 0,
    wvpqe5: 0,
    ibv6hh: 0,
    u1mtju: 0,
    h3c5rm: 0,
    vrafjx: 0,
    Bekrc4i: 0,
    i8vvqc: 0,
    g2u3we: 0,
    icvyot: 0,
    B4j52fo: 0,
    irswps: "f3bhgqh",
    Beyfa6y: 0,
    Bbmb7ep: 0,
    Btl43ni: 0,
    B7oj6ja: 0,
    Dimara: "ft85np5",
    sj55zd: "f19n0e5",
    mc9l5x: "ftgm304",
    Bahqtrf: "f1mo0ibp",
    Be2twd7: "fy9rknc",
    Bqenvij: "fxldao9",
    Bg96gwp: "f336tjw",
    sshi5w: "f1ysfysz",
    Bf4jedk: "f107v6xj",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1gl81tg",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai",
    qhf8xq: "f10pi13n",
    fsow6f: "f17mccla",
    a9b677: "f1w9dchk",
    Jwef8y: "f18a0fwf",
    Bi91k9c: "f3sdaeg",
    eoavqd: "f8491dx",
    pugfm4: 0,
    ukgb2i: 0,
    Dwtyhm: 0,
    Biisq0s: "f15rpok4",
    iro3zm: "f1wvkgvo",
    B2d53fq: "f1wdoaqd"
  }
}, {
  d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", [".f3bhgqh{border:none;}", {
    p: -2
  }], [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }], ".f19n0e5{color:var(--colorNeutralForeground1);}", ".ftgm304{display:block;}", ".f1mo0ibp{font-family:inherit;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fxldao9{height:28px;}", ".f336tjw{line-height:28px;}", ".f1ysfysz{min-height:28px;}", ".f107v6xj{min-width:28px;}", [".f1gl81tg{overflow:visible;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".f10pi13n{position:relative;}", ".f17mccla{text-align:center;}", ".f1w9dchk{width:28px;}"],
  h: [".f18a0fwf:hover{background-color:var(--colorBrandBackgroundInvertedHover);}", ".f3sdaeg:hover{color:var(--colorBrandForegroundOnLightHover);}", ".f8491dx:hover{cursor:pointer;}", [".f15rpok4:hover{outline:1px solid var(--colorTransparentStroke);}", {
    p: -1
  }], ".f1wvkgvo:hover:active{background-color:var(--colorBrandBackgroundInvertedPressed);}", ".f1wdoaqd:hover:active{color:var(--colorBrandForegroundOnLightPressed);}"]
});
var useGridContainerStyles = __styles({
  base: {
    B6of3ja: "fvjh0tl"
  }
}, {
  d: [".fvjh0tl{margin-top:4px;}"]
});
var useButtonRowStyles = __styles({
  base: {
    jrapky: "f15tpi3i",
    sw9gdo: "f1gdbdba"
  },
  animation: {
    vin17d: "f5f2jbu",
    Bf5fcs: "fywypte",
    Ezkn3b: "f1ee2ue"
  },
  horizontalBackward: {
    Bv12yb3: ["f1o9w3l8", "f1kwjajc"]
  },
  horizontalForward: {
    Bv12yb3: ["f1kwjajc", "f1o9w3l8"]
  },
  verticalBackward: {
    Bv12yb3: "fgl3yn7"
  },
  verticalForward: {
    Bv12yb3: "faiu5ye"
  }
}, {
  d: [".f15tpi3i{margin-bottom:16px;}", ".f1gdbdba:last-of-type{margin-bottom:0;}", ".f5f2jbu{animation-duration:0.367s;}", ".fywypte{animation-fill-mode:both;}", ".f1ee2ue{animation-timing-function:cubic-bezier(.1,.9,.2,1);}", ".f1o9w3l8{animation-name:f5j8bii,f2lgmc3;}", ".f1kwjajc{animation-name:f5j8bii,fpktcv7;}", ".fgl3yn7{animation-name:f5j8bii,f3bv9km;}", ".faiu5ye{animation-name:f5j8bii,funtx0y;}"],
  k: ["@keyframes f5j8bii{from{opacity:0;}to{opacity:1;}}", "@keyframes f2lgmc3{from{pointer-events:none;transform:translate3d(-20px, 0, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}", "@keyframes fpktcv7{from{pointer-events:none;transform:translate3d(20px, 0, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}", "@keyframes f3bv9km{from{pointer-events:none;transform:translate3d(0, -20px, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}", "@keyframes funtx0y{from{pointer-events:none;transform:translate3d(0, 20px, 0);}to{pointer-events:auto;transform:translate3d(0, 0, 0);}}"]
});
var useItemButtonStyles = __styles({
  base: {
    De3pzq: "f1c21dwh",
    Bgfg5da: 0,
    B9xav0g: 0,
    oivjwe: 0,
    Bn0qgzm: 0,
    B4g9neb: 0,
    zhjwy3: 0,
    wvpqe5: 0,
    ibv6hh: 0,
    u1mtju: 0,
    h3c5rm: 0,
    vrafjx: 0,
    Bekrc4i: 0,
    i8vvqc: 0,
    g2u3we: 0,
    icvyot: 0,
    B4j52fo: 0,
    irswps: "f3bhgqh",
    Beyfa6y: 0,
    Bbmb7ep: 0,
    Btl43ni: 0,
    B7oj6ja: 0,
    Dimara: "ft85np5",
    sj55zd: "f11d4kpn",
    Bahqtrf: "f1mo0ibp",
    Be2twd7: "fy9rknc",
    Bqenvij: "fbhnoac",
    Bg96gwp: "fc76cdq",
    sshi5w: "f1w5jphr",
    Bf4jedk: "f12clzc2",
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: ["f1ytixos", "fqk6p8t"],
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1gl81tg",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai",
    a9b677: "feqmc2u",
    Btgfwho: ["f65zstl", "f1yt3tqw"],
    xrote9: "flfbxit",
    Bja5ulm: "ff5vbxt",
    Jwef8y: "f18a0fwf",
    Bi91k9c: "f1u69ym5",
    eoavqd: "f8491dx",
    pugfm4: 0,
    ukgb2i: 0,
    Dwtyhm: 0,
    Biisq0s: "f15rpok4",
    Bqrx1nm: "f9ep5xw",
    ze5xyy: "f1qvjex",
    iyr2r2: "fd2qbv0",
    Bx7pl5v: 0,
    Bnosqey: 0,
    Bv57zgv: 0,
    Bbxjs3m: "fm3bo9w",
    iro3zm: "f1wvkgvo",
    g2kj27: "f1b9qfq3",
    pc6evw: "f9ddjv3",
    B76w7ga: "fr4cgi0"
  }
}, {
  d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", [".f3bhgqh{border:none;}", {
    p: -2
  }], [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
    p: -1
  }], ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".f1mo0ibp{font-family:inherit;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fbhnoac{height:40px;}", ".fc76cdq{line-height:40px;}", ".f1w5jphr{min-height:40px;}", ".f12clzc2{min-width:40px;}", [".f1ytixos{margin:0 12px 0 0;}", {
    p: -1
  }], [".fqk6p8t{margin:0 0 0 12px;}", {
    p: -1
  }], [".f1gl81tg{overflow:visible;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".feqmc2u{width:40px;}", ".f65zstl:nth-child(4n + 4){margin-right:0;}", ".f1yt3tqw:nth-child(4n + 4){margin-left:0;}", ".flfbxit:nth-child(n + 9){margin-bottom:0;}", ".ff5vbxt div{font-weight:var(--fontWeightRegular);}"],
  h: [".f18a0fwf:hover{background-color:var(--colorBrandBackgroundInvertedHover);}", ".f1u69ym5:hover{color:var(--colorNeutralForeground1Static);}", ".f8491dx:hover{cursor:pointer;}", [".f15rpok4:hover{outline:1px solid var(--colorTransparentStroke);}", {
    p: -1
  }], ".f1wvkgvo:hover:active{background-color:var(--colorBrandBackgroundInvertedPressed);}"],
  m: [["@media (forced-colors: active){.f9ep5xw:hover{background-color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1qvjex:hover{color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fd2qbv0:hover{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fm3bo9w:hover{outline:1px solid Highlight;}}", {
    p: -1,
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1b9qfq3:hover:active{background-color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f9ddjv3:hover:active{color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fr4cgi0:hover:active{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useCurrentStyles = __styles({
  highlightCurrent: {
    De3pzq: "ffp7eso",
    sj55zd: "f1phragk",
    Bhrd7zp: "fl43uef",
    Bsw6fvg: "fg374yq",
    Bbusuzp: "f1yig07e",
    ycbfsm: "fkc42ay",
    mk428o: "ffic4m0",
    B1lrsqs: "f13lyc4l",
    z0vste: "f13g7o2i",
    Bgjd7nk: "fbbf6h8",
    kur00z: "f1fsg2me"
  }
}, {
  d: [".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}"],
  m: [["@media (forced-colors: active){.fg374yq{background-color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1yig07e{color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f13g7o2i:hover,.f13g7o2i:hover:active{background-color:WindowText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fbbf6h8:hover,.fbbf6h8:hover:active{color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1fsg2me:hover,.f1fsg2me:hover:active{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }]],
  h: [".ffic4m0:hover,.ffic4m0:hover:active{background-color:var(--colorBrandBackground);}", ".f13lyc4l:hover,.f13lyc4l:hover:active{color:var(--colorNeutralForegroundOnBrand);}"]
});
var useSelectedStyles = __styles({
  highlightSelected: {
    De3pzq: "f1vevd59",
    sj55zd: "ff5vbop",
    Bhrd7zp: "fl43uef",
    Bsw6fvg: "f1rirnrt",
    Bbusuzp: "f1yig07e",
    ycbfsm: "fkc42ay",
    Bja5ulm: "fospawf",
    Jwef8y: "fbo057p",
    Bi91k9c: "f1u69ym5",
    Bqrx1nm: "fiu8gst",
    ze5xyy: "f1v4q6pl",
    iyr2r2: "fd2qbv0",
    iro3zm: "f1wvkgvo"
  }
}, {
  d: [".f1vevd59{background-color:var(--colorBrandBackgroundInvertedSelected);}", ".ff5vbop{color:var(--colorNeutralForeground1Static);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".fospawf div{font-weight:var(--fontWeightSemibold);}"],
  m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1yig07e{color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fiu8gst:hover{background-color:Highlight;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.f1v4q6pl:hover{color:Window;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fd2qbv0:hover{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }]],
  h: [".fbo057p:hover{background-color:var(--colorBrandBackgroundInvertedSelected);}", ".f1u69ym5:hover{color:var(--colorNeutralForeground1Static);}", ".f1wvkgvo:hover:active{background-color:var(--colorBrandBackgroundInvertedPressed);}"]
});
var useDisabledStyles = __styles({
  base: {
    Bg33ivm: "f1oelgmz",
    t69wg0: "fhh1ekj",
    Bbusuzp: "f1dcs8yz",
    ycbfsm: "fkc42ay"
  }
}, {
  d: [".f1oelgmz,.f1oelgmz:disabled,.f1oelgmz button{color:var(--colorNeutralForegroundDisabled);}", ".fhh1ekj,.fhh1ekj:disabled,.fhh1ekj button{pointer-events:none;}"],
  m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
    m: "(forced-colors: active)"
  }]]
});
var useCalendarPickerStyles_unstable = (props) => {
  "use no memo";
  const rootStyles = useRootStyles2();
  const headerContainerStyles = useHeaderContainerStyles();
  const currentItemButtonStyles = useCurrentItemButtonStyles();
  const navigationButtonsContainerStyles = useNavigationButtonsContainerStyles();
  const navigationButtonStyles = useNavigationButtonStyles();
  const gridContainerStyles = useGridContainerStyles();
  const buttonRowStyles = useButtonRowStyles();
  const itemButtonStyles = useItemButtonStyles();
  const currentStyles = useCurrentStyles();
  const selectedStyles = useSelectedStyles();
  const disabledStyles = useDisabledStyles();
  const {
    animateBackwards,
    animationDirection,
    className,
    hasHeaderClickCallback,
    highlightCurrent,
    highlightSelected
  } = props;
  return {
    root: mergeClasses(calendarPickerClassNames.root, rootStyles.normalize, rootStyles.base, className),
    headerContainer: mergeClasses(calendarPickerClassNames.headerContainer, headerContainerStyles.base),
    currentItemButton: mergeClasses(calendarPickerClassNames.currentItemButton, currentItemButtonStyles.base, animateBackwards !== void 0 && currentItemButtonStyles.animation, hasHeaderClickCallback && currentItemButtonStyles.hasHeaderClickCallback),
    navigationButtonsContainer: mergeClasses(calendarPickerClassNames.navigationButtonsContainer, navigationButtonsContainerStyles.base),
    navigationButton: mergeClasses(calendarPickerClassNames.navigationButton, navigationButtonStyles.base),
    gridContainer: mergeClasses(calendarPickerClassNames.gridContainer, gridContainerStyles.base),
    buttonRow: mergeClasses(calendarPickerClassNames.buttonRow, buttonRowStyles.base, buttonRowStyles.animation, animateBackwards !== void 0 && (animationDirection === AnimationDirection.Horizontal ? animateBackwards ? buttonRowStyles.horizontalBackward : buttonRowStyles.horizontalForward : animateBackwards ? buttonRowStyles.verticalBackward : buttonRowStyles.verticalForward)),
    itemButton: mergeClasses(calendarPickerClassNames.itemButton, itemButtonStyles.base),
    selected: mergeClasses(calendarPickerClassNames.selected, highlightSelected && selectedStyles.highlightSelected),
    current: mergeClasses(calendarPickerClassNames.current, highlightCurrent && currentStyles.highlightCurrent),
    disabled: mergeClasses(calendarPickerClassNames.disabled, disabledStyles.base)
  };
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarYear/useCalendarYearStyles.styles.js
var useCalendarYearStyles_unstable = (props) => {
  "use no memo";
  return useCalendarPickerStyles_unstable(props);
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarYear/CalendarYear.js
var CELL_COUNT = 12;
var CELLS_PER_ROW = 4;
var DefaultCalendarYearStrings = {
  prevRangeAriaLabel: void 0,
  nextRangeAriaLabel: void 0
};
var CalendarYearGridCell = (props) => {
  const { className, highlightCurrentYear, highlightSelectedYear, year, selected, disabled, componentRef, onSelectYear, onRenderYear } = props;
  const buttonRef = React8.useRef(null);
  React8.useImperativeHandle(componentRef, () => ({
    focus() {
      var _buttonRef_current_focus, _buttonRef_current;
      (_buttonRef_current = buttonRef.current) === null || _buttonRef_current === void 0 ? void 0 : (_buttonRef_current_focus = _buttonRef_current.focus) === null || _buttonRef_current_focus === void 0 ? void 0 : _buttonRef_current_focus.call(_buttonRef_current);
    }
  }), []);
  const onClick = () => {
    onSelectYear === null || onSelectYear === void 0 ? void 0 : onSelectYear(year);
  };
  const onKeyDown = (ev) => {
    if (ev.key === Enter) {
      onSelectYear === null || onSelectYear === void 0 ? void 0 : onSelectYear(year);
    }
  };
  const classNames = useCalendarYearStyles_unstable({
    className,
    highlightCurrent: highlightCurrentYear,
    highlightSelected: highlightSelectedYear
  });
  var _onRenderYear;
  return React8.createElement("button", {
    className: mergeClasses(classNames.itemButton, selected && classNames.selected, disabled && classNames.disabled),
    type: "button",
    role: "gridcell",
    onClick: !disabled ? onClick : void 0,
    onKeyDown: !disabled ? onKeyDown : void 0,
    disabled,
    "aria-selected": selected,
    ref: buttonRef
  }, (_onRenderYear = onRenderYear === null || onRenderYear === void 0 ? void 0 : onRenderYear(year)) !== null && _onRenderYear !== void 0 ? _onRenderYear : year);
};
CalendarYearGridCell.displayName = "CalendarYearGridCell";
var CalendarYearGrid = (props) => {
  const { className, fromYear, toYear, animationDirection, animateBackwards, minYear, maxYear, onSelectYear, selectedYear, componentRef } = props;
  const selectedCellRef = React8.useRef(null);
  const currentCellRef = React8.useRef(null);
  React8.useImperativeHandle(componentRef, () => ({
    focus() {
      var _focus, _this;
      (_this = selectedCellRef.current || currentCellRef.current) === null || _this === void 0 ? void 0 : (_focus = _this.focus) === null || _focus === void 0 ? void 0 : _focus.call(_this);
    }
  }), []);
  const renderCell = (yearToRender) => {
    const selected = yearToRender === selectedYear;
    const disabled = minYear !== void 0 && yearToRender < minYear || maxYear !== void 0 && yearToRender > maxYear;
    const current = yearToRender === (/* @__PURE__ */ new Date()).getFullYear();
    return React8.createElement(CalendarYearGridCell, {
      ...props,
      key: yearToRender,
      year: yearToRender,
      selected,
      current,
      disabled,
      onSelectYear,
      componentRef: selected ? selectedCellRef : current ? currentCellRef : void 0
    });
  };
  const classNames = useCalendarYearStyles_unstable({
    className,
    animateBackwards,
    animationDirection
  });
  const onRenderYear = (value) => {
    var _props_onRenderYear;
    var _props_onRenderYear1;
    return (_props_onRenderYear1 = (_props_onRenderYear = props.onRenderYear) === null || _props_onRenderYear === void 0 ? void 0 : _props_onRenderYear.call(props, value)) !== null && _props_onRenderYear1 !== void 0 ? _props_onRenderYear1 : value;
  };
  const gridAriaLabel = `${onRenderYear(fromYear)} - ${onRenderYear(toYear)}`;
  let year = fromYear;
  const cells = [];
  for (let i = 0; i < (toYear - fromYear + 1) / CELLS_PER_ROW; i++) {
    cells.push([]);
    for (let j = 0; j < CELLS_PER_ROW; j++) {
      cells[i].push(renderCell(year));
      year++;
    }
  }
  const arrowNavigationAttributes = useArrowNavigationGroup({
    axis: "grid"
  });
  return React8.createElement("div", {
    ...arrowNavigationAttributes,
    className: classNames.gridContainer,
    role: "grid",
    "aria-label": gridAriaLabel
  }, cells.map((cellRow, index) => {
    return React8.createElement("div", {
      key: "yearPickerRow_" + index + "_" + fromYear,
      role: "row",
      className: classNames.buttonRow
    }, cellRow);
  }));
};
CalendarYearGrid.displayName = "CalendarYearGrid";
var CalendarYearNavDirection = {
  Previous: 0,
  Next: 1
};
var CalendarYearNavArrow = (props) => {
  const { className, strings = DefaultCalendarYearStrings, direction, onSelectPrev, onSelectNext, fromYear, toYear, maxYear, minYear, navigationIcons } = props;
  const classNames = useCalendarYearStyles_unstable({
    className
  });
  const ariaLabel = direction === CalendarYearNavDirection.Previous ? strings.prevRangeAriaLabel : strings.nextRangeAriaLabel;
  const newRangeOffset = direction === CalendarYearNavDirection.Previous ? -CELL_COUNT : CELL_COUNT;
  const newRange = {
    fromYear: fromYear + newRangeOffset,
    toYear: toYear + newRangeOffset
  };
  const ariaLabelString = ariaLabel ? typeof ariaLabel === "string" ? ariaLabel : ariaLabel(newRange) : void 0;
  const disabled = direction === CalendarYearNavDirection.Previous ? minYear !== void 0 && fromYear < minYear : maxYear !== void 0 && props.fromYear + CELL_COUNT > maxYear;
  const onNavigate = () => {
    direction === CalendarYearNavDirection.Previous ? onSelectPrev === null || onSelectPrev === void 0 ? void 0 : onSelectPrev() : onSelectNext === null || onSelectNext === void 0 ? void 0 : onSelectNext();
  };
  const onKeyDown = (ev) => {
    if (ev.key === Enter) {
      onNavigate();
    }
  };
  return React8.createElement("button", {
    className: mergeClasses(classNames.navigationButton, disabled && classNames.disabled),
    onClick: !disabled ? onNavigate : void 0,
    onKeyDown: !disabled ? onKeyDown : void 0,
    type: "button",
    title: ariaLabelString,
    disabled
  }, direction === CalendarYearNavDirection.Previous ? navigationIcons.upNavigation : navigationIcons.downNavigation);
};
CalendarYearNavArrow.displayName = "CalendarYearNavArrow";
var CalendarYearNav = (props) => {
  const { className } = props;
  const classNames = useCalendarYearStyles_unstable({
    className
  });
  return React8.createElement("div", {
    className: classNames.navigationButtonsContainer
  }, React8.createElement(CalendarYearNavArrow, {
    ...props,
    direction: CalendarYearNavDirection.Previous
  }), React8.createElement(CalendarYearNavArrow, {
    ...props,
    direction: CalendarYearNavDirection.Next
  }));
};
CalendarYearNav.displayName = "CalendarYearNav";
var CalendarYearTitle = (props) => {
  const { className, fromYear, toYear, strings = DefaultCalendarYearStrings, animateBackwards, animationDirection } = props;
  const onHeaderSelect = () => {
    var _props_onHeaderSelect;
    (_props_onHeaderSelect = props.onHeaderSelect) === null || _props_onHeaderSelect === void 0 ? void 0 : _props_onHeaderSelect.call(props, true);
  };
  const onHeaderKeyDown = (ev) => {
    if (ev.key === Enter || ev.key === Space) {
      onHeaderSelect();
    }
  };
  const onRenderYear = (year) => {
    var _props_onRenderYear;
    var _props_onRenderYear1;
    return (_props_onRenderYear1 = (_props_onRenderYear = props.onRenderYear) === null || _props_onRenderYear === void 0 ? void 0 : _props_onRenderYear.call(props, year)) !== null && _props_onRenderYear1 !== void 0 ? _props_onRenderYear1 : year;
  };
  const classNames = useCalendarYearStyles_unstable({
    className,
    hasHeaderClickCallback: !!props.onHeaderSelect,
    animateBackwards,
    animationDirection
  });
  if (props.onHeaderSelect) {
    const rangeAriaLabel = strings.rangeAriaLabel;
    const headerAriaLabelFormatString = strings.headerAriaLabelFormatString;
    const currentDateRange = rangeAriaLabel ? typeof rangeAriaLabel === "string" ? rangeAriaLabel : rangeAriaLabel(props) : void 0;
    const ariaLabel = headerAriaLabelFormatString ? headerAriaLabelFormatString.replace("{0}", currentDateRange !== null && currentDateRange !== void 0 ? currentDateRange : "") : currentDateRange;
    return React8.createElement("button", {
      className: classNames.currentItemButton,
      onClick: onHeaderSelect,
      onKeyDown: onHeaderKeyDown,
      "aria-label": ariaLabel,
      role: "button",
      type: "button"
    }, React8.createElement("span", {
      "aria-live": "assertive",
      "aria-atomic": "true"
    }, onRenderYear(fromYear), " - ", onRenderYear(toYear)));
  }
  return React8.createElement("div", {
    className: classNames.current
  }, onRenderYear(fromYear), " - ", onRenderYear(toYear));
};
CalendarYearTitle.displayName = "CalendarYearTitle";
var CalendarYearHeader = (props) => {
  const { className, animateBackwards, animationDirection, onRenderTitle } = props;
  const classNames = useCalendarYearStyles_unstable({
    className,
    hasHeaderClickCallback: !!props.onHeaderSelect,
    animateBackwards,
    animationDirection
  });
  var _onRenderTitle;
  return React8.createElement("div", {
    className: classNames.headerContainer
  }, (_onRenderTitle = onRenderTitle === null || onRenderTitle === void 0 ? void 0 : onRenderTitle(props)) !== null && _onRenderTitle !== void 0 ? _onRenderTitle : React8.createElement(CalendarYearTitle, props), React8.createElement(CalendarYearNav, props));
};
CalendarYearHeader.displayName = "CalendarYearHeader";
function useAnimateBackwards2({ selectedYear, navigatedYear }) {
  const rangeYear = selectedYear || navigatedYear || (/* @__PURE__ */ new Date()).getFullYear();
  const fromYear = Math.floor(rangeYear / 10) * 10;
  const previousFromYearRef = React8.useRef(fromYear);
  React8.useRef(() => {
    previousFromYearRef.current = fromYear;
  });
  const previousFromYear = previousFromYearRef.current;
  if (!previousFromYear || previousFromYear === fromYear) {
    return void 0;
  } else if (previousFromYear > fromYear) {
    return true;
  } else {
    return false;
  }
}
function useYearRangeState({ selectedYear, navigatedYear }) {
  const rangeYear = React8.useMemo(() => {
    return selectedYear || navigatedYear || Math.floor((/* @__PURE__ */ new Date()).getFullYear() / 10) * 10;
  }, [
    navigatedYear,
    selectedYear
  ]);
  const [fromYear, setFromYear] = React8.useState(rangeYear);
  const onNavNext = () => {
    setFromYear((year) => year + CELL_COUNT);
  };
  const onNavPrevious = () => {
    setFromYear((year) => year - CELL_COUNT);
  };
  React8.useEffect(() => {
    setFromYear(rangeYear);
  }, [
    rangeYear
  ]);
  const toYear = fromYear + CELL_COUNT - 1;
  return [
    fromYear,
    toYear,
    onNavNext,
    onNavPrevious
  ];
}
var CalendarYear = (props) => {
  const animateBackwards = useAnimateBackwards2(props);
  const [fromYear, toYear, onNavNext, onNavPrevious] = useYearRangeState(props);
  const gridRef = React8.useRef(null);
  React8.useImperativeHandle(props.componentRef, () => ({
    focus() {
      var _gridRef_current_focus, _gridRef_current;
      (_gridRef_current = gridRef.current) === null || _gridRef_current === void 0 ? void 0 : (_gridRef_current_focus = _gridRef_current.focus) === null || _gridRef_current_focus === void 0 ? void 0 : _gridRef_current_focus.call(_gridRef_current);
    }
  }));
  const { className } = props;
  const classNames = useCalendarYearStyles_unstable({
    className
  });
  return React8.createElement("div", {
    className: classNames.root
  }, React8.createElement(CalendarYearHeader, {
    ...props,
    fromYear,
    toYear,
    onSelectPrev: onNavPrevious,
    onSelectNext: onNavNext,
    animateBackwards
  }), React8.createElement(CalendarYearGrid, {
    ...props,
    fromYear,
    toYear,
    animateBackwards,
    componentRef: gridRef
  }));
};
CalendarYear.displayName = "CalendarYear";

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarMonth/useCalendarMonthStyles.styles.js
var useCalendarMonthStyles_unstable = (props) => {
  "use no memo";
  return useCalendarPickerStyles_unstable(props);
};

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarMonth/CalendarMonth.js
var MONTHS_PER_ROW = 4;
function useAnimateBackwards3({ navigatedDate }) {
  const currentYear = navigatedDate.getFullYear();
  const previousYearRef = React9.useRef();
  React9.useEffect(() => {
    previousYearRef.current = currentYear;
  });
  const previousYear = previousYearRef.current;
  if (previousYear === void 0 || previousYear === currentYear) {
    return void 0;
  } else {
    return previousYear > currentYear;
  }
}
function useFocusLogic({ componentRef }) {
  const navigatedMonthRef = React9.useRef(null);
  const calendarYearRef = React9.useRef(null);
  const focusOnUpdate = React9.useRef(false);
  const focus = React9.useCallback(() => {
    if (calendarYearRef.current) {
      calendarYearRef.current.focus();
    } else if (navigatedMonthRef.current) {
      navigatedMonthRef.current.focus();
    }
  }, []);
  React9.useImperativeHandle(componentRef, () => ({
    focus
  }), [
    focus
  ]);
  React9.useEffect(() => {
    if (focusOnUpdate.current) {
      focus();
      focusOnUpdate.current = false;
    }
  });
  const focusOnNextUpdate = () => {
    focusOnUpdate.current = true;
  };
  return [
    navigatedMonthRef,
    calendarYearRef,
    focusOnNextUpdate
  ];
}
var CalendarMonth = (props) => {
  const { allFocusable, animationDirection, className, componentRef, dateTimeFormatter = DEFAULT_DATE_FORMATTING, highlightCurrentMonth, highlightSelectedMonth, maxDate, minDate, navigatedDate, navigationIcons, onHeaderSelect: onUserHeaderSelect, onNavigateDate, selectedDate, strings, today = /* @__PURE__ */ new Date(), yearPickerHidden = false } = props;
  const [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] = useFocusLogic({
    componentRef
  });
  const [isYearPickerVisible, setIsYearPickerVisible] = React9.useState(false);
  const animateBackwards = useAnimateBackwards3({
    navigatedDate
  });
  const selectMonthCallback = (newMonth) => {
    return () => onSelectMonth(newMonth);
  };
  const onSelectNextYear = () => {
    onNavigateDate(addYears(navigatedDate, 1), false);
  };
  const onSelectPrevYear = () => {
    onNavigateDate(addYears(navigatedDate, -1), false);
  };
  const onSelectMonth = (newMonth) => {
    onUserHeaderSelect === null || onUserHeaderSelect === void 0 ? void 0 : onUserHeaderSelect();
    onNavigateDate(setMonth(navigatedDate, newMonth), true);
  };
  const onHeaderSelect = () => {
    if (!yearPickerHidden) {
      focusOnNextUpdate();
      setIsYearPickerVisible(true);
    } else {
      onUserHeaderSelect === null || onUserHeaderSelect === void 0 ? void 0 : onUserHeaderSelect();
    }
  };
  const onSelectYear = (selectedYear) => {
    focusOnNextUpdate();
    const navYear = navigatedDate.getFullYear();
    if (navYear !== selectedYear) {
      let newNavigationDate = new Date(navigatedDate.getTime());
      newNavigationDate.setFullYear(selectedYear);
      if (maxDate && newNavigationDate > maxDate) {
        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());
      } else if (minDate && newNavigationDate < minDate) {
        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());
      }
      onNavigateDate(newNavigationDate, true);
    }
    setIsYearPickerVisible(false);
  };
  const onYearPickerHeaderSelect = (focus) => {
    focusOnNextUpdate();
    setIsYearPickerVisible(false);
  };
  const dateFormatter = dateTimeFormatter;
  const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;
  const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;
  const classNames = useCalendarMonthStyles_unstable({
    className,
    hasHeaderClickCallback: !!onUserHeaderSelect || !yearPickerHidden,
    highlightCurrent: highlightCurrentMonth,
    highlightSelected: highlightSelectedMonth,
    animateBackwards,
    animationDirection
  });
  const arrowNavigationAttributes = useArrowNavigationGroup({
    axis: "grid"
  });
  if (isYearPickerVisible) {
    const [onRenderYear, yearStrings] = getYearStrings({
      dateTimeFormatter,
      navigatedDate,
      strings
    });
    return React9.createElement(CalendarYear, {
      key: "calendarYear",
      minYear: minDate ? minDate.getFullYear() : void 0,
      maxYear: maxDate ? maxDate.getFullYear() : void 0,
      // eslint-disable-next-line react/jsx-no-bind
      onSelectYear,
      // eslint-disable-next-line react/jsx-no-bind
      onHeaderSelect: onYearPickerHeaderSelect,
      selectedYear: selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : void 0,
      navigatedYear: navigatedDate.getFullYear(),
      navigationIcons,
      onRenderYear,
      strings: yearStrings,
      componentRef: calendarYearRef,
      highlightCurrentYear: highlightCurrentMonth,
      highlightSelectedYear: highlightSelectedMonth,
      animationDirection
    });
  }
  const rowIndexes = [];
  for (let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {
    rowIndexes.push(i);
  }
  const yearString = dateFormatter.formatYear(navigatedDate);
  const headerAriaLabel = strings.monthPickerHeaderAriaLabel ? strings.monthPickerHeaderAriaLabel.replace("{0}", yearString) : yearString;
  return React9.createElement("div", {
    className: classNames.root
  }, React9.createElement("div", {
    className: classNames.headerContainer
  }, React9.createElement("button", {
    className: classNames.currentItemButton,
    onClick: onHeaderSelect,
    onKeyDown: onButtonKeyDown2(onHeaderSelect),
    "aria-label": headerAriaLabel,
    tabIndex: !!onUserHeaderSelect || !yearPickerHidden ? 0 : -1,
    type: "button"
  }, React9.createElement("span", {
    "aria-live": "polite",
    "aria-atomic": "true"
  }, yearString)), React9.createElement("div", {
    className: classNames.navigationButtonsContainer
  }, React9.createElement("button", {
    className: mergeClasses(classNames.navigationButton, !isPrevYearInBounds && classNames.disabled),
    "aria-disabled": !isPrevYearInBounds,
    tabIndex: isPrevYearInBounds ? void 0 : allFocusable ? 0 : -1,
    onClick: isPrevYearInBounds ? onSelectPrevYear : void 0,
    onKeyDown: isPrevYearInBounds ? onButtonKeyDown2(onSelectPrevYear) : void 0,
    title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + " " + dateFormatter.formatYear(addYears(navigatedDate, -1)) : void 0,
    type: "button"
  }, navigationIcons.upNavigation), React9.createElement("button", {
    className: mergeClasses(classNames.navigationButton, !isNextYearInBounds && classNames.disabled),
    "aria-disabled": !isNextYearInBounds,
    tabIndex: isNextYearInBounds ? void 0 : allFocusable ? 0 : -1,
    onClick: isNextYearInBounds ? onSelectNextYear : void 0,
    onKeyDown: isNextYearInBounds ? onButtonKeyDown2(onSelectNextYear) : void 0,
    title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + " " + dateFormatter.formatYear(addYears(navigatedDate, 1)) : void 0,
    type: "button"
  }, navigationIcons.downNavigation))), React9.createElement("div", {
    ...arrowNavigationAttributes,
    className: classNames.gridContainer,
    role: "grid",
    "aria-label": yearString
  }, rowIndexes.map((rowNum) => {
    const monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);
    return React9.createElement("div", {
      key: "monthRow_" + rowNum + navigatedDate.getFullYear(),
      role: "row",
      className: classNames.buttonRow
    }, monthsForRow.map((month, index) => {
      const monthIndex = rowNum * MONTHS_PER_ROW + index;
      const indexedMonth = setMonth(navigatedDate, monthIndex);
      const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;
      const isSelectedMonth = selectedDate.getMonth() === monthIndex;
      const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();
      const isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);
      return React9.createElement("button", {
        ref: isNavigatedMonth ? navigatedMonthRef : void 0,
        role: "gridcell",
        className: mergeClasses(classNames.itemButton, highlightCurrentMonth && isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today) && classNames.current, highlightSelectedMonth && isSelectedMonth && isSelectedYear && classNames.selected, !isInBounds && classNames.disabled),
        disabled: !allFocusable && !isInBounds,
        key: monthIndex,
        onClick: isInBounds ? selectMonthCallback(monthIndex) : void 0,
        onKeyDown: isInBounds ? onButtonKeyDown2(selectMonthCallback(monthIndex)) : void 0,
        "aria-label": dateFormatter.formatMonth(indexedMonth, strings),
        "aria-selected": isNavigatedMonth,
        tabIndex: isInBounds ? 0 : -1,
        type: "button"
      }, month);
    }));
  })));
};
CalendarMonth.displayName = "CalendarMonth";
function getYearStrings({ dateTimeFormatter, navigatedDate, strings }) {
  const yearToString = (year) => {
    if (dateTimeFormatter) {
      const yearFormattingDate = new Date(navigatedDate.getTime());
      yearFormattingDate.setFullYear(year);
      return dateTimeFormatter.formatYear(yearFormattingDate);
    }
    return String(year);
  };
  const yearRangeToString = (yearRange) => {
    return `${yearToString(yearRange.fromYear)} - ${yearToString(yearRange.toYear)}`;
  };
  const yearRangeToNextDecadeLabel = (yearRange) => {
    return strings.nextYearRangeAriaLabel ? `${strings.nextYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : "";
  };
  const yearRangeToPrevDecadeLabel = (yearRange) => {
    return strings.prevYearRangeAriaLabel ? `${strings.prevYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : "";
  };
  return [
    yearToString,
    {
      rangeAriaLabel: yearRangeToString,
      prevRangeAriaLabel: yearRangeToPrevDecadeLabel,
      nextRangeAriaLabel: yearRangeToNextDecadeLabel,
      headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel
    }
  ];
}
function isCurrentMonth(month, year, today) {
  return today.getFullYear() === year && today.getMonth() === month;
}
function onButtonKeyDown2(callback) {
  return (ev) => {
    switch (ev.key) {
      case Enter:
        callback();
        break;
    }
  };
}

// node_modules/@fluentui/react-calendar-compat/lib/components/Calendar/calendarNavigationIcons.js
var React10 = __toESM(require_react());
var defaultNavigationIcons = {
  dismiss: React10.createElement(DismissRegular, null),
  downNavigation: React10.createElement(ArrowDownRegular, null),
  upNavigation: React10.createElement(ArrowUpRegular, null)
};

// node_modules/@fluentui/react-calendar-compat/lib/components/Calendar/useCalendarStyles.styles.js
var calendarClassNames = {
  root: "fui-Calendar",
  divider: "fui-Calendar__divider",
  goTodayButton: "fui-Calendar__goTodayButton",
  monthPickerWrapper: "fui-Calendar__monthPickerWrapper",
  liveRegion: "fui-Calendar__liveRegion"
};
var useRootStyles3 = __styles({
  base: {
    mc9l5x: "f22iagw",
    a9b677: "f13dwy2t"
  },
  normalize: {
    E5pizo: "f1couhl3",
    B7ck84d: "f1ewtqcl",
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: "f1s184ao",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai"
  },
  monthPickerNotVisible: {
    Beiy3e4: "f1vx9l62"
  },
  dayAndMonthPickersVisible: {
    a9b677: "fcy5b15"
  },
  dayPickerVisibleAndWeekNumbersShown: {
    a9b677: "fhsg0in"
  },
  dayAndMonthPickersVisibleAndWeekNumbersShown: {
    a9b677: "fcarq7f"
  }
}, {
  d: [".f22iagw{display:flex;}", ".f13dwy2t{width:220px;}", ".f1couhl3{box-shadow:none;}", ".f1ewtqcl{box-sizing:border-box;}", [".f1s184ao{margin:0;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".f1vx9l62{flex-direction:column;}", ".fcy5b15{width:440px;}", ".fhsg0in{width:250px;}", ".fcarq7f{width:470px;}"]
});
var useDividerStyles = __styles({
  base: {
    h3c5rm: 0,
    vrafjx: 0,
    Bekrc4i: 0,
    u1mtju: ["fe2nn5g", "f1rcbay7"],
    Bhzewxz: "f15twtuk"
  }
}, {
  d: [[".fe2nn5g{border-right:1px solid var(--colorNeutralStroke2);}", {
    p: -1
  }], [".f1rcbay7{border-left:1px solid var(--colorNeutralStroke2);}", {
    p: -1
  }], ".f15twtuk{top:0;}"]
});
var useMonthPickerWrapperStyles = __styles({
  base: {
    mc9l5x: "f22iagw",
    Beiy3e4: "f1vx9l62"
  }
}, {
  d: [".f22iagw{display:flex;}", ".f1vx9l62{flex-direction:column;}"]
});
var useGoTodayButtonStyles = __styles({
  base: {
    qb2dma: "fpydfdc",
    De3pzq: "f1c21dwh",
    icvyot: "f1ern45e",
    vrafjx: ["f1n71otn", "f1deefiw"],
    oivjwe: "f1h8hb77",
    wvpqe5: ["f1deefiw", "f1n71otn"],
    B5kzvoi: "f1yab3r1",
    B7ck84d: "f1e4lqlz",
    sj55zd: "f19n0e5",
    Bahqtrf: "f1mo0ibp",
    Be2twd7: "fy9rknc",
    Bqenvij: "f1tvdnth",
    Bg96gwp: "fpfng1i",
    t21cq0: ["f17vyym1", "fb5scp"],
    B6of3ja: "f4gg0ds",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1gl81tg",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1p2x7z2",
    seuwu7: "fvy6vk6",
    Jwef8y: "f9ql6rf",
    Bi91k9c: "f1f1pb61",
    eoavqd: "f8491dx",
    Bx7pl5v: 0,
    Bnosqey: 0,
    Bv57zgv: 0,
    Bbxjs3m: "fzk52v6",
    knvgbf: 0,
    B23s7e0: 0,
    Be8uuq8: 0,
    B3ons6i: 0,
    Bnj8mme: "fxh1mxx",
    B2d53fq: "fc9d3oc",
    Dyrjrp: "f1cqwcg4",
    Be90el1: "fmjaa5u"
  }
}, {
  d: [".fpydfdc{align-self:flex-end;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", ".f1yab3r1{bottom:0;}", ".f1e4lqlz{box-sizing:content-box;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1mo0ibp{font-family:inherit;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".f1tvdnth{height:30px;}", ".fpfng1i{line-height:30px;}", ".f17vyym1{margin-right:16px;}", ".fb5scp{margin-left:16px;}", ".f4gg0ds{margin-top:3px;}", [".f1gl81tg{overflow:visible;}", {
    p: -1
  }], [".f1p2x7z2{padding:0 4px;}", {
    p: -1
  }], ".fvy6vk6 div{font-size:var(--fontSizeBase200);}", ".f1cqwcg4:disabled{color:var(--colorNeutralForegroundDisabled);}", ".fmjaa5u:disabled{pointer-events:none;}"],
  h: [".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}", ".f1f1pb61:hover{color:var(--colorBrandForeground1);}", ".f8491dx:hover{cursor:pointer;}", ".fc9d3oc:hover:active{color:var(--colorBrandForeground2);}"],
  m: [["@media (forced-colors: active){.fzk52v6:hover{outline:var(--strokeWidthThin);}}", {
    p: -1,
    m: "(forced-colors: active)"
  }], ["@media (forced-colors: active){.fxh1mxx:hover{border-radius:var(--borderRadiusSmall);}}", {
    p: -1,
    m: "(forced-colors: active)"
  }]]
});
var useLiveRegionStyles = __styles({
  base: {
    Bgfg5da: 0,
    B9xav0g: 0,
    oivjwe: 0,
    Bn0qgzm: 0,
    B4g9neb: 0,
    zhjwy3: 0,
    wvpqe5: 0,
    ibv6hh: 0,
    u1mtju: 0,
    h3c5rm: 0,
    vrafjx: 0,
    Bekrc4i: 0,
    i8vvqc: 0,
    g2u3we: 0,
    icvyot: 0,
    B4j52fo: 0,
    irswps: "f3bhgqh",
    Bqenvij: "f1mpe4l3",
    jrapky: 0,
    Frg6f3: 0,
    t21cq0: 0,
    B6of3ja: 0,
    B74szlk: "f1jlpb2r",
    B68tc82: 0,
    Bmxbyg5: 0,
    Bpg54ce: "f1a3p1vp",
    Byoj8tv: 0,
    uwmqm3: 0,
    z189sj: 0,
    z8tnut: 0,
    B0ocmuz: "f1mk8lai",
    qhf8xq: "f1euv43f",
    a9b677: "frkrog8"
  }
}, {
  d: [[".f3bhgqh{border:none;}", {
    p: -2
  }], ".f1mpe4l3{height:1px;}", [".f1jlpb2r{margin:-1px;}", {
    p: -1
  }], [".f1a3p1vp{overflow:hidden;}", {
    p: -1
  }], [".f1mk8lai{padding:0;}", {
    p: -1
  }], ".f1euv43f{position:absolute;}", ".frkrog8{width:1px;}"]
});
var useCalendarStyles_unstable = (props) => {
  "use no memo";
  const rootStyles = useRootStyles3();
  const dividerStyles = useDividerStyles();
  const monthPickerWrapperStyles = useMonthPickerWrapperStyles();
  const goTodayButtonStyles = useGoTodayButtonStyles();
  const liveRegionStyles = useLiveRegionStyles();
  const {
    className,
    isDayPickerVisible,
    isMonthPickerVisible,
    showWeekNumbers
  } = props;
  return {
    root: mergeClasses(calendarClassNames.root, rootStyles.base, rootStyles.normalize, !isMonthPickerVisible && rootStyles.monthPickerNotVisible, isDayPickerVisible && isMonthPickerVisible && !showWeekNumbers && rootStyles.dayAndMonthPickersVisible, isDayPickerVisible && !isMonthPickerVisible && showWeekNumbers && rootStyles.dayPickerVisibleAndWeekNumbersShown, isDayPickerVisible && isMonthPickerVisible && showWeekNumbers && rootStyles.dayAndMonthPickersVisibleAndWeekNumbersShown, className),
    divider: mergeClasses(calendarClassNames.divider, dividerStyles.base),
    monthPickerWrapper: mergeClasses(calendarClassNames.monthPickerWrapper, monthPickerWrapperStyles.base),
    goTodayButton: mergeClasses(calendarClassNames.goTodayButton, goTodayButtonStyles.base),
    liveRegion: mergeClasses(calendarClassNames.liveRegion, liveRegionStyles.base)
  };
};

// node_modules/@fluentui/react-calendar-compat/lib/components/Calendar/Calendar.js
var MIN_SIZE_FORCE_OVERLAY = 440;
var defaultWorkWeekDays = [
  DayOfWeek.Monday,
  DayOfWeek.Tuesday,
  DayOfWeek.Wednesday,
  DayOfWeek.Thursday,
  DayOfWeek.Friday
];
function useDateState(props) {
  const { value, today: todayProp, onSelectDate } = props;
  const today = React11.useMemo(() => todayProp !== null && todayProp !== void 0 ? todayProp : /* @__PURE__ */ new Date(), [
    todayProp
  ]);
  const [selectedDate, setSelectedDate] = useControllableState({
    state: value,
    defaultState: value ? void 0 : today,
    initialState: today
  });
  const [navigatedDay = today, setNavigatedDay] = React11.useState(value);
  const [navigatedMonth = today, setNavigatedMonth] = React11.useState(value);
  const [lastSelectedDate = today, setLastSelectedDate] = React11.useState(value);
  if (value && lastSelectedDate.valueOf() !== value.valueOf()) {
    setNavigatedDay(value);
    setNavigatedMonth(value);
    setLastSelectedDate(value);
  }
  const navigateMonth = (date) => {
    setNavigatedMonth(date);
  };
  const navigateDay = (date) => {
    setNavigatedMonth(date);
    setNavigatedDay(date);
  };
  const onDateSelected = (date, selectedDateRangeArray) => {
    setNavigatedMonth(date);
    setNavigatedDay(date);
    setSelectedDate(date);
    onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date, selectedDateRangeArray);
  };
  return [
    selectedDate,
    navigatedDay,
    navigatedMonth,
    onDateSelected,
    navigateDay,
    navigateMonth
  ];
}
function useVisibilityState({ isDayPickerVisible: isDayPickerVisibleProp, isMonthPickerVisible: isMonthPickerVisibleProp, showMonthPickerAsOverlay }) {
  const showMonthPickerAsOverlayState = useShowMonthPickerAsOverlay({
    isDayPickerVisible: isDayPickerVisibleProp,
    showMonthPickerAsOverlay
  });
  const [isMonthPickerVisible, setIsMonthPickerVisible] = React11.useState(() => showMonthPickerAsOverlayState ? false : isMonthPickerVisibleProp !== null && isMonthPickerVisibleProp !== void 0 ? isMonthPickerVisibleProp : false);
  const [isDayPickerVisible, setIsDayPickerVisible] = React11.useState(() => showMonthPickerAsOverlayState ? true : isDayPickerVisibleProp !== null && isDayPickerVisibleProp !== void 0 ? isDayPickerVisibleProp : true);
  const toggleDayMonthPickerVisibility = () => {
    setIsMonthPickerVisible(!isMonthPickerVisible);
    setIsDayPickerVisible(!isDayPickerVisible);
  };
  return [
    isMonthPickerVisible,
    isDayPickerVisible,
    toggleDayMonthPickerVisibility
  ];
}
function useFocusLogic2({ componentRef }, isDayPickerVisible, isMonthPickerVisible) {
  const dayPicker = React11.useRef(null);
  const monthPicker = React11.useRef(null);
  const focusOnUpdate = React11.useRef(false);
  const { targetDocument } = useFluent();
  const win = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView;
  const focus = React11.useCallback(() => {
    if (isDayPickerVisible && dayPicker.current) {
      focusAsync(dayPicker.current, win);
    } else if (isMonthPickerVisible && monthPicker.current) {
      focusAsync(monthPicker.current, win);
    }
  }, [
    isDayPickerVisible,
    isMonthPickerVisible,
    win
  ]);
  React11.useImperativeHandle(componentRef, () => ({
    focus
  }), [
    focus
  ]);
  React11.useEffect(() => {
    if (focusOnUpdate.current) {
      focus();
      focusOnUpdate.current = false;
    }
  });
  const focusOnNextUpdate = () => {
    focusOnUpdate.current = true;
  };
  return [
    dayPicker,
    monthPicker,
    focusOnNextUpdate
  ];
}
var Calendar = React11.forwardRef((props, forwardedRef) => {
  const { allFocusable = false, calendarDayProps, calendarMonthProps, className, componentRef, dateRangeType = DateRangeType.Day, dateTimeFormatter = DEFAULT_DATE_FORMATTING, firstDayOfWeek = DayOfWeek.Sunday, firstWeekOfYear = FirstWeekOfYear.FirstDay, highlightCurrentMonth = false, highlightSelectedMonth = false, id, isDayPickerVisible: isDayPickerVisibleProp = true, isMonthPickerVisible: isMonthPickerVisibleProp = true, maxDate, minDate, onDismiss, onSelectDate, restrictedDates, showCloseButton = false, showGoToToday = true, showMonthPickerAsOverlay: showMonthPickerAsOverlayProp = false, showSixWeeksByDefault = false, showWeekNumbers = false, strings = DEFAULT_CALENDAR_STRINGS, today: todayProp, value, workWeekDays = defaultWorkWeekDays } = props;
  const today = React11.useMemo(() => {
    return todayProp !== null && todayProp !== void 0 ? todayProp : /* @__PURE__ */ new Date();
  }, [
    todayProp
  ]);
  const [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth] = useDateState({
    onSelectDate,
    value,
    today
  });
  const [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility] = useVisibilityState({
    isDayPickerVisible: isDayPickerVisibleProp,
    isMonthPickerVisible: isMonthPickerVisibleProp,
    showMonthPickerAsOverlay: showMonthPickerAsOverlayProp
  });
  const [dayPicker, monthPicker, focusOnNextUpdate] = useFocusLogic2({
    componentRef
  }, isDayPickerVisible, isMonthPickerVisible);
  const renderGoToTodayButton = () => {
    let goTodayEnabled = showGoToToday;
    if (goTodayEnabled && today) {
      goTodayEnabled = navigatedDay.getFullYear() !== today.getFullYear() || navigatedDay.getMonth() !== today.getMonth() || navigatedMonth.getFullYear() !== today.getFullYear() || navigatedMonth.getMonth() !== today.getMonth();
    }
    return showGoToToday && React11.createElement("button", {
      className: classes.goTodayButton,
      onClick: onGotoToday,
      onKeyDown: onButtonKeyDown3(onGotoToday),
      type: "button",
      disabled: !goTodayEnabled
    }, strings.goToToday);
  };
  const onNavigateDayDate = (date, focusOnNavigatedDay) => {
    navigateDay(date);
    if (focusOnNavigatedDay) {
      focusOnNextUpdate();
    }
  };
  const onNavigateMonthDate = (date, focusOnNavigatedDay) => {
    if (focusOnNavigatedDay) {
      focusOnNextUpdate();
    }
    if (!focusOnNavigatedDay) {
      navigateMonth(date);
      return;
    }
    if (monthPickerOnly) {
      onDateSelected(date);
    }
    navigateDay(date);
  };
  const showMonthPickerAsOverlay = useShowMonthPickerAsOverlay({
    isDayPickerVisible: isDayPickerVisibleProp,
    showMonthPickerAsOverlay: showMonthPickerAsOverlayProp
  });
  const onHeaderSelect = showMonthPickerAsOverlay ? () => {
    toggleDayMonthPickerVisibility();
    focusOnNextUpdate();
  } : void 0;
  const onGotoToday = () => {
    navigateDay(today);
    if (showMonthPickerAsOverlay && isMonthPickerVisible) {
      toggleDayMonthPickerVisibility();
    }
    focusOnNextUpdate();
  };
  const onButtonKeyDown3 = (callback) => {
    return (ev) => {
      switch (ev.key) {
        case Enter:
        case Space:
          callback();
          break;
      }
    };
  };
  const onDatePickerPopupKeyDown = (ev) => {
    switch (ev.key) {
      case Enter:
        ev.preventDefault();
        break;
      case Backspace:
        ev.preventDefault();
        break;
      case Escape:
        ev.stopPropagation();
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
        break;
      case PageUp:
        if (ev.ctrlKey) {
          navigateDay(addYears(navigatedDay, 1));
        } else {
          navigateDay(addMonths(navigatedDay, 1));
        }
        ev.preventDefault();
        break;
      case PageDown:
        if (ev.ctrlKey) {
          navigateDay(addYears(navigatedDay, -1));
        } else {
          navigateDay(addMonths(navigatedDay, -1));
        }
        ev.preventDefault();
        break;
      default:
        break;
    }
  };
  const monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;
  const classes = useCalendarStyles_unstable({
    className,
    isDayPickerVisible,
    isMonthPickerVisible,
    showWeekNumbers
  });
  let todayDateString = "";
  let selectedDateString = "";
  if (dateTimeFormatter && strings.todayDateFormatString) {
    todayDateString = strings.todayDateFormatString.replace("{0}", dateTimeFormatter.formatMonthDayYear(today, strings));
  }
  if (dateTimeFormatter && strings.selectedDateFormatString) {
    const dateStringFormatter = monthPickerOnly ? dateTimeFormatter.formatMonthYear : dateTimeFormatter.formatMonthDayYear;
    selectedDateString = strings.selectedDateFormatString.replace("{0}", dateStringFormatter(selectedDate, strings));
  }
  const selectionAndTodayString = selectedDateString + ", " + todayDateString;
  return React11.createElement("div", {
    id,
    ref: forwardedRef,
    className: classes.root,
    onKeyDown: onDatePickerPopupKeyDown
  }, React11.createElement("div", {
    className: classes.liveRegion,
    "aria-live": "polite",
    "aria-atomic": "true"
  }, React11.createElement("span", null, selectedDateString)), isDayPickerVisible && React11.createElement(CalendarDay, {
    gridLabel: selectionAndTodayString,
    selectedDate,
    navigatedDate: navigatedDay,
    today,
    onSelectDate: onDateSelected,
    // eslint-disable-next-line react/jsx-no-bind
    onNavigateDate: onNavigateDayDate,
    onDismiss,
    firstDayOfWeek,
    dateRangeType,
    strings,
    // eslint-disable-next-line react/jsx-no-bind
    onHeaderSelect,
    showWeekNumbers,
    firstWeekOfYear,
    dateTimeFormatter,
    showSixWeeksByDefault,
    minDate,
    maxDate,
    navigationIcons: defaultNavigationIcons,
    restrictedDates,
    workWeekDays,
    componentRef: dayPicker,
    showCloseButton,
    allFocusable,
    ...calendarDayProps
  }), isDayPickerVisible && isMonthPickerVisible && React11.createElement("div", {
    className: classes.divider
  }), isMonthPickerVisible ? React11.createElement("div", {
    className: classes.monthPickerWrapper
  }, React11.createElement(CalendarMonth, {
    navigatedDate: navigatedMonth,
    selectedDate: navigatedDay,
    strings,
    // eslint-disable-next-line react/jsx-no-bind
    onNavigateDate: onNavigateMonthDate,
    today,
    highlightCurrentMonth,
    highlightSelectedMonth,
    // eslint-disable-next-line react/jsx-no-bind
    onHeaderSelect,
    dateTimeFormatter,
    minDate,
    maxDate,
    componentRef: monthPicker,
    navigationIcons: defaultNavigationIcons,
    ...calendarMonthProps
  }), renderGoToTodayButton()) : renderGoToTodayButton());
});
Calendar.displayName = "Calendar";
var useShowMonthPickerAsOverlay = ({ isDayPickerVisible, showMonthPickerAsOverlay }) => {
  const { targetDocument } = useFluent();
  const win = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView;
  return showMonthPickerAsOverlay || isDayPickerVisible && win && win.innerWidth <= MIN_SIZE_FORCE_OVERLAY;
};

// node_modules/@fluentui/react-calendar-compat/lib/components/Calendar/defaults.js
var defaultCalendarStrings = DEFAULT_CALENDAR_STRINGS;

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDay/CalendarDay.types.js
var React12 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarDayGrid/CalendarDayGrid.types.js
var React13 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarMonth/CalendarMonth.types.js
var React14 = __toESM(require_react());

// node_modules/@fluentui/react-calendar-compat/lib/components/CalendarYear/CalendarYear.types.js
var React15 = __toESM(require_react());

// node_modules/@fluentui/react-datepicker-compat/lib/components/DatePicker/defaults.js
var defaultDatePickerStrings = {
  ...defaultCalendarStrings,
  prevMonthAriaLabel: "Go to previous month",
  nextMonthAriaLabel: "Go to next month",
  prevYearAriaLabel: "Go to previous year",
  nextYearAriaLabel: "Go to next year",
  closeButtonAriaLabel: "Close date picker"
};
var defaultDatePickerErrorStrings = {
  "invalid-input": "Invalid date format",
  "out-of-bounds": "Date is out of bounds",
  "required-input": "Field is required"
};

// node_modules/@fluentui/react-datepicker-compat/lib/components/DatePicker/DatePicker.js
var React18 = __toESM(require_react());

// node_modules/@fluentui/react-datepicker-compat/lib/components/DatePicker/renderDatePicker.js
var renderDatePicker_unstable = (state) => {
  assertSlots(state);
  const { inlinePopup } = state;
  return jsxs(import_react.Fragment, {
    children: [
      jsx(state.root, {}),
      state.popupSurface && (inlinePopup ? jsx(state.popupSurface, {
        children: jsx(state.calendar, {})
      }) : jsx(Portal, {
        mountNode: state.mountNode,
        children: jsx(state.popupSurface, {
          children: jsx(state.calendar, {})
        })
      }))
    ]
  });
};

// node_modules/@fluentui/react-datepicker-compat/lib/components/DatePicker/useDatePicker.js
var React17 = __toESM(require_react());

// node_modules/@fluentui/react-datepicker-compat/lib/utils/usePopupPositioning.js
var React16 = __toESM(require_react());
function usePopupPositioning(props) {
  const { positioning } = props;
  const popupOptions = {
    position: "below",
    align: "start",
    ...resolvePositioningShorthand(positioning)
  };
  const { targetRef, containerRef } = usePositioning(popupOptions);
  return [
    targetRef,
    containerRef
  ];
}

// node_modules/@fluentui/react-datepicker-compat/lib/components/DatePicker/useDatePicker.js
function isDateOutOfBounds(date, minDate, maxDate) {
  return !!minDate && compareDatePart(minDate, date) > 0 || !!maxDate && compareDatePart(maxDate, date) < 0;
}
function useFocusLogic3() {
  const inputRef = React17.useRef(null);
  const preventFocusOpeningPicker = React17.useRef(false);
  const focus = React17.useCallback(() => {
    var _inputRef_current_focus, _inputRef_current;
    (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : (_inputRef_current_focus = _inputRef_current.focus) === null || _inputRef_current_focus === void 0 ? void 0 : _inputRef_current_focus.call(_inputRef_current);
  }, []);
  const preventNextFocusOpeningPicker = React17.useCallback(() => {
    preventFocusOpeningPicker.current = true;
  }, []);
  return [
    focus,
    inputRef,
    preventFocusOpeningPicker,
    preventNextFocusOpeningPicker
  ];
}
function usePopupVisibility(props) {
  "use no memo";
  const [open, setOpen] = useControllableState({
    initialState: false,
    defaultState: props.defaultOpen,
    state: props.open
  });
  const isMounted = React17.useRef(false);
  React17.useEffect(
    () => {
      if (isMounted.current && !open) {
        var _props_onOpenChange;
        (_props_onOpenChange = props.onOpenChange) === null || _props_onOpenChange === void 0 ? void 0 : _props_onOpenChange.call(props, false);
      }
      isMounted.current = true;
    },
    // Should only run on allowTextInput or open change
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      props.allowTextInput,
      open
    ]
  );
  return [
    open,
    setOpen
  ];
}
function useSelectedDate({ formatDate, onSelectDate, value }) {
  const [selectedDate, setSelectedDateState] = useControllableState({
    initialState: null,
    state: value
  });
  const [formattedDate, setFormattedDate] = React17.useState(() => value && formatDate ? formatDate(value) : "");
  const setSelectedDate = (newDate) => {
    onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(newDate);
    setSelectedDateState(newDate);
    setFormattedDate(newDate && formatDate ? formatDate(newDate) : "");
  };
  React17.useEffect(() => {
    setFormattedDate(value && formatDate ? formatDate(value) : "");
  }, [
    formatDate,
    value
  ]);
  return [
    selectedDate,
    formattedDate,
    setSelectedDate,
    setFormattedDate
  ];
}
var defaultFormatDate = (date) => date ? date.toDateString() : "";
var defaultParseDateFromString = (dateStr) => {
  const date = Date.parse(dateStr);
  return date ? new Date(date) : null;
};
var useDatePicker_unstable = (props, ref) => {
  "use no memo";
  const { allowTextInput = false, allFocusable = false, borderless = false, dateTimeFormatter, defaultOpen = false, disableAutoFocus = true, firstDayOfWeek = DayOfWeek.Sunday, firstWeekOfYear = FirstWeekOfYear.FirstDay, formatDate = defaultFormatDate, highlightCurrentMonth = false, highlightSelectedMonth = false, initialPickerDate: initialPickerDateProp, inlinePopup = false, isMonthPickerVisible = true, maxDate, minDate, mountNode, onOpenChange, onSelectDate: onUserSelectDate, openOnClick = true, onValidationResult, parseDateFromString = defaultParseDateFromString, showCloseButton = false, showGoToToday = true, showMonthPickerAsOverlay = false, showWeekNumbers = false, strings = defaultDatePickerStrings, today, underlined = false, value, ...restOfProps } = props;
  const initialPickerDate = React17.useMemo(() => initialPickerDateProp !== null && initialPickerDateProp !== void 0 ? initialPickerDateProp : /* @__PURE__ */ new Date(), [
    initialPickerDateProp
  ]);
  const calendar = React17.useRef(null);
  const [focus, rootRef, preventFocusOpeningPicker, preventNextFocusOpeningPicker] = useFocusLogic3();
  const [selectedDate, formattedDate, setSelectedDate, setFormattedDate] = useSelectedDate({
    formatDate,
    onSelectDate: onUserSelectDate,
    value
  });
  const [open, setOpenState] = usePopupVisibility(props);
  const fieldContext = useFieldContext_unstable();
  var _fieldContext_required;
  const required = (_fieldContext_required = fieldContext === null || fieldContext === void 0 ? void 0 : fieldContext.required) !== null && _fieldContext_required !== void 0 ? _fieldContext_required : props.required;
  const defaultId = useId("datePicker-input");
  const popupSurfaceId = useId("datePicker-popupSurface");
  const validateTextInput = React17.useCallback((date = null) => {
    let error;
    if (allowTextInput) {
      if (formattedDate || date) {
        if (selectedDate && formatDate && formatDate(date !== null && date !== void 0 ? date : selectedDate) === formattedDate) {
          return;
        }
        date = date || parseDateFromString(formattedDate);
        if (!date || isNaN(date.getTime())) {
          setSelectedDate(selectedDate);
          error = "invalid-input";
        } else {
          if (isDateOutOfBounds(date, minDate, maxDate)) {
            error = "out-of-bounds";
          } else {
            setSelectedDate(date);
          }
        }
      } else {
        if (required) {
          error = "required-input";
        }
        onUserSelectDate === null || onUserSelectDate === void 0 ? void 0 : onUserSelectDate(date);
      }
    } else if (required && !formattedDate) {
      error = "required-input";
    }
    onValidationResult === null || onValidationResult === void 0 ? void 0 : onValidationResult({
      error
    });
  }, [
    allowTextInput,
    formatDate,
    formattedDate,
    maxDate,
    minDate,
    onUserSelectDate,
    onValidationResult,
    parseDateFromString,
    required,
    selectedDate,
    setSelectedDate
  ]);
  const setOpen = React17.useCallback(
    (newState) => {
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(newState);
      setOpenState(newState);
      if (!open && !props.disabled) {
        focus();
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      focus,
      onOpenChange,
      props.disabled,
      setOpenState
    ]
  );
  const dismissDatePickerPopup = React17.useCallback((newlySelectedDate) => {
    if (open) {
      setOpen(false);
      validateTextInput(newlySelectedDate);
      if (!allowTextInput && newlySelectedDate) {
        setSelectedDate(newlySelectedDate);
      }
    }
  }, [
    allowTextInput,
    open,
    setOpen,
    setSelectedDate,
    validateTextInput
  ]);
  const showDatePickerPopup = React17.useCallback(() => {
    if (!open) {
      preventNextFocusOpeningPicker();
      setOpen(true);
    }
  }, [
    open,
    preventNextFocusOpeningPicker,
    setOpen
  ]);
  const calendarDismissed = React17.useCallback((newlySelectedDate) => {
    preventNextFocusOpeningPicker();
    dismissDatePickerPopup(newlySelectedDate);
  }, [
    dismissDatePickerPopup,
    preventNextFocusOpeningPicker
  ]);
  const onInputChange = React17.useCallback((ev, data) => {
    const { value: newValue } = data;
    if (allowTextInput) {
      if (open) {
        dismissDatePickerPopup();
      }
      setFormattedDate(newValue);
    }
  }, [
    allowTextInput,
    dismissDatePickerPopup,
    open,
    setFormattedDate
  ]);
  const onInputBlur = React17.useCallback(() => {
    validateTextInput();
  }, [
    validateTextInput
  ]);
  const onInputKeyDown = React17.useCallback((ev) => {
    switch (ev.key) {
      case Enter:
        ev.preventDefault();
        ev.stopPropagation();
        if (!open) {
          validateTextInput();
          showDatePickerPopup();
        } else {
          if (props.allowTextInput) {
            dismissDatePickerPopup();
          }
        }
        break;
      case Escape:
        ev.stopPropagation();
        ev.preventDefault();
        if (open) {
          calendarDismissed();
        }
        break;
      case ArrowDown:
        ev.preventDefault();
        if (!open) {
          showDatePickerPopup();
        }
        break;
      default:
        break;
    }
  }, [
    calendarDismissed,
    dismissDatePickerPopup,
    open,
    props.allowTextInput,
    showDatePickerPopup,
    validateTextInput
  ]);
  const onInputFocus = React17.useCallback(() => {
    if (disableAutoFocus) {
      return;
    }
    if (!allowTextInput) {
      if (!preventFocusOpeningPicker.current) {
        showDatePickerPopup();
      }
      preventFocusOpeningPicker.current = false;
    }
  }, [
    allowTextInput,
    disableAutoFocus,
    preventFocusOpeningPicker,
    showDatePickerPopup
  ]);
  const onInputClick = React17.useCallback(() => {
    if ((props.openOnClick || !props.disableAutoFocus) && !open && !props.disabled) {
      showDatePickerPopup();
      return;
    }
    if (allowTextInput) {
      dismissDatePickerPopup();
    }
  }, [
    allowTextInput,
    dismissDatePickerPopup,
    open,
    props.disabled,
    props.disableAutoFocus,
    props.openOnClick,
    showDatePickerPopup
  ]);
  const onIconClick = (ev) => {
    ev.stopPropagation();
    if (!open && !props.disabled) {
      showDatePickerPopup();
    } else if (props.allowTextInput) {
      dismissDatePickerPopup();
    }
  };
  const inputAppearance = underlined ? "underline" : borderless ? "filled-lighter" : "outline";
  const [triggerWrapperRef, popupRef] = usePopupPositioning(props);
  const inputRoot = slot_exports.always(props.root, {
    defaultProps: {
      ref: triggerWrapperRef
    },
    elementType: "span"
  });
  inputRoot.ref = useMergedRefs(inputRoot.ref, triggerWrapperRef);
  const input = slot_exports.always(props.input, {
    elementType: "input"
  });
  input.ref = useMergedRefs(input.ref, ref, rootRef);
  const inputLabelledBy = props["aria-labelledby"];
  var _props_id;
  const inputId = (_props_id = props.id) !== null && _props_id !== void 0 ? _props_id : defaultId;
  const iconA11yProps = React17.useMemo(() => ({
    role: "button",
    "aria-expanded": open,
    "aria-labelledby": inputLabelledBy !== null && inputLabelledBy !== void 0 ? inputLabelledBy : inputId
  }), [
    open,
    inputLabelledBy,
    inputId
  ]);
  const contentAfter = slot_exports.always(props.contentAfter || {}, {
    defaultProps: {
      children: React17.createElement(CalendarMonthRegular, null),
      ...iconA11yProps
    },
    elementType: "span"
  });
  contentAfter.onClick = useEventCallback(mergeCallbacks(contentAfter.onClick, onIconClick));
  const root = slot_exports.always(restOfProps, {
    defaultProps: {
      appearance: inputAppearance,
      "aria-controls": open ? popupSurfaceId : void 0,
      "aria-expanded": open,
      "aria-haspopup": "dialog",
      readOnly: !allowTextInput,
      role: "combobox",
      id: inputId
    },
    elementType: Input
  });
  root.root = inputRoot;
  root.input = input;
  root.contentAfter = contentAfter;
  root.onChange = useEventCallback(mergeCallbacks(root.onChange, onInputChange));
  root.onBlur = useEventCallback(mergeCallbacks(root.onBlur, onInputBlur));
  root.onKeyDown = useEventCallback(mergeCallbacks(root.onKeyDown, onInputKeyDown));
  root.onFocus = useEventCallback(mergeCallbacks(root.onFocus, onInputFocus));
  root.onClick = useEventCallback(mergeCallbacks(root.onClick, onInputClick));
  const { modalAttributes } = useModalAttributes({
    trapFocus: true,
    alwaysFocusable: true,
    legacyTrapFocus: true
  });
  const popupSurface = open ? slot_exports.optional(props.popupSurface, {
    renderByDefault: true,
    defaultProps: {
      "aria-label": "Calendar",
      "aria-modal": true,
      id: popupSurfaceId,
      role: "dialog",
      ref: popupRef,
      ...modalAttributes
    },
    elementType: "div"
  }) : void 0;
  const { targetDocument } = useFluent();
  useOnClickOutside({
    element: targetDocument,
    callback: (ev) => dismissDatePickerPopup(),
    refs: [
      triggerWrapperRef,
      popupRef
    ],
    disabled: !open
  });
  useOnScrollOutside({
    element: targetDocument,
    callback: (ev) => dismissDatePickerPopup(),
    refs: [
      triggerWrapperRef,
      popupRef
    ],
    disabled: !open
  });
  React17.useEffect(() => {
    if (open && !props.disabled && calendar.current) {
      calendar.current.focus();
    }
  }, [
    disableAutoFocus,
    open,
    props.disabled
  ]);
  const calendarShorthand = slot_exports.always(props.calendar, {
    defaultProps: {
      allFocusable,
      componentRef: calendar,
      dateTimeFormatter,
      firstDayOfWeek,
      firstWeekOfYear,
      highlightCurrentMonth,
      highlightSelectedMonth,
      isMonthPickerVisible,
      maxDate,
      minDate,
      showCloseButton,
      showGoToToday,
      showMonthPickerAsOverlay,
      showWeekNumbers,
      strings,
      today,
      value: selectedDate || initialPickerDate
    },
    elementType: Calendar
  });
  calendarShorthand.onDismiss = useEventCallback(mergeCallbacks(calendarShorthand.onDismiss, calendarDismissed));
  calendarShorthand.onSelectDate = useEventCallback(mergeCallbacks(calendarShorthand.onSelectDate, calendarDismissed));
  const state = {
    disabled: !!props.disabled,
    inlinePopup,
    components: {
      root: Input,
      calendar: Calendar,
      popupSurface: "div"
    },
    calendar: calendarShorthand,
    mountNode,
    root,
    popupSurface
  };
  state.root.value = formattedDate;
  return state;
};

// node_modules/@fluentui/react-datepicker-compat/lib/components/DatePicker/useDatePickerStyles.styles.js
var datePickerClassNames = {
  root: "fui-DatePicker",
  calendar: "fui-DatePicker__calendar",
  popupSurface: "fui-DatePicker__popupSurface"
};
var useStyles = __styles({
  base: {
    qhf8xq: "f10pi13n",
    Bceei9c: "f1k6fduh",
    xfaavh: "faxec97"
  },
  disabled: {
    Bceei9c: "f158kwzp",
    xfaavh: "f19qwlmg"
  },
  inline: {
    Bj3rh1h: "f19g0ac"
  }
}, {
  d: [".f10pi13n{position:relative;}", ".f1k6fduh{cursor:pointer;}", ".faxec97 input{cursor:pointer;}", ".f158kwzp{cursor:default;}", ".f19qwlmg input{cursor:default;}", ".f19g0ac{z-index:1;}"]
});
var usePopupSurfaceClassName = __resetStyles("r1ytv1z8", null, [".r1ytv1z8{background-color:var(--colorNeutralBackground1);box-shadow:var(--shadow16);border-radius:var(--borderRadiusMedium);border-width:1px;border-style:solid;border-color:var(--colorTransparentStroke);display:inline-flex;color:var(--colorNeutralForeground1);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);}"]);
var useDatePickerStyles_unstable = (state) => {
  "use no memo";
  const styles = useStyles();
  const popupSurfaceClassName = usePopupSurfaceClassName();
  const {
    disabled,
    inlinePopup
  } = state;
  state.root.className = mergeClasses(datePickerClassNames.root, styles.base, disabled && styles.disabled, state.root.className);
  if (state.popupSurface) {
    state.popupSurface.className = mergeClasses(datePickerClassNames.popupSurface, popupSurfaceClassName, state.popupSurface.className, inlinePopup && styles.inline);
  }
  state.calendar.className = mergeClasses(datePickerClassNames.calendar, state.calendar.className);
  return state;
};

// node_modules/@fluentui/react-datepicker-compat/lib/components/DatePicker/DatePicker.js
var DatePicker = React18.forwardRef((props, ref) => {
  const state = useDatePicker_unstable(props, ref);
  useDatePickerStyles_unstable(state);
  return renderDatePicker_unstable(state);
});
DatePicker.displayName = "DatePicker";
export {
  DatePicker,
  datePickerClassNames,
  defaultDatePickerErrorStrings,
  defaultDatePickerStrings,
  renderDatePicker_unstable,
  useDatePickerStyles_unstable,
  useDatePicker_unstable
};
//# sourceMappingURL=@fluentui_react-datepicker-compat.js.map
