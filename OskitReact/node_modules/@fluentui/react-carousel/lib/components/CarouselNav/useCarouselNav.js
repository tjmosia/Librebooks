import { useArrowNavigationGroup } from '@fluentui/react-tabster';
import { getIntrinsicElementProps, slot, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';
import * as React from 'react';
import { useCarouselContext_unstable as useCarouselContext } from '../CarouselContext';
/**
 * Create the state required to render CarouselNav.
 *
 * The returned state can be modified with hooks such as useCarouselNavStyles_unstable,
 * before being passed to renderCarouselNav_unstable.
 *
 * @param props - props from this instance of CarouselNav
 * @param ref - reference to root HTMLDivElement of CarouselNav
 */ export const useCarouselNav_unstable = (props, ref)=>{
    const { appearance } = props;
    const focusableGroupAttr = useArrowNavigationGroup({
        circular: false,
        axis: 'horizontal',
        memorizeCurrent: false,
        // eslint-disable-next-line @typescript-eslint/naming-convention
        unstable_hasDefault: true
    });
    var _props_totalSlides;
    const [totalSlides, setTotalSlides] = React.useState((_props_totalSlides = props.totalSlides) !== null && _props_totalSlides !== void 0 ? _props_totalSlides : 0);
    const subscribeForValues = useCarouselContext((ctx)=>ctx.subscribeForValues);
    useIsomorphicLayoutEffect(()=>{
        return subscribeForValues((data)=>{
            setTotalSlides(data.navItemsCount);
        });
    }, [
        subscribeForValues
    ]);
    return {
        totalSlides,
        appearance,
        renderNavButton: props.children,
        components: {
            root: 'div'
        },
        root: slot.always(getIntrinsicElementProps('div', {
            ref,
            role: 'tablist',
            ...props,
            ...focusableGroupAttr,
            children: null
        }), {
            elementType: 'div'
        })
    };
};
