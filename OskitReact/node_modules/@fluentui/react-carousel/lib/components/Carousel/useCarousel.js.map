{"version":3,"sources":["useCarousel.ts"],"sourcesContent":["import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport {\n  getIntrinsicElementProps,\n  slot,\n  useEventCallback,\n  useIsomorphicLayoutEffect,\n  useMergedRefs,\n} from '@fluentui/react-utilities';\nimport * as React from 'react';\n\nimport type { CarouselProps, CarouselState } from './Carousel.types';\nimport type { CarouselContextValue } from '../CarouselContext.types';\nimport { useEmblaCarousel } from '../useEmblaCarousel';\nimport { useAnnounce } from '@fluentui/react-shared-contexts';\n\n/**\n * Create the state required to render Carousel.\n *\n * The returned state can be modified with hooks such as useCarouselStyles_unstable,\n * before being passed to renderCarousel_unstable.\n *\n * @param props - props from this instance of Carousel\n * @param ref - reference to root HTMLDivElement of Carousel\n */\nexport function useCarousel_unstable(props: CarouselProps, ref: React.Ref<HTMLDivElement>): CarouselState {\n  'use no memo';\n\n  const {\n    align = 'center',\n    circular = false,\n    onActiveIndexChange,\n    groupSize = 'auto',\n    draggable = false,\n    whitespace = false,\n    announcement,\n    motion = 'slide',\n  } = props;\n\n  const { dir } = useFluent();\n  const { activeIndex, carouselApi, containerRef, subscribeForValues, enableAutoplay, resetAutoplay } =\n    useEmblaCarousel({\n      align,\n      direction: dir,\n      loop: circular,\n      slidesToScroll: groupSize,\n      defaultActiveIndex: props.defaultActiveIndex,\n      activeIndex: props.activeIndex,\n      watchDrag: draggable,\n      containScroll: whitespace ? false : 'keepSnaps',\n      motion,\n    });\n\n  const selectPageByElement: CarouselContextValue['selectPageByElement'] = useEventCallback((event, element, jump) => {\n    const foundIndex = carouselApi.scrollToElement(element, jump);\n    onActiveIndexChange?.(event, { event, type: 'focus', index: foundIndex });\n\n    return foundIndex;\n  });\n\n  const selectPageByIndex: CarouselContextValue['selectPageByIndex'] = useEventCallback((event, index, jump) => {\n    carouselApi.scrollToIndex(index, jump);\n\n    onActiveIndexChange?.(event, { event, type: 'click', index });\n  });\n\n  const selectPageByDirection: CarouselContextValue['selectPageByDirection'] = useEventCallback((event, direction) => {\n    const nextPageIndex = carouselApi.scrollInDirection(direction);\n    onActiveIndexChange?.(event, { event, type: 'click', index: nextPageIndex });\n\n    return nextPageIndex;\n  });\n\n  const mergedRefs = useMergedRefs(ref, containerRef);\n\n  // Announce carousel updates\n  const announcementTextRef = React.useRef<string>('');\n  const totalNavLength = React.useRef<number>(0);\n  const navGroupRef = React.useRef<number[][]>([]);\n\n  const { announce } = useAnnounce();\n\n  const updateAnnouncement = useEventCallback(() => {\n    if (totalNavLength.current <= 0 || !announcement) {\n      // Ignore announcements until slides discovered\n      return;\n    }\n\n    const announcementText = announcement(activeIndex, totalNavLength.current, navGroupRef.current);\n\n    if (announcementText !== announcementTextRef.current) {\n      announcementTextRef.current = announcementText;\n      announce(announcementText, { polite: true });\n    }\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    // Subscribe to any non-index carousel state changes\n    return subscribeForValues(data => {\n      if (totalNavLength.current <= 0 && data.navItemsCount > 0 && announcement) {\n        const announcementText = announcement(data.activeIndex, data.navItemsCount, data.groupIndexList);\n        // Initialize our string to prevent updateAnnouncement from reading an initial load\n        announcementTextRef.current = announcementText;\n      }\n      totalNavLength.current = data.navItemsCount;\n      navGroupRef.current = data.groupIndexList;\n      updateAnnouncement();\n    });\n  }, [subscribeForValues, updateAnnouncement, announcement]);\n\n  useIsomorphicLayoutEffect(() => {\n    updateAnnouncement();\n  }, [activeIndex, updateAnnouncement]);\n\n  return {\n    components: {\n      root: 'div',\n    },\n    root: slot.always(\n      getIntrinsicElementProps('div', {\n        ref: mergedRefs,\n        role: 'region',\n        ...props,\n      }),\n      { elementType: 'div' },\n    ),\n\n    activeIndex,\n    circular,\n    containerRef: mergedRefs,\n    selectPageByElement,\n    selectPageByDirection,\n    selectPageByIndex,\n    subscribeForValues,\n    enableAutoplay,\n    resetAutoplay,\n  };\n}\n"],"names":["useFluent_unstable","useFluent","getIntrinsicElementProps","slot","useEventCallback","useIsomorphicLayoutEffect","useMergedRefs","React","useEmblaCarousel","useAnnounce","useCarousel_unstable","props","ref","align","circular","onActiveIndexChange","groupSize","draggable","whitespace","announcement","motion","dir","activeIndex","carouselApi","containerRef","subscribeForValues","enableAutoplay","resetAutoplay","direction","loop","slidesToScroll","defaultActiveIndex","watchDrag","containScroll","selectPageByElement","event","element","jump","foundIndex","scrollToElement","type","index","selectPageByIndex","scrollToIndex","selectPageByDirection","nextPageIndex","scrollInDirection","mergedRefs","announcementTextRef","useRef","totalNavLength","navGroupRef","announce","updateAnnouncement","current","announcementText","polite","data","navItemsCount","groupIndexList","components","root","always","role","elementType"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}