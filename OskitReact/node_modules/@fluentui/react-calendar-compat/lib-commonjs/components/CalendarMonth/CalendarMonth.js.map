{"version":3,"sources":["CalendarMonth.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\nimport { mergeClasses } from '@griffel/react';\nimport {\n  addYears,\n  compareDatePart,\n  getMonthEnd,\n  getMonthStart,\n  getYearEnd,\n  getYearStart,\n  setMonth,\n  DEFAULT_DATE_FORMATTING,\n} from '../../utils';\nimport { CalendarYear } from '../CalendarYear/CalendarYear';\nimport { useCalendarMonthStyles_unstable } from './useCalendarMonthStyles.styles';\nimport type { CalendarMonthProps } from './CalendarMonth.types';\nimport type { CalendarYearRange, ICalendarYear } from '../CalendarYear/CalendarYear.types';\n\nconst MONTHS_PER_ROW = 4;\n\nfunction useAnimateBackwards({ navigatedDate }: { navigatedDate: CalendarMonthProps['navigatedDate'] }) {\n  const currentYear = navigatedDate.getFullYear();\n\n  const previousYearRef = React.useRef<number | undefined>();\n  React.useEffect(() => {\n    previousYearRef.current = currentYear;\n  });\n  const previousYear = previousYearRef.current;\n\n  if (previousYear === undefined || previousYear === currentYear) {\n    return undefined;\n  } else {\n    return previousYear > currentYear;\n  }\n}\n\nfunction useFocusLogic({ componentRef }: { componentRef: CalendarMonthProps['componentRef'] }) {\n  const navigatedMonthRef = React.useRef<HTMLButtonElement>(null);\n  const calendarYearRef = React.useRef<ICalendarYear>(null);\n  const focusOnUpdate = React.useRef(false);\n\n  const focus = React.useCallback(() => {\n    if (calendarYearRef.current) {\n      calendarYearRef.current.focus();\n    } else if (navigatedMonthRef.current) {\n      navigatedMonthRef.current.focus();\n    }\n  }, []);\n\n  React.useImperativeHandle(componentRef, () => ({ focus }), [focus]);\n\n  React.useEffect(() => {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  const focusOnNextUpdate = () => {\n    focusOnUpdate.current = true;\n  };\n\n  return [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] as const;\n}\n\n/**\n * @internal\n */\nexport const CalendarMonth: React.FunctionComponent<CalendarMonthProps> = props => {\n  const {\n    allFocusable,\n    animationDirection,\n    className,\n    componentRef,\n    dateTimeFormatter = DEFAULT_DATE_FORMATTING,\n    highlightCurrentMonth,\n    highlightSelectedMonth,\n    maxDate,\n    minDate,\n    navigatedDate,\n    navigationIcons,\n    onHeaderSelect: onUserHeaderSelect,\n    onNavigateDate,\n    selectedDate,\n    strings,\n    today = new Date(),\n    yearPickerHidden = false,\n  } = props;\n\n  const [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] = useFocusLogic({ componentRef });\n  const [isYearPickerVisible, setIsYearPickerVisible] = React.useState(false);\n\n  const animateBackwards = useAnimateBackwards({ navigatedDate });\n\n  const selectMonthCallback = (newMonth: number): (() => void) => {\n    return () => onSelectMonth(newMonth);\n  };\n\n  const onSelectNextYear = (): void => {\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  const onSelectPrevYear = (): void => {\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  const onSelectMonth = (newMonth: number): void => {\n    // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n    onUserHeaderSelect?.();\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  const onHeaderSelect = (): void => {\n    if (!yearPickerHidden) {\n      focusOnNextUpdate();\n      setIsYearPickerVisible(true);\n    } else {\n      onUserHeaderSelect?.();\n    }\n  };\n\n  const onSelectYear = (selectedYear: number) => {\n    focusOnNextUpdate();\n    const navYear = navigatedDate.getFullYear();\n    if (navYear !== selectedYear) {\n      let newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear);\n      // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n      onNavigateDate(newNavigationDate, true);\n    }\n    setIsYearPickerVisible(false);\n  };\n\n  const onYearPickerHeaderSelect = (focus: boolean): void => {\n    focusOnNextUpdate();\n    setIsYearPickerVisible(false);\n  };\n\n  const dateFormatter = dateTimeFormatter!;\n\n  // determine if previous/next years are in bounds\n  const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n  const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n\n  const classNames = useCalendarMonthStyles_unstable({\n    className,\n    hasHeaderClickCallback: !!onUserHeaderSelect || !yearPickerHidden,\n    highlightCurrent: highlightCurrentMonth,\n    highlightSelected: highlightSelectedMonth,\n    animateBackwards,\n    animationDirection,\n  });\n\n  const arrowNavigationAttributes = useArrowNavigationGroup({ axis: 'grid' });\n\n  if (isYearPickerVisible) {\n    const [onRenderYear, yearStrings] = getYearStrings({ dateTimeFormatter, navigatedDate, strings });\n    // use navigated date for the year picker\n    return (\n      <CalendarYear\n        key={'calendarYear'}\n        minYear={minDate ? minDate.getFullYear() : undefined}\n        maxYear={maxDate ? maxDate.getFullYear() : undefined}\n        // eslint-disable-next-line react/jsx-no-bind\n        onSelectYear={onSelectYear}\n        // eslint-disable-next-line react/jsx-no-bind\n        onHeaderSelect={onYearPickerHeaderSelect}\n        selectedYear={\n          selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : undefined\n        }\n        navigatedYear={navigatedDate.getFullYear()}\n        navigationIcons={navigationIcons}\n        onRenderYear={onRenderYear}\n        strings={yearStrings}\n        componentRef={calendarYearRef}\n        highlightCurrentYear={highlightCurrentMonth}\n        highlightSelectedYear={highlightSelectedMonth}\n        animationDirection={animationDirection}\n      />\n    );\n  }\n\n  const rowIndexes = [];\n  for (let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n    rowIndexes.push(i);\n  }\n\n  const yearString = dateFormatter.formatYear(navigatedDate);\n  const headerAriaLabel = strings.monthPickerHeaderAriaLabel\n    ? strings.monthPickerHeaderAriaLabel.replace('{0}', yearString)\n    : yearString;\n\n  return (\n    <div className={classNames.root}>\n      <div className={classNames.headerContainer}>\n        <button\n          className={classNames.currentItemButton}\n          onClick={onHeaderSelect}\n          onKeyDown={onButtonKeyDown(onHeaderSelect)}\n          aria-label={headerAriaLabel}\n          tabIndex={!!onUserHeaderSelect || !yearPickerHidden ? 0 : -1}\n          type=\"button\"\n        >\n          <span aria-live=\"polite\" aria-atomic=\"true\">\n            {yearString}\n          </span>\n        </button>\n        <div className={classNames.navigationButtonsContainer}>\n          <button\n            className={mergeClasses(classNames.navigationButton, !isPrevYearInBounds && classNames.disabled)}\n            aria-disabled={!isPrevYearInBounds}\n            tabIndex={isPrevYearInBounds ? undefined : allFocusable ? 0 : -1}\n            onClick={isPrevYearInBounds ? onSelectPrevYear : undefined}\n            onKeyDown={isPrevYearInBounds ? onButtonKeyDown(onSelectPrevYear) : undefined}\n            title={\n              strings.prevYearAriaLabel\n                ? strings.prevYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, -1))\n                : undefined\n            }\n            type=\"button\"\n          >\n            {navigationIcons.upNavigation}\n          </button>\n          <button\n            className={mergeClasses(classNames.navigationButton, !isNextYearInBounds && classNames.disabled)}\n            aria-disabled={!isNextYearInBounds}\n            tabIndex={isNextYearInBounds ? undefined : allFocusable ? 0 : -1}\n            onClick={isNextYearInBounds ? onSelectNextYear : undefined}\n            onKeyDown={isNextYearInBounds ? onButtonKeyDown(onSelectNextYear) : undefined}\n            title={\n              strings.nextYearAriaLabel\n                ? strings.nextYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, 1))\n                : undefined\n            }\n            type=\"button\"\n          >\n            {navigationIcons.downNavigation}\n          </button>\n        </div>\n      </div>\n      <div {...arrowNavigationAttributes} className={classNames.gridContainer} role=\"grid\" aria-label={yearString}>\n        {rowIndexes.map((rowNum: number) => {\n          const monthsForRow = strings!.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n          return (\n            <div key={'monthRow_' + rowNum + navigatedDate.getFullYear()} role=\"row\" className={classNames.buttonRow}>\n              {monthsForRow.map((month: string, index: number) => {\n                const monthIndex = rowNum * MONTHS_PER_ROW + index;\n                const indexedMonth = setMonth(navigatedDate, monthIndex);\n                const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n                const isSelectedMonth = selectedDate.getMonth() === monthIndex;\n                const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n                const isInBounds =\n                  (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) &&\n                  (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n\n                return (\n                  <button\n                    ref={isNavigatedMonth ? navigatedMonthRef : undefined}\n                    role={'gridcell'}\n                    className={mergeClasses(\n                      classNames.itemButton,\n                      highlightCurrentMonth &&\n                        isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today) &&\n                        classNames.current,\n                      highlightSelectedMonth && isSelectedMonth && isSelectedYear && classNames.selected,\n                      !isInBounds && classNames.disabled,\n                    )}\n                    disabled={!allFocusable && !isInBounds}\n                    key={monthIndex}\n                    onClick={isInBounds ? selectMonthCallback(monthIndex) : undefined}\n                    onKeyDown={isInBounds ? onButtonKeyDown(selectMonthCallback(monthIndex)) : undefined}\n                    aria-label={dateFormatter.formatMonth(indexedMonth, strings!)}\n                    aria-selected={isNavigatedMonth}\n                    tabIndex={isInBounds ? 0 : -1}\n                    type=\"button\"\n                  >\n                    {month}\n                  </button>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\nCalendarMonth.displayName = 'CalendarMonth';\n\nfunction getYearStrings({\n  dateTimeFormatter,\n  navigatedDate,\n  strings,\n}: Pick<CalendarMonthProps, 'dateTimeFormatter' | 'navigatedDate' | 'strings'>) {\n  const yearToString = (year: number) => {\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      const yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n    return String(year);\n  };\n\n  const yearRangeToString = (yearRange: CalendarYearRange) => {\n    return `${yearToString(yearRange.fromYear)} - ${yearToString(yearRange.toYear)}`;\n  };\n\n  const yearRangeToNextDecadeLabel = (yearRange: CalendarYearRange) => {\n    return strings.nextYearRangeAriaLabel ? `${strings.nextYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n  };\n\n  const yearRangeToPrevDecadeLabel = (yearRange: CalendarYearRange) => {\n    return strings.prevYearRangeAriaLabel ? `${strings.prevYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n  };\n\n  return [\n    yearToString,\n    {\n      rangeAriaLabel: yearRangeToString,\n      prevRangeAriaLabel: yearRangeToPrevDecadeLabel,\n      nextRangeAriaLabel: yearRangeToNextDecadeLabel,\n      headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel,\n    } as const,\n  ] as const;\n}\n\nfunction isCurrentMonth(month: number, year: number, today: Date): boolean {\n  return today.getFullYear() === year && today.getMonth() === month;\n}\n\nfunction onButtonKeyDown(callback: () => void): (ev: React.KeyboardEvent<HTMLButtonElement>) => void {\n  return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n    switch (ev.key) {\n      case Enter:\n        callback();\n        break;\n    }\n  };\n}\n"],"names":["CalendarMonth","MONTHS_PER_ROW","useAnimateBackwards","navigatedDate","currentYear","getFullYear","previousYearRef","React","useRef","useEffect","current","previousYear","undefined","useFocusLogic","componentRef","navigatedMonthRef","calendarYearRef","focusOnUpdate","focus","useCallback","useImperativeHandle","focusOnNextUpdate","props","allFocusable","animationDirection","className","dateTimeFormatter","DEFAULT_DATE_FORMATTING","highlightCurrentMonth","highlightSelectedMonth","maxDate","minDate","navigationIcons","onHeaderSelect","onUserHeaderSelect","onNavigateDate","selectedDate","strings","today","Date","yearPickerHidden","isYearPickerVisible","setIsYearPickerVisible","useState","animateBackwards","selectMonthCallback","newMonth","onSelectMonth","onSelectNextYear","addYears","onSelectPrevYear","setMonth","onSelectYear","selectedYear","navYear","newNavigationDate","getTime","setFullYear","getMonth","onYearPickerHeaderSelect","dateFormatter","isPrevYearInBounds","compareDatePart","getYearStart","isNextYearInBounds","getYearEnd","classNames","useCalendarMonthStyles_unstable","hasHeaderClickCallback","highlightCurrent","highlightSelected","arrowNavigationAttributes","useArrowNavigationGroup","axis","onRenderYear","yearStrings","getYearStrings","createElement","CalendarYear","key","minYear","maxYear","navigatedYear","highlightCurrentYear","highlightSelectedYear","rowIndexes","i","shortMonths","length","push","yearString","formatYear","headerAriaLabel","monthPickerHeaderAriaLabel","replace","div","root","headerContainer","button","currentItemButton","onClick","onKeyDown","onButtonKeyDown","aria-label","tabIndex","type","span","aria-live","aria-atomic","navigationButtonsContainer","mergeClasses","navigationButton","disabled","aria-disabled","title","prevYearAriaLabel","upNavigation","nextYearAriaLabel","downNavigation","gridContainer","role","map","rowNum","monthsForRow","slice","buttonRow","month","index","monthIndex","indexedMonth","isNavigatedMonth","isSelectedMonth","isSelectedYear","isInBounds","getMonthEnd","getMonthStart","ref","itemButton","isCurrentMonth","selected","formatMonth","aria-selected","displayName","yearToString","year","yearFormattingDate","String","yearRangeToString","yearRange","fromYear","toYear","yearRangeToNextDecadeLabel","nextYearRangeAriaLabel","yearRangeToPrevDecadeLabel","prevYearRangeAriaLabel","rangeAriaLabel","prevRangeAriaLabel","nextRangeAriaLabel","headerAriaLabelFormatString","yearPickerHeaderAriaLabel","callback","ev","Enter"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}