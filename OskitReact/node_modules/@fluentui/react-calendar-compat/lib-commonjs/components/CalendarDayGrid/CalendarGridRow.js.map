{"version":3,"sources":["CalendarGridRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getWeekNumbersInMonth } from '../../utils';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nimport type { CalendarDayGridProps, CalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { DayInfo } from './CalendarDayGrid';\nimport type { WeekCorners } from './useWeekCornerStyles.styles';\n\n/**\n * @internal\n */\nexport interface CalendarGridRowProps extends CalendarDayGridProps {\n  classNames: CalendarDayGridStyles;\n  weeks: DayInfo[][];\n  week: DayInfo[];\n  weekIndex: number;\n  weekCorners?: WeekCorners;\n  ariaHidden?: boolean;\n  rowClassName?: string;\n  ariaRole?: string;\n  navigatedDayRef: React.MutableRefObject<HTMLTableCellElement>;\n  activeDescendantId: string;\n  calculateRoundedStyles(above: boolean, below: boolean, left: boolean, right: boolean): string;\n  getDayInfosInRangeOfDay(dayToCompare: DayInfo): DayInfo[];\n  getRefsFromDayInfos(dayInfosInRange: DayInfo[]): (HTMLElement | null)[];\n}\n\n/**\n * @internal\n */\nexport const CalendarGridRow: React.FunctionComponent<CalendarGridRowProps> = props => {\n  const {\n    ariaHidden,\n    classNames,\n    week,\n    weeks,\n    weekIndex,\n    rowClassName,\n    ariaRole,\n    showWeekNumbers,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    navigatedDate,\n    strings,\n  } = props;\n  const weekNumbers = showWeekNumbers\n    ? getWeekNumbersInMonth(weeks!.length, firstDayOfWeek, firstWeekOfYear, navigatedDate)\n    : null;\n\n  const titleString = weekNumbers\n    ? strings.weekNumberFormatString && strings.weekNumberFormatString.replace('{0}', `${weekNumbers[weekIndex]}`)\n    : '';\n\n  return (\n    <tr role={ariaRole} aria-hidden={ariaHidden} className={rowClassName} key={weekIndex + '_' + week[0].key}>\n      {showWeekNumbers && weekNumbers && (\n        <th\n          className={classNames.weekNumberCell}\n          key={weekIndex}\n          title={titleString}\n          aria-label={titleString}\n          scope=\"row\"\n        >\n          <span>{weekNumbers[weekIndex]}</span>\n        </th>\n      )}\n      {week.map((day: DayInfo, dayIndex: number) => (\n        <CalendarGridDayCell {...props} key={day.key} day={day} dayIndex={dayIndex} />\n      ))}\n    </tr>\n  );\n};\n"],"names":["CalendarGridRow","props","ariaHidden","classNames","week","weeks","weekIndex","rowClassName","ariaRole","showWeekNumbers","firstDayOfWeek","firstWeekOfYear","navigatedDate","strings","weekNumbers","getWeekNumbersInMonth","length","titleString","weekNumberFormatString","replace","React","createElement","tr","role","aria-hidden","className","key","th","weekNumberCell","title","aria-label","scope","span","map","day","dayIndex","CalendarGridDayCell"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA6BaA;;;eAAAA;;;;iEA7BU;uBACe;qCACF;AA2B7B,MAAMA,kBAAiEC,CAAAA;IAC5E,MAAM,EACJC,UAAU,EACVC,UAAU,EACVC,IAAI,EACJC,KAAK,EACLC,SAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,eAAe,EACfC,cAAc,EACdC,eAAe,EACfC,aAAa,EACbC,OAAO,EACR,GAAGZ;IACJ,MAAMa,cAAcL,kBAChBM,IAAAA,4BAAAA,EAAsBV,MAAOW,MAAM,EAAEN,gBAAgBC,iBAAiBC,iBACtE;IAEJ,MAAMK,cAAcH,cAChBD,QAAQK,sBAAsB,IAAIL,QAAQK,sBAAsB,CAACC,OAAO,CAAC,OAAO,CAAC,EAAEL,WAAW,CAACR,UAAU,CAAC,CAAC,IAC3G;IAEJ,OAAA,WAAA,GACEc,OAAAC,aAAA,CAACC,MAAAA;QAAGC,MAAMf;QAAUgB,eAAatB;QAAYuB,WAAWlB;QAAcmB,KAAKpB,YAAY,MAAMF,IAAI,CAAC,EAAE,CAACsB,GAAG;OACrGjB,mBAAmBK,eAAAA,WAAAA,GAClBM,OAAAC,aAAA,CAACM,MAAAA;QACCF,WAAWtB,WAAWyB,cAAc;QACpCF,KAAKpB;QACLuB,OAAOZ;QACPa,cAAYb;QACZc,OAAM;qBAENX,OAAAC,aAAA,CAACW,QAAAA,MAAMlB,WAAW,CAACR,UAAU,IAGhCF,KAAK6B,GAAG,CAAC,CAACC,KAAcC,WAAAA,WAAAA,GACvBf,OAAAC,aAAA,CAACe,wCAAAA,EAAAA;YAAqB,GAAGnC,KAAK;YAAEyB,KAAKQ,IAAIR,GAAG;YAAEQ,KAAKA;YAAKC,UAAUA;;AAI1E"}