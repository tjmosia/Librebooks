{"version":3,"sources":["CalendarGridDayCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ArrowDown, ArrowLeft, ArrowRight, ArrowUp, Enter } from '@fluentui/keyboard-keys';\nimport { getRTLSafeKey } from '@fluentui/react-utilities';\nimport { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport { mergeClasses } from '@griffel/react';\nimport { addDays, addWeeks, compareDates, findAvailableDate, DateRangeType } from '../../utils';\nimport { weekCornersClassNames } from './useWeekCornerStyles.styles';\nimport { extraCalendarDayGridClassNames } from './useCalendarDayGridStyles.styles';\nimport type { AvailableDateOptions } from '../../utils';\nimport type { DayInfo } from './CalendarDayGrid';\nimport type { CalendarGridRowProps } from './CalendarGridRow';\n\n/**\n * @internal\n */\nexport interface CalendarGridDayCellProps extends CalendarGridRowProps {\n  day: DayInfo;\n  dayIndex: number;\n}\n\n/**\n * @internal\n */\nexport const CalendarGridDayCell: React.FunctionComponent<CalendarGridDayCellProps> = props => {\n  'use no memo';\n\n  const {\n    navigatedDate,\n    dateTimeFormatter,\n    allFocusable,\n    strings,\n    activeDescendantId,\n    navigatedDayRef,\n    calculateRoundedStyles,\n    weeks,\n    classNames,\n    day,\n    dayIndex,\n    weekIndex,\n    weekCorners,\n    ariaHidden,\n    customDayCellRef,\n    dateRangeType,\n    daysToSelectInDayView,\n    onSelectDate,\n    restrictedDates,\n    minDate,\n    maxDate,\n    onNavigateDate,\n    getDayInfosInRangeOfDay,\n    getRefsFromDayInfos,\n  } = props;\n  const cornerStyle = weekCorners?.[weekIndex + '_' + dayIndex] ?? '';\n  const isNavigatedDate = compareDates(navigatedDate, day.originalDate);\n\n  const { dir } = useFluent_unstable();\n\n  const navigateMonthEdge = (ev: React.KeyboardEvent<HTMLElement>, date: Date): void => {\n    let targetDate: Date | undefined = undefined;\n    let direction = 1; // by default search forward\n\n    if (ev.key === ArrowUp) {\n      targetDate = addWeeks(date, -1);\n      direction = -1;\n    } else if (ev.key === ArrowDown) {\n      targetDate = addWeeks(date, 1);\n    } else if (ev.key === getRTLSafeKey(ArrowLeft, dir)) {\n      targetDate = addDays(date, -1);\n      direction = -1;\n    } else if (ev.key === getRTLSafeKey(ArrowRight, dir)) {\n      targetDate = addDays(date, 1);\n    }\n\n    if (!targetDate) {\n      // if we couldn't find a target date at all, do nothing\n      return;\n    }\n\n    const findAvailableDateOptions: AvailableDateOptions = {\n      initialDate: date,\n      targetDate,\n      direction,\n      restrictedDates,\n      minDate,\n      maxDate,\n    };\n\n    // target date is restricted, search in whatever direction until finding the next possible date,\n    // stopping at boundaries\n    let nextDate = findAvailableDate(findAvailableDateOptions);\n\n    if (!nextDate) {\n      // if no dates available in initial direction, try going backwards\n      findAvailableDateOptions.direction = -direction;\n      nextDate = findAvailableDate(findAvailableDateOptions);\n    }\n\n    // if the nextDate is still inside the same focusZone area, let the focusZone handle setting the focus so we\n    // don't jump the view unnecessarily\n    const isInCurrentView =\n      weeks &&\n      nextDate &&\n      weeks.slice(1, weeks.length - 1).some((week: DayInfo[]) => {\n        return week.some((dayToCompare: DayInfo) => {\n          return compareDates(dayToCompare.originalDate, nextDate!);\n        });\n      });\n    if (isInCurrentView) {\n      return;\n    }\n\n    // else, fire navigation on the date to change the view to show it\n    if (nextDate) {\n      onNavigateDate(nextDate, true);\n      ev.preventDefault();\n    }\n  };\n\n  const onMouseOverDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null, index: number) => {\n      if (dayRef) {\n        dayRef.classList.add(extraCalendarDayGridClassNames.hoverStyle);\n        if (\n          !dayInfos[index].isSelected &&\n          dateRangeType === DateRangeType.Day &&\n          daysToSelectInDayView &&\n          daysToSelectInDayView > 1\n        ) {\n          // remove the static classes first to overwrite them\n          dayRef.classList.remove(\n            weekCornersClassNames.bottomLeftCornerDate!,\n            weekCornersClassNames.bottomRightCornerDate!,\n            weekCornersClassNames.topLeftCornerDate!,\n            weekCornersClassNames.topRightCornerDate!,\n          );\n\n          const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();\n          if (classNamesToAdd) {\n            dayRef.classList.add(...classNamesToAdd.trim().split(' '));\n          }\n        }\n      }\n    });\n  };\n\n  const onMouseDownDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null) => {\n      if (dayRef) {\n        dayRef.classList.add(extraCalendarDayGridClassNames.pressedStyle);\n      }\n    });\n  };\n\n  const onMouseUpDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null) => {\n      if (dayRef) {\n        dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);\n      }\n    });\n  };\n\n  const onMouseOutDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null, index: number) => {\n      if (dayRef) {\n        dayRef.classList.remove(extraCalendarDayGridClassNames.hoverStyle);\n        dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);\n        if (\n          !dayInfos[index].isSelected &&\n          dateRangeType === DateRangeType.Day &&\n          daysToSelectInDayView &&\n          daysToSelectInDayView > 1\n        ) {\n          const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();\n          if (classNamesToAdd) {\n            dayRef.classList.remove(...classNamesToAdd.trim().split(' '));\n          }\n        }\n      }\n    });\n  };\n\n  const onDayKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.key === Enter) {\n      onSelectDate?.(day.originalDate);\n    } else {\n      navigateMonthEdge(ev, day.originalDate);\n    }\n  };\n\n  let ariaLabel =\n    day.originalDate.getDate() +\n    ', ' +\n    strings.months[day.originalDate.getMonth()] +\n    ', ' +\n    day.originalDate.getFullYear();\n\n  if (day.isMarked) {\n    ariaLabel = ariaLabel + ', ' + strings.dayMarkedAriaLabel;\n  }\n\n  const isFocusable = !ariaHidden && (allFocusable || (day.isInBounds ? true : undefined));\n\n  return (\n    <td\n      className={mergeClasses(\n        classNames.dayCell,\n        weekCorners && cornerStyle,\n        day.isSelected && !day.isSingleSelected && classNames.daySelected,\n        day.isSingleSelected && classNames.daySingleSelected,\n        !day.isInBounds && classNames.dayOutsideBounds,\n        !day.isInMonth && classNames.dayOutsideNavigatedMonth,\n      )}\n      ref={(element: HTMLTableCellElement) => {\n        customDayCellRef?.(element, day.originalDate, classNames);\n        day.setRef(element);\n        isNavigatedDate && (navigatedDayRef.current = element);\n      }}\n      aria-disabled={!ariaHidden && !day.isInBounds}\n      onClick={day.isInBounds && !ariaHidden ? day.onSelected : undefined}\n      onMouseOver={!ariaHidden ? onMouseOverDay : undefined}\n      onMouseDown={!ariaHidden ? onMouseDownDay : undefined}\n      onMouseUp={!ariaHidden ? onMouseUpDay : undefined}\n      onMouseOut={!ariaHidden ? onMouseOutDay : undefined}\n      onKeyDown={!ariaHidden ? onDayKeyDown : undefined}\n      role=\"gridcell\"\n      tabIndex={isNavigatedDate || isFocusable ? 0 : undefined}\n      aria-current={day.isToday ? 'date' : undefined}\n      aria-selected={day.isInBounds ? day.isSelected : undefined}\n    >\n      <button\n        key={day.key + 'button'}\n        className={mergeClasses(classNames.dayButton, day.isToday && classNames.dayIsToday)}\n        aria-label={ariaLabel}\n        id={isNavigatedDate ? activeDescendantId : undefined}\n        disabled={!ariaHidden && !day.isInBounds}\n        type=\"button\"\n        tabIndex={-1}\n      >\n        <span className={day.isToday ? mergeClasses(classNames.dayTodayMarker) : undefined}>\n          {dateTimeFormatter.formatDay(day.originalDate)}\n        </span>\n        {day.isMarked && <div aria-hidden=\"true\" className={classNames.dayMarker} />}\n      </button>\n    </td>\n  );\n};\n"],"names":["CalendarGridDayCell","props","navigatedDate","dateTimeFormatter","allFocusable","strings","activeDescendantId","navigatedDayRef","calculateRoundedStyles","weeks","classNames","day","dayIndex","weekIndex","weekCorners","ariaHidden","customDayCellRef","dateRangeType","daysToSelectInDayView","onSelectDate","restrictedDates","minDate","maxDate","onNavigateDate","getDayInfosInRangeOfDay","getRefsFromDayInfos","cornerStyle","isNavigatedDate","compareDates","originalDate","dir","useFluent_unstable","navigateMonthEdge","ev","date","targetDate","undefined","direction","key","ArrowUp","addWeeks","ArrowDown","getRTLSafeKey","ArrowLeft","addDays","ArrowRight","findAvailableDateOptions","initialDate","nextDate","findAvailableDate","isInCurrentView","slice","length","some","week","dayToCompare","preventDefault","onMouseOverDay","dayInfos","dayRefs","forEach","dayRef","index","classList","add","extraCalendarDayGridClassNames","hoverStyle","isSelected","DateRangeType","Day","remove","weekCornersClassNames","bottomLeftCornerDate","bottomRightCornerDate","topLeftCornerDate","topRightCornerDate","classNamesToAdd","trim","split","onMouseDownDay","pressedStyle","onMouseUpDay","onMouseOutDay","onDayKeyDown","Enter","ariaLabel","getDate","months","getMonth","getFullYear","isMarked","dayMarkedAriaLabel","isFocusable","isInBounds","React","createElement","td","className","mergeClasses","dayCell","isSingleSelected","daySelected","daySingleSelected","dayOutsideBounds","isInMonth","dayOutsideNavigatedMonth","ref","element","setRef","current","aria-disabled","onClick","onSelected","onMouseOver","onMouseDown","onMouseUp","onMouseOut","onKeyDown","role","tabIndex","aria-current","isToday","aria-selected","button","dayButton","dayIsToday","aria-label","id","disabled","type","span","dayTodayMarker","formatDay","div","aria-hidden","dayMarker"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}