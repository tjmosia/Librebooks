{"version":3,"sources":["CalendarDay.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { mergeClasses } from '@griffel/react';\nimport { addMonths, compareDatePart, getMonthEnd, getMonthStart } from '../../utils';\nimport { CalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid';\nimport { useCalendarDayStyles_unstable } from './useCalendarDayStyles.styles';\nimport type { ICalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid.types';\nimport type { CalendarDayProps, CalendarDayStyles } from './CalendarDay.types';\n\n/**\n * @internal\n */\nexport const CalendarDay: React.FunctionComponent<CalendarDayProps> = props => {\n  const dayGrid = React.useRef<ICalendarDayGrid>(null);\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        dayGrid.current?.focus?.();\n      },\n    }),\n    [],\n  );\n\n  const {\n    strings,\n    gridLabel,\n    navigatedDate,\n    dateTimeFormatter,\n    className,\n    onHeaderSelect,\n    showSixWeeksByDefault,\n    minDate,\n    maxDate,\n    restrictedDates,\n    onNavigateDate,\n    showWeekNumbers,\n    dateRangeType,\n    animationDirection,\n  } = props;\n\n  const classNames = useCalendarDayStyles_unstable({\n    className,\n    headerIsClickable: !!onHeaderSelect,\n    showWeekNumbers,\n    animationDirection,\n  });\n\n  const monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);\n  const HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';\n  const headerAriaLabel = strings.yearPickerHeaderAriaLabel\n    ? strings.yearPickerHeaderAriaLabel.replace('{0}', monthAndYear)\n    : monthAndYear;\n\n  const { ...propsWithoutStyles } = props;\n\n  return (\n    <div className={classNames.root}>\n      <div className={classNames.header}>\n        <HeaderButtonComponentType\n          aria-label={onHeaderSelect ? headerAriaLabel : undefined}\n          className={classNames.monthAndYear}\n          onClick={onHeaderSelect}\n          tabIndex={onHeaderSelect ? 0 : -1} // prevent focus if there's no action for the button\n          onKeyDown={onButtonKeyDown(onHeaderSelect)}\n          type=\"button\"\n        >\n          <span aria-live=\"polite\" aria-atomic=\"true\">\n            {monthAndYear}\n          </span>\n        </HeaderButtonComponentType>\n        <CalendarDayNavigationButtons {...props} classNames={classNames} />\n      </div>\n      <CalendarDayGrid\n        {...propsWithoutStyles}\n        gridLabel={`${monthAndYear}, ${gridLabel}`}\n        componentRef={dayGrid}\n        strings={strings}\n        navigatedDate={navigatedDate!}\n        weeksToShow={showSixWeeksByDefault ? 6 : undefined}\n        dateTimeFormatter={dateTimeFormatter!}\n        minDate={minDate}\n        maxDate={maxDate}\n        restrictedDates={restrictedDates}\n        onNavigateDate={onNavigateDate}\n        dateRangeType={dateRangeType}\n      />\n    </div>\n  );\n};\nCalendarDay.displayName = 'CalendarDay';\n\ninterface CalendarDayNavigationButtonsProps extends CalendarDayProps {\n  classNames: Record<keyof CalendarDayStyles, string>;\n}\n\nconst CalendarDayNavigationButtons = (props: CalendarDayNavigationButtonsProps): JSX.Element => {\n  const {\n    minDate,\n    maxDate,\n    navigatedDate,\n    navigationIcons,\n    allFocusable,\n    strings,\n    showCloseButton,\n    classNames,\n    onNavigateDate,\n    onDismiss,\n  } = props;\n\n  const onSelectNextMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, 1), false);\n  };\n\n  const onSelectPrevMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, -1), false);\n  };\n\n  // determine if previous/next months are in bounds\n  const prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n  const nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true;\n\n  // use aria-disabled instead of disabled so focus is not lost\n  // when a prev/next button becomes disabled after being clicked\n  return (\n    <div className={classNames.monthComponents}>\n      <button\n        className={mergeClasses(classNames.headerIconButton, !prevMonthInBounds && classNames.disabledStyle)}\n        tabIndex={prevMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!prevMonthInBounds}\n        onClick={prevMonthInBounds ? onSelectPrevMonth : undefined}\n        onKeyDown={prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : undefined}\n        title={\n          strings.prevMonthAriaLabel\n            ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        {navigationIcons.upNavigation}\n      </button>\n      <button\n        className={mergeClasses(classNames.headerIconButton, !nextMonthInBounds && classNames.disabledStyle)}\n        tabIndex={nextMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!nextMonthInBounds}\n        onClick={nextMonthInBounds ? onSelectNextMonth : undefined}\n        onKeyDown={nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : undefined}\n        title={\n          strings.nextMonthAriaLabel\n            ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        {navigationIcons.downNavigation}\n      </button>\n      {showCloseButton && (\n        <button\n          className={classNames.headerIconButton}\n          onClick={onDismiss}\n          onKeyDown={onButtonKeyDown(onDismiss)}\n          title={strings.closeButtonAriaLabel}\n          type=\"button\"\n        >\n          {navigationIcons.dismiss}\n        </button>\n      )}\n    </div>\n  );\n};\nCalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';\n\nconst onButtonKeyDown =\n  (callback?: () => void): ((ev: React.KeyboardEvent<HTMLButtonElement | HTMLDivElement>) => void) =>\n  (ev: React.KeyboardEvent<HTMLButtonElement | HTMLDivElement>) => {\n    switch (ev.key) {\n      case Enter:\n        callback?.();\n        break;\n    }\n  };\n"],"names":["CalendarDay","props","dayGrid","React","useRef","useImperativeHandle","componentRef","focus","current","strings","gridLabel","navigatedDate","dateTimeFormatter","className","onHeaderSelect","showSixWeeksByDefault","minDate","maxDate","restrictedDates","onNavigateDate","showWeekNumbers","dateRangeType","animationDirection","classNames","useCalendarDayStyles_unstable","headerIsClickable","monthAndYear","formatMonthYear","HeaderButtonComponentType","headerAriaLabel","yearPickerHeaderAriaLabel","replace","propsWithoutStyles","createElement","div","root","header","aria-label","undefined","onClick","tabIndex","onKeyDown","onButtonKeyDown","type","span","aria-live","aria-atomic","CalendarDayNavigationButtons","CalendarDayGrid","weeksToShow","displayName","navigationIcons","allFocusable","showCloseButton","onDismiss","onSelectNextMonth","addMonths","onSelectPrevMonth","prevMonthInBounds","compareDatePart","getMonthStart","nextMonthInBounds","getMonthEnd","monthComponents","button","mergeClasses","headerIconButton","disabledStyle","aria-disabled","title","prevMonthAriaLabel","months","getMonth","upNavigation","nextMonthAriaLabel","downNavigation","closeButtonAriaLabel","dismiss","callback","ev","key","Enter"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}