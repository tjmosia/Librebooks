{"version":3,"sources":["getDateRangeTypeToUse.ts"],"sourcesContent":["import { DateRangeType, DayOfWeek } from '../constants';\nimport { isContiguous } from './isContiguous';\n/**\n * Return corrected date range type, given `dateRangeType` and list of working days.\n * For non-contiguous working days and working week range type, returns general week range type.\n * For other cases returns input date range type.\n * @param dateRangeType - input type of range\n * @param workWeekDays - list of working days in a week\n */\nexport const getDateRangeTypeToUse = (\n  dateRangeType: DateRangeType,\n  workWeekDays: DayOfWeek[] | undefined,\n  firstDayOfWeek: DayOfWeek,\n): DateRangeType => {\n  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {\n      return DateRangeType.Week;\n    }\n  }\n\n  return dateRangeType;\n};\n"],"names":["getDateRangeTypeToUse","dateRangeType","workWeekDays","firstDayOfWeek","DateRangeType","WorkWeek","isContiguous","length","Week"],"rangeMappings":";;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASaA;;;eAAAA;;;2BAT4B;8BACZ;AAQtB,MAAMA,wBAAwB,CACnCC,eACAC,cACAC;IAEA,IAAID,gBAAgBD,kBAAkBG,wBAAAA,CAAcC,QAAQ,EAAE;QAC5D,IAAI,CAACC,IAAAA,0BAAAA,EAAaJ,cAAc,MAAMC,mBAAmBD,aAAaK,MAAM,KAAK,GAAG;YAClF,OAAOH,wBAAAA,CAAcI,IAAI;QAC3B;IACF;IAEA,OAAOP;AACT"}