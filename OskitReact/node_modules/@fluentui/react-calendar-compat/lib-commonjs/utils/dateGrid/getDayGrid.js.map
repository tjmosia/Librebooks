{"version":3,"sources":["getDayGrid.ts"],"sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../constants';\nimport { Day, DayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: DayGridOptions): Day[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: Day[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: Day[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: Day = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isSingleSelected: selectedDates.length === 1 && compareDates(date, selectedDate),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some((markedDay: Date) => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n"],"names":["getDayGrid","options","selectedDate","dateRangeType","firstDayOfWeek","today","minDate","maxDate","weeksToShow","workWeekDays","daysToSelectInDayView","restrictedDates","markedDays","restrictedDateOptions","todaysDate","Date","navigatedDate","date","getFullYear","getMonth","getDate","weeks","getDay","setDate","addDays","DAYS_IN_WEEK","isAllDaysOfWeekOutOfMonth","selectedDateRangeType","getDateRangeTypeToUse","selectedDates","getDateRangeArray","getBoundedDateRange","shouldGetWeeks","weekIndex","week","dayIndex","originalDate","getTime","dayInfo","key","toString","isInMonth","isToday","compareDates","isSelected","isInDateRangeArray","isSingleSelected","length","isInBounds","isRestrictedDate","isMarked","some","markedDay","push"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAaaA;;;eAAAA;;;0BAbgE;2BAChD;uCAES;qCACF;kCACH;AAQ1B,MAAMA,aAAa,CAACC;IACzB,MAAM,EACJC,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,KAAK,EACLC,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZC,qBAAqB,EACrBC,eAAe,EACfC,UAAU,EACX,GAAGX;IACJ,MAAMY,wBAAwB;QAAEP;QAASC;QAASI;IAAgB;IAElE,MAAMG,aAAaT,SAAS,IAAIU;IAEhC,MAAMC,gBAAgBf,QAAQe,aAAa,GAAGf,QAAQe,aAAa,GAAGF;IAEtE,IAAIG;IACJ,IAAIT,eAAeA,eAAe,GAAG;QACnC,oEAAoE;QACpES,OAAO,IAAIF,KAAKC,cAAcE,WAAW,IAAIF,cAAcG,QAAQ,IAAIH,cAAcI,OAAO;IAC9F,OAAO;QACLH,OAAO,IAAIF,KAAKC,cAAcE,WAAW,IAAIF,cAAcG,QAAQ,IAAI;IACzE;IACA,MAAME,QAAiB,EAAE;IAEzB,gEAAgE;IAChE,MAAOJ,KAAKK,MAAM,OAAOlB,eAAgB;QACvCa,KAAKM,OAAO,CAACN,KAAKG,OAAO,KAAK;IAChC;IAEA,yDAAyD;IACzDH,OAAOO,IAAAA,iBAAAA,EAAQP,MAAM,CAACQ,uBAAAA;IAEtB,wEAAwE;IACxE,IAAIC,4BAA4B;IAEhC,2EAA2E;IAC3E,MAAMC,wBAAwBC,IAAAA,4CAAAA,EAAsBzB,eAAeM,cAAcL;IAEjF,IAAIyB,gBAAwB,EAAE;IAE9B,IAAI3B,cAAc;QAChB2B,gBAAgBC,IAAAA,2BAAAA,EACd5B,cACAyB,uBACAvB,gBACAK,cACAC;QAEFmB,gBAAgBE,IAAAA,wCAAAA,EAAoBF,eAAevB,SAASC;IAC9D;IAEA,IAAIyB,iBAAiB;IAErB,IAAK,IAAIC,YAAY,GAAGD,gBAAgBC,YAAa;QACnD,MAAMC,OAAc,EAAE;QAEtBR,4BAA4B;QAE5B,IAAK,IAAIS,WAAW,GAAGA,WAAWV,uBAAAA,EAAcU,WAAY;YAC1D,MAAMC,eAAe,IAAIrB,KAAKE,KAAKoB,OAAO;YAC1C,MAAMC,UAAe;gBACnBC,KAAKtB,KAAKuB,QAAQ;gBAClBvB,MAAMA,KAAKG,OAAO,GAAGoB,QAAQ;gBAC7BJ;gBACAK,WAAWxB,KAAKE,QAAQ,OAAOH,cAAcG,QAAQ;gBACrDuB,SAASC,IAAAA,sBAAAA,EAAa7B,YAAYG;gBAClC2B,YAAYC,IAAAA,4BAAAA,EAAmB5B,MAAMY;gBACrCiB,kBAAkBjB,cAAckB,MAAM,KAAK,KAAKJ,IAAAA,sBAAAA,EAAa1B,MAAMf;gBACnE8C,YAAY,CAACC,IAAAA,kCAAAA,EAAiBhC,MAAMJ;gBACpCqC,UAAUtC,CAAAA,eAAAA,QAAAA,eAAAA,KAAAA,IAAAA,KAAAA,IAAAA,WAAYuC,IAAI,CAAC,CAACC,YAAoBT,IAAAA,sBAAAA,EAAaP,cAAcgB,WAAAA,KAAe;YAC5F;YAEAlB,KAAKmB,IAAI,CAACf;YAEV,IAAIA,QAAQG,SAAS,EAAE;gBACrBf,4BAA4B;YAC9B;YAEAT,KAAKM,OAAO,CAACN,KAAKG,OAAO,KAAK;QAChC;QAEA,qFAAqF;QACrFY,iBAAiBxB,cAAcyB,YAAYzB,cAAc,IAAI,CAACkB,6BAA6BO,cAAc;QAEzG,0GAA0G;QAC1GZ,MAAMgC,IAAI,CAACnB;IACb;IAEA,OAAOb;AACT"}