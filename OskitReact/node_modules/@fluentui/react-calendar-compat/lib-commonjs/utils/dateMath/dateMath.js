"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addDays: function() {
        return addDays;
    },
    addMonths: function() {
        return addMonths;
    },
    addWeeks: function() {
        return addWeeks;
    },
    addYears: function() {
        return addYears;
    },
    compareDatePart: function() {
        return compareDatePart;
    },
    compareDates: function() {
        return compareDates;
    },
    getDatePartHashValue: function() {
        return getDatePartHashValue;
    },
    getDateRangeArray: function() {
        return getDateRangeArray;
    },
    getEndDateOfWeek: function() {
        return getEndDateOfWeek;
    },
    getMonthEnd: function() {
        return getMonthEnd;
    },
    getMonthStart: function() {
        return getMonthStart;
    },
    getStartDateOfWeek: function() {
        return getStartDateOfWeek;
    },
    getWeekNumber: function() {
        return getWeekNumber;
    },
    getWeekNumbersInMonth: function() {
        return getWeekNumbersInMonth;
    },
    getYearEnd: function() {
        return getYearEnd;
    },
    getYearStart: function() {
        return getYearStart;
    },
    isInDateRangeArray: function() {
        return isInDateRangeArray;
    },
    setMonth: function() {
        return setMonth;
    }
});
const _constants = require("../constants");
function addDays(date, days) {
    const result = new Date(date.getTime());
    result.setDate(result.getDate() + days);
    return result;
}
function addWeeks(date, weeks) {
    return addDays(date, weeks * _constants.TimeConstants.DaysInOneWeek);
}
function addMonths(date, months) {
    let result = new Date(date.getTime());
    const newMonth = result.getMonth() + months;
    result.setMonth(newMonth);
    // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.
    // Loop until we back up to a day the new month has.
    // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)
    if (result.getMonth() !== (newMonth % _constants.TimeConstants.MonthInOneYear + _constants.TimeConstants.MonthInOneYear) % _constants.TimeConstants.MonthInOneYear) {
        result = addDays(result, -result.getDate());
    }
    return result;
}
function addYears(date, years) {
    let result = new Date(date.getTime());
    result.setFullYear(date.getFullYear() + years);
    // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.
    // Loop until we back up to a day the new month has.
    // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)
    if (result.getMonth() !== (date.getMonth() % _constants.TimeConstants.MonthInOneYear + _constants.TimeConstants.MonthInOneYear) % _constants.TimeConstants.MonthInOneYear) {
        result = addDays(result, -result.getDate());
    }
    return result;
}
function getMonthStart(date) {
    return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);
}
function getMonthEnd(date) {
    return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);
}
function getYearStart(date) {
    return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);
}
function getYearEnd(date) {
    return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);
}
function setMonth(date, month) {
    return addMonths(date, month - date.getMonth());
}
function compareDates(date1, date2) {
    if (!date1 && !date2) {
        return true;
    } else if (!date1 || !date2) {
        return false;
    } else {
        return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
    }
}
function compareDatePart(date1, date2) {
    return getDatePartHashValue(date1) - getDatePartHashValue(date2);
}
function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView = 1) {
    const datesArray = [];
    let startDate;
    let endDate = null;
    if (!workWeekDays) {
        workWeekDays = [
            _constants.DayOfWeek.Monday,
            _constants.DayOfWeek.Tuesday,
            _constants.DayOfWeek.Wednesday,
            _constants.DayOfWeek.Thursday,
            _constants.DayOfWeek.Friday
        ];
    }
    daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);
    switch(dateRangeType){
        case _constants.DateRangeType.Day:
            startDate = getDatePart(date);
            endDate = addDays(startDate, daysToSelectInDayView);
            break;
        case _constants.DateRangeType.Week:
        case _constants.DateRangeType.WorkWeek:
            startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);
            endDate = addDays(startDate, _constants.TimeConstants.DaysInOneWeek);
            break;
        case _constants.DateRangeType.Month:
            startDate = new Date(date.getFullYear(), date.getMonth(), 1);
            endDate = addMonths(startDate, 1);
            break;
        default:
            throw new Error('Unexpected object: ' + dateRangeType);
    }
    // Populate the dates array with the dates in range
    let nextDate = startDate;
    do {
        if (dateRangeType !== _constants.DateRangeType.WorkWeek) {
            // push all days not in work week view
            datesArray.push(nextDate);
        } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {
            datesArray.push(nextDate);
        }
        nextDate = addDays(nextDate, 1);
    }while (!compareDates(nextDate, endDate))
    return datesArray;
}
function isInDateRangeArray(date, dateRange) {
    for (const dateInRange of dateRange){
        if (compareDates(date, dateInRange)) {
            return true;
        }
    }
    return false;
}
function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {
    const selectedYear = navigatedDate.getFullYear();
    const selectedMonth = navigatedDate.getMonth();
    let dayOfMonth = 1;
    const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);
    const endOfFirstWeek = dayOfMonth + (firstDayOfWeek + _constants.TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());
    let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);
    dayOfMonth = endOfWeekRange.getDate();
    const weeksArray = [];
    for(let i = 0; i < weeksInMonth; i++){
        // Get week number for end of week
        weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));
        dayOfMonth += _constants.TimeConstants.DaysInOneWeek;
        endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);
    }
    return weeksArray;
}
function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {
    // First four-day week of the year - minumum days count
    const fourDayWeek = 4;
    switch(firstWeekOfYear){
        case _constants.FirstWeekOfYear.FirstFullWeek:
            return getWeekOfYearFullDays(date, firstDayOfWeek, _constants.TimeConstants.DaysInOneWeek);
        case _constants.FirstWeekOfYear.FirstFourDayWeek:
            return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);
        default:
            return getFirstDayWeekOfYear(date, firstDayOfWeek);
    }
}
function getStartDateOfWeek(date, firstDayOfWeek) {
    let daysOffset = firstDayOfWeek - date.getDay();
    if (daysOffset > 0) {
        // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.
        daysOffset -= _constants.TimeConstants.DaysInOneWeek;
    }
    return addDays(date, daysOffset);
}
function getEndDateOfWeek(date, firstDayOfWeek) {
    const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : _constants.TimeConstants.DaysInOneWeek - 1;
    let daysOffset = lastDayOfWeek - date.getDay();
    if (daysOffset < 0) {
        // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.
        daysOffset += _constants.TimeConstants.DaysInOneWeek;
    }
    return addDays(date, daysOffset);
}
/**
 * Gets a new date with the time portion zeroed out, i.e., set to midnight
 * @param date - The origin date
 * @returns A new date with the time set to midnight
 */ function getDatePart(date) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}
function getDatePartHashValue(date) {
    // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.
    // eslint-disable-next-line no-bitwise
    return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);
}
/**
 * Helper function for `getWeekNumber`.
 * Returns week number for a date.
 * @param date - current selected date.
 * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)
 * @param numberOfFullDays - week settings.
 * @returns The week's number in the year.
 */ function getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {
    const dayOfYear = getDayOfYear(date) - 1;
    let num = date.getDay() - dayOfYear % _constants.TimeConstants.DaysInOneWeek;
    const lastDayOfPrevYear = new Date(date.getFullYear() - 1, _constants.MonthOfYear.December, 31);
    const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;
    let num2 = (firstDayOfWeek - num + 2 * _constants.TimeConstants.DaysInOneWeek) % _constants.TimeConstants.DaysInOneWeek;
    if (num2 !== 0 && num2 >= numberOfFullDays) {
        num2 -= _constants.TimeConstants.DaysInOneWeek;
    }
    let num3 = dayOfYear - num2;
    if (num3 < 0) {
        num -= daysInYear % _constants.TimeConstants.DaysInOneWeek;
        num2 = (firstDayOfWeek - num + 2 * _constants.TimeConstants.DaysInOneWeek) % _constants.TimeConstants.DaysInOneWeek;
        if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {
            num2 -= _constants.TimeConstants.DaysInOneWeek;
        }
        num3 = daysInYear - num2;
    }
    return Math.floor(num3 / _constants.TimeConstants.DaysInOneWeek + 1);
}
/**
 * Helper function for `getWeekNumber`.
 * Returns week number for a date.
 * @param date - current selected date.
 * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)
 * @returns The week's number in the year.
 */ function getFirstDayWeekOfYear(date, firstDayOfWeek) {
    const num = getDayOfYear(date) - 1;
    const num2 = date.getDay() - num % _constants.TimeConstants.DaysInOneWeek;
    const num3 = (num2 - firstDayOfWeek + 2 * _constants.TimeConstants.DaysInOneWeek) % _constants.TimeConstants.DaysInOneWeek;
    return Math.floor((num + num3) / _constants.TimeConstants.DaysInOneWeek + 1);
}
/**
 * Helper function for `getWeekNumber`.
 * Returns adjusted week day number when `firstDayOfWeek` is other than Sunday.
 * For Week Day Number comparison checks
 * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)
 * @param dateWeekDay - shifts number forward to 1 week in case passed as true
 * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),
 * Sunday becomes 7.
 */ function adjustWeekDay(firstDayOfWeek, dateWeekDay) {
    return firstDayOfWeek !== _constants.DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + _constants.TimeConstants.DaysInOneWeek : dateWeekDay;
}
/**
 * Returns the day number for a date in a year:
 * the number of days since January 1st in the particular year.
 * @param date - A date to find the day number for.
 * @returns The day's number in the year.
 */ function getDayOfYear(date) {
    const month = date.getMonth();
    const year = date.getFullYear();
    let daysUntilDate = 0;
    for(let i = 0; i < month; i++){
        daysUntilDate += daysInMonth(i + 1, year);
    }
    daysUntilDate += date.getDate();
    return daysUntilDate;
}
/**
 * Returns the number of days in the month
 * @param month - The month number to target (months 1-12).
 * @param year - The year to target.
 * @returns The number of days in the month.
 */ function daysInMonth(month, year) {
    return new Date(year, month, 0).getDate();
}
