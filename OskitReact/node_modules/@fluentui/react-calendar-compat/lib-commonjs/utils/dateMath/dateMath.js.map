{"version":3,"sources":["dateMath.ts"],"sourcesContent":["import { DateRangeType, DayOfWeek, FirstWeekOfYear, MonthOfYear, TimeConstants } from '../constants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return (\n      date1.getFullYear() === date2.getFullYear() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getDate() === date2.getDate()\n    );\n  }\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray: Date[] = [];\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  // eslint-disable-next-line no-bitwise\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns adjusted week day number when `firstDayOfWeek` is other than Sunday.\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year:\n * the number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"],"names":["addDays","addMonths","addWeeks","addYears","compareDatePart","compareDates","getDatePartHashValue","getDateRangeArray","getEndDateOfWeek","getMonthEnd","getMonthStart","getStartDateOfWeek","getWeekNumber","getWeekNumbersInMonth","getYearEnd","getYearStart","isInDateRangeArray","setMonth","date","days","result","Date","getTime","setDate","getDate","weeks","TimeConstants","DaysInOneWeek","months","newMonth","getMonth","MonthInOneYear","years","setFullYear","getFullYear","month","date1","date2","dateRangeType","firstDayOfWeek","workWeekDays","daysToSelectInDayView","datesArray","startDate","endDate","DayOfWeek","Monday","Tuesday","Wednesday","Thursday","Friday","Math","max","DateRangeType","Day","getDatePart","Week","WorkWeek","Month","Error","nextDate","push","indexOf","getDay","dateRange","dateInRange","weeksInMonth","firstWeekOfYear","navigatedDate","selectedYear","selectedMonth","dayOfMonth","fistDayOfMonth","endOfFirstWeek","adjustWeekDay","endOfWeekRange","weeksArray","i","fourDayWeek","FirstWeekOfYear","FirstFullWeek","getWeekOfYearFullDays","FirstFourDayWeek","getFirstDayWeekOfYear","daysOffset","lastDayOfWeek","numberOfFullDays","dayOfYear","getDayOfYear","num","lastDayOfPrevYear","MonthOfYear","December","daysInYear","num2","num3","floor","dateWeekDay","Sunday","year","daysUntilDate","daysInMonth"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}