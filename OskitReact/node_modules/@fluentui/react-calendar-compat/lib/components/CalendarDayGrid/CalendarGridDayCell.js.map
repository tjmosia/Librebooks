{"version":3,"sources":["CalendarGridDayCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ArrowDown, ArrowLeft, ArrowRight, ArrowUp, Enter } from '@fluentui/keyboard-keys';\nimport { getRTLSafeKey } from '@fluentui/react-utilities';\nimport { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport { mergeClasses } from '@griffel/react';\nimport { addDays, addWeeks, compareDates, findAvailableDate, DateRangeType } from '../../utils';\nimport { weekCornersClassNames } from './useWeekCornerStyles.styles';\nimport { extraCalendarDayGridClassNames } from './useCalendarDayGridStyles.styles';\nimport type { AvailableDateOptions } from '../../utils';\nimport type { DayInfo } from './CalendarDayGrid';\nimport type { CalendarGridRowProps } from './CalendarGridRow';\n\n/**\n * @internal\n */\nexport interface CalendarGridDayCellProps extends CalendarGridRowProps {\n  day: DayInfo;\n  dayIndex: number;\n}\n\n/**\n * @internal\n */\nexport const CalendarGridDayCell: React.FunctionComponent<CalendarGridDayCellProps> = props => {\n  'use no memo';\n\n  const {\n    navigatedDate,\n    dateTimeFormatter,\n    allFocusable,\n    strings,\n    activeDescendantId,\n    navigatedDayRef,\n    calculateRoundedStyles,\n    weeks,\n    classNames,\n    day,\n    dayIndex,\n    weekIndex,\n    weekCorners,\n    ariaHidden,\n    customDayCellRef,\n    dateRangeType,\n    daysToSelectInDayView,\n    onSelectDate,\n    restrictedDates,\n    minDate,\n    maxDate,\n    onNavigateDate,\n    getDayInfosInRangeOfDay,\n    getRefsFromDayInfos,\n  } = props;\n  const cornerStyle = weekCorners?.[weekIndex + '_' + dayIndex] ?? '';\n  const isNavigatedDate = compareDates(navigatedDate, day.originalDate);\n\n  const { dir } = useFluent_unstable();\n\n  const navigateMonthEdge = (ev: React.KeyboardEvent<HTMLElement>, date: Date): void => {\n    let targetDate: Date | undefined = undefined;\n    let direction = 1; // by default search forward\n\n    if (ev.key === ArrowUp) {\n      targetDate = addWeeks(date, -1);\n      direction = -1;\n    } else if (ev.key === ArrowDown) {\n      targetDate = addWeeks(date, 1);\n    } else if (ev.key === getRTLSafeKey(ArrowLeft, dir)) {\n      targetDate = addDays(date, -1);\n      direction = -1;\n    } else if (ev.key === getRTLSafeKey(ArrowRight, dir)) {\n      targetDate = addDays(date, 1);\n    }\n\n    if (!targetDate) {\n      // if we couldn't find a target date at all, do nothing\n      return;\n    }\n\n    const findAvailableDateOptions: AvailableDateOptions = {\n      initialDate: date,\n      targetDate,\n      direction,\n      restrictedDates,\n      minDate,\n      maxDate,\n    };\n\n    // target date is restricted, search in whatever direction until finding the next possible date,\n    // stopping at boundaries\n    let nextDate = findAvailableDate(findAvailableDateOptions);\n\n    if (!nextDate) {\n      // if no dates available in initial direction, try going backwards\n      findAvailableDateOptions.direction = -direction;\n      nextDate = findAvailableDate(findAvailableDateOptions);\n    }\n\n    // if the nextDate is still inside the same focusZone area, let the focusZone handle setting the focus so we\n    // don't jump the view unnecessarily\n    const isInCurrentView =\n      weeks &&\n      nextDate &&\n      weeks.slice(1, weeks.length - 1).some((week: DayInfo[]) => {\n        return week.some((dayToCompare: DayInfo) => {\n          return compareDates(dayToCompare.originalDate, nextDate!);\n        });\n      });\n    if (isInCurrentView) {\n      return;\n    }\n\n    // else, fire navigation on the date to change the view to show it\n    if (nextDate) {\n      onNavigateDate(nextDate, true);\n      ev.preventDefault();\n    }\n  };\n\n  const onMouseOverDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null, index: number) => {\n      if (dayRef) {\n        dayRef.classList.add(extraCalendarDayGridClassNames.hoverStyle);\n        if (\n          !dayInfos[index].isSelected &&\n          dateRangeType === DateRangeType.Day &&\n          daysToSelectInDayView &&\n          daysToSelectInDayView > 1\n        ) {\n          // remove the static classes first to overwrite them\n          dayRef.classList.remove(\n            weekCornersClassNames.bottomLeftCornerDate!,\n            weekCornersClassNames.bottomRightCornerDate!,\n            weekCornersClassNames.topLeftCornerDate!,\n            weekCornersClassNames.topRightCornerDate!,\n          );\n\n          const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();\n          if (classNamesToAdd) {\n            dayRef.classList.add(...classNamesToAdd.trim().split(' '));\n          }\n        }\n      }\n    });\n  };\n\n  const onMouseDownDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null) => {\n      if (dayRef) {\n        dayRef.classList.add(extraCalendarDayGridClassNames.pressedStyle);\n      }\n    });\n  };\n\n  const onMouseUpDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null) => {\n      if (dayRef) {\n        dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);\n      }\n    });\n  };\n\n  const onMouseOutDay = (ev: React.MouseEvent<HTMLElement>) => {\n    const dayInfos = getDayInfosInRangeOfDay(day);\n    const dayRefs = getRefsFromDayInfos(dayInfos);\n\n    dayRefs.forEach((dayRef: HTMLElement | null, index: number) => {\n      if (dayRef) {\n        dayRef.classList.remove(extraCalendarDayGridClassNames.hoverStyle);\n        dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);\n        if (\n          !dayInfos[index].isSelected &&\n          dateRangeType === DateRangeType.Day &&\n          daysToSelectInDayView &&\n          daysToSelectInDayView > 1\n        ) {\n          const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();\n          if (classNamesToAdd) {\n            dayRef.classList.remove(...classNamesToAdd.trim().split(' '));\n          }\n        }\n      }\n    });\n  };\n\n  const onDayKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.key === Enter) {\n      onSelectDate?.(day.originalDate);\n    } else {\n      navigateMonthEdge(ev, day.originalDate);\n    }\n  };\n\n  let ariaLabel =\n    day.originalDate.getDate() +\n    ', ' +\n    strings.months[day.originalDate.getMonth()] +\n    ', ' +\n    day.originalDate.getFullYear();\n\n  if (day.isMarked) {\n    ariaLabel = ariaLabel + ', ' + strings.dayMarkedAriaLabel;\n  }\n\n  const isFocusable = !ariaHidden && (allFocusable || (day.isInBounds ? true : undefined));\n\n  return (\n    <td\n      className={mergeClasses(\n        classNames.dayCell,\n        weekCorners && cornerStyle,\n        day.isSelected && !day.isSingleSelected && classNames.daySelected,\n        day.isSingleSelected && classNames.daySingleSelected,\n        !day.isInBounds && classNames.dayOutsideBounds,\n        !day.isInMonth && classNames.dayOutsideNavigatedMonth,\n      )}\n      ref={(element: HTMLTableCellElement) => {\n        customDayCellRef?.(element, day.originalDate, classNames);\n        day.setRef(element);\n        isNavigatedDate && (navigatedDayRef.current = element);\n      }}\n      aria-disabled={!ariaHidden && !day.isInBounds}\n      onClick={day.isInBounds && !ariaHidden ? day.onSelected : undefined}\n      onMouseOver={!ariaHidden ? onMouseOverDay : undefined}\n      onMouseDown={!ariaHidden ? onMouseDownDay : undefined}\n      onMouseUp={!ariaHidden ? onMouseUpDay : undefined}\n      onMouseOut={!ariaHidden ? onMouseOutDay : undefined}\n      onKeyDown={!ariaHidden ? onDayKeyDown : undefined}\n      role=\"gridcell\"\n      tabIndex={isNavigatedDate || isFocusable ? 0 : undefined}\n      aria-current={day.isToday ? 'date' : undefined}\n      aria-selected={day.isInBounds ? day.isSelected : undefined}\n    >\n      <button\n        key={day.key + 'button'}\n        className={mergeClasses(classNames.dayButton, day.isToday && classNames.dayIsToday)}\n        aria-label={ariaLabel}\n        id={isNavigatedDate ? activeDescendantId : undefined}\n        disabled={!ariaHidden && !day.isInBounds}\n        type=\"button\"\n        tabIndex={-1}\n      >\n        <span className={day.isToday ? mergeClasses(classNames.dayTodayMarker) : undefined}>\n          {dateTimeFormatter.formatDay(day.originalDate)}\n        </span>\n        {day.isMarked && <div aria-hidden=\"true\" className={classNames.dayMarker} />}\n      </button>\n    </td>\n  );\n};\n"],"names":["React","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","Enter","getRTLSafeKey","useFluent_unstable","mergeClasses","addDays","addWeeks","compareDates","findAvailableDate","DateRangeType","weekCornersClassNames","extraCalendarDayGridClassNames","CalendarGridDayCell","props","navigatedDate","dateTimeFormatter","allFocusable","strings","activeDescendantId","navigatedDayRef","calculateRoundedStyles","weeks","classNames","day","dayIndex","weekIndex","weekCorners","ariaHidden","customDayCellRef","dateRangeType","daysToSelectInDayView","onSelectDate","restrictedDates","minDate","maxDate","onNavigateDate","getDayInfosInRangeOfDay","getRefsFromDayInfos","cornerStyle","isNavigatedDate","originalDate","dir","navigateMonthEdge","ev","date","targetDate","undefined","direction","key","findAvailableDateOptions","initialDate","nextDate","isInCurrentView","slice","length","some","week","dayToCompare","preventDefault","onMouseOverDay","dayInfos","dayRefs","forEach","dayRef","index","classList","add","hoverStyle","isSelected","Day","remove","bottomLeftCornerDate","bottomRightCornerDate","topLeftCornerDate","topRightCornerDate","classNamesToAdd","trim","split","onMouseDownDay","pressedStyle","onMouseUpDay","onMouseOutDay","onDayKeyDown","ariaLabel","getDate","months","getMonth","getFullYear","isMarked","dayMarkedAriaLabel","isFocusable","isInBounds","td","className","dayCell","isSingleSelected","daySelected","daySingleSelected","dayOutsideBounds","isInMonth","dayOutsideNavigatedMonth","ref","element","setRef","current","aria-disabled","onClick","onSelected","onMouseOver","onMouseDown","onMouseUp","onMouseOut","onKeyDown","role","tabIndex","aria-current","isToday","aria-selected","button","dayButton","dayIsToday","aria-label","id","disabled","type","span","dayTodayMarker","formatDay","div","aria-hidden","dayMarker"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}