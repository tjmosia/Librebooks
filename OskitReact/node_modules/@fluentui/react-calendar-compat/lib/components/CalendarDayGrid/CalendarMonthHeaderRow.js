import * as React from 'react';
import { mergeClasses } from '@griffel/react';
import { DAYS_IN_WEEK } from '../../utils';
/**
 * @internal
 */ export const CalendarMonthHeaderRow = (props)=>{
    const { showWeekNumbers, strings, firstDayOfWeek, allFocusable, weeksToShow, weeks, classNames } = props;
    const dayLabels = strings.shortDays.slice();
    let firstOfMonthIndex = -1;
    const firstWeekOfMonth = weeks[1];
    for(let i = 0; i < weeks[1].length; i++){
        if (firstWeekOfMonth[i].originalDate.getDate() === 1) {
            firstOfMonthIndex = i;
            break;
        }
    }
    if (weeksToShow === 1 && firstOfMonthIndex >= 0) {
        // if we only show one week, replace the header with short month name
        const firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;
        dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks[1][firstOfMonthIndex].originalDate.getMonth()];
    }
    return /*#__PURE__*/ React.createElement("tr", null, showWeekNumbers && /*#__PURE__*/ React.createElement("th", {
        className: classNames.dayCell
    }), dayLabels.map((val, index)=>{
        const i = (index + firstDayOfWeek) % DAYS_IN_WEEK;
        const label = strings.days[i];
        return /*#__PURE__*/ React.createElement("th", {
            className: mergeClasses(classNames.dayCell, classNames.weekDayLabelCell),
            scope: "col",
            key: dayLabels[i] + ' ' + index,
            title: label,
            "aria-label": label,
            tabIndex: allFocusable ? 0 : undefined
        }, dayLabels[i]);
    }));
};
