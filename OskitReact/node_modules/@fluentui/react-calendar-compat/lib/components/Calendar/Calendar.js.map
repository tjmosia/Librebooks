{"version":3,"sources":["Calendar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Backspace, Enter, Escape, PageDown, PageUp, Space } from '@fluentui/keyboard-keys';\nimport { useControllableState } from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport {\n  addMonths,\n  addYears,\n  DateRangeType,\n  DayOfWeek,\n  DEFAULT_CALENDAR_STRINGS,\n  DEFAULT_DATE_FORMATTING,\n  FirstWeekOfYear,\n  focusAsync,\n} from '../../utils';\nimport { CalendarDay } from '../CalendarDay/CalendarDay';\nimport { CalendarMonth } from '../CalendarMonth/CalendarMonth';\nimport { defaultNavigationIcons } from './calendarNavigationIcons';\nimport { useCalendarStyles_unstable } from './useCalendarStyles.styles';\nimport type { ICalendarDay } from '../CalendarDay/CalendarDay.types';\nimport type { ICalendarMonth } from '../CalendarMonth/CalendarMonth.types';\nimport type { CalendarProps } from './Calendar.types';\n\nconst MIN_SIZE_FORCE_OVERLAY = 440;\n\nconst defaultWorkWeekDays: DayOfWeek[] = [\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n];\n\nfunction useDateState(props: CalendarProps) {\n  const { value, today: todayProp, onSelectDate } = props;\n\n  const today = React.useMemo(() => todayProp ?? new Date(), [todayProp]);\n\n  /** The currently selected date in the calendar */\n  const [selectedDate, setSelectedDate] = useControllableState({\n    state: value,\n    defaultState: value ? undefined : today,\n    initialState: today,\n  });\n\n  /** The currently focused date in the day picker, but not necessarily selected */\n  const [navigatedDay = today, setNavigatedDay] = React.useState(value);\n\n  /** The currently focused date in the month picker, but not necessarily selected */\n  const [navigatedMonth = today, setNavigatedMonth] = React.useState(value);\n\n  /** If using a controlled value, when that value changes, navigate to that date */\n  const [lastSelectedDate = today, setLastSelectedDate] = React.useState(value);\n  if (value && lastSelectedDate.valueOf() !== value.valueOf()) {\n    setNavigatedDay(value);\n    setNavigatedMonth(value);\n    setLastSelectedDate(value);\n  }\n\n  const navigateMonth = (date: Date) => {\n    setNavigatedMonth(date);\n  };\n\n  const navigateDay = (date: Date) => {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n  };\n\n  const onDateSelected = (date: Date, selectedDateRangeArray?: Date[]) => {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n    setSelectedDate(date);\n    onSelectDate?.(date, selectedDateRangeArray);\n  };\n\n  return [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth] as const;\n}\n\nfunction useVisibilityState({\n  isDayPickerVisible: isDayPickerVisibleProp,\n  isMonthPickerVisible: isMonthPickerVisibleProp,\n  showMonthPickerAsOverlay,\n}: CalendarProps) {\n  /** State used to show/hide month picker */\n  const showMonthPickerAsOverlayState = useShowMonthPickerAsOverlay({\n    isDayPickerVisible: isDayPickerVisibleProp,\n    showMonthPickerAsOverlay,\n  });\n\n  const [isMonthPickerVisible, setIsMonthPickerVisible] = React.useState(() =>\n    showMonthPickerAsOverlayState ? false : isMonthPickerVisibleProp ?? false,\n  );\n  /** State used to show/hide day picker */\n  const [isDayPickerVisible, setIsDayPickerVisible] = React.useState(() =>\n    showMonthPickerAsOverlayState ? true : isDayPickerVisibleProp ?? true,\n  );\n\n  const toggleDayMonthPickerVisibility = () => {\n    setIsMonthPickerVisible(!isMonthPickerVisible);\n    setIsDayPickerVisible(!isDayPickerVisible);\n  };\n\n  return [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility] as const;\n}\n\nfunction useFocusLogic({ componentRef }: CalendarProps, isDayPickerVisible: boolean, isMonthPickerVisible: boolean) {\n  const dayPicker = React.useRef<ICalendarDay>(null);\n  const monthPicker = React.useRef<ICalendarMonth>(null);\n  const focusOnUpdate = React.useRef(false);\n  const { targetDocument } = useFluent();\n  const win = targetDocument?.defaultView;\n\n  const focus = React.useCallback(() => {\n    if (isDayPickerVisible && dayPicker.current) {\n      focusAsync(dayPicker.current, win);\n    } else if (isMonthPickerVisible && monthPicker.current) {\n      focusAsync(monthPicker.current, win);\n    }\n  }, [isDayPickerVisible, isMonthPickerVisible, win]);\n\n  React.useImperativeHandle(componentRef, () => ({ focus }), [focus]);\n\n  React.useEffect(() => {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  const focusOnNextUpdate = () => {\n    focusOnUpdate.current = true;\n  };\n\n  return [dayPicker, monthPicker, focusOnNextUpdate] as const;\n}\n\n/**\n * @internal\n */\nexport const Calendar: React.FunctionComponent<CalendarProps> = React.forwardRef<HTMLDivElement, CalendarProps>(\n  (props, forwardedRef) => {\n    const {\n      allFocusable = false,\n      calendarDayProps,\n      calendarMonthProps,\n      className,\n      componentRef,\n      dateRangeType = DateRangeType.Day,\n      dateTimeFormatter = DEFAULT_DATE_FORMATTING,\n      firstDayOfWeek = DayOfWeek.Sunday,\n      firstWeekOfYear = FirstWeekOfYear.FirstDay,\n      highlightCurrentMonth = false,\n      highlightSelectedMonth = false,\n      id,\n      isDayPickerVisible: isDayPickerVisibleProp = true,\n      isMonthPickerVisible: isMonthPickerVisibleProp = true,\n      maxDate,\n      minDate,\n      onDismiss,\n      onSelectDate,\n      restrictedDates,\n      showCloseButton = false,\n      showGoToToday = true,\n      showMonthPickerAsOverlay: showMonthPickerAsOverlayProp = false,\n      showSixWeeksByDefault = false,\n      showWeekNumbers = false,\n      strings = DEFAULT_CALENDAR_STRINGS,\n      today: todayProp,\n      value,\n      workWeekDays = defaultWorkWeekDays,\n    } = props;\n\n    const today = React.useMemo(() => {\n      return todayProp ?? new Date();\n    }, [todayProp]);\n\n    const [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth] = useDateState({\n      onSelectDate,\n      value,\n      today,\n    });\n    const [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility] = useVisibilityState({\n      isDayPickerVisible: isDayPickerVisibleProp,\n      isMonthPickerVisible: isMonthPickerVisibleProp,\n      showMonthPickerAsOverlay: showMonthPickerAsOverlayProp,\n    });\n    const [dayPicker, monthPicker, focusOnNextUpdate] = useFocusLogic(\n      { componentRef },\n      isDayPickerVisible,\n      isMonthPickerVisible,\n    );\n\n    const renderGoToTodayButton = () => {\n      let goTodayEnabled = showGoToToday;\n\n      if (goTodayEnabled && today) {\n        goTodayEnabled =\n          navigatedDay.getFullYear() !== today.getFullYear() ||\n          navigatedDay.getMonth() !== today.getMonth() ||\n          navigatedMonth.getFullYear() !== today.getFullYear() ||\n          navigatedMonth.getMonth() !== today.getMonth();\n      }\n\n      return (\n        showGoToToday && (\n          <button\n            className={classes.goTodayButton}\n            onClick={onGotoToday}\n            onKeyDown={onButtonKeyDown(onGotoToday)}\n            type=\"button\"\n            disabled={!goTodayEnabled}\n          >\n            {strings!.goToToday}\n          </button>\n        )\n      );\n    };\n\n    const onNavigateDayDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n      navigateDay(date);\n      if (focusOnNavigatedDay) {\n        focusOnNextUpdate();\n      }\n    };\n\n    const onNavigateMonthDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n      if (focusOnNavigatedDay) {\n        focusOnNextUpdate();\n      }\n\n      if (!focusOnNavigatedDay) {\n        navigateMonth(date);\n        return;\n      }\n\n      if (monthPickerOnly) {\n        onDateSelected(date);\n      }\n\n      navigateDay(date);\n    };\n\n    const showMonthPickerAsOverlay = useShowMonthPickerAsOverlay({\n      isDayPickerVisible: isDayPickerVisibleProp,\n      showMonthPickerAsOverlay: showMonthPickerAsOverlayProp,\n    });\n\n    const onHeaderSelect = showMonthPickerAsOverlay\n      ? (): void => {\n          toggleDayMonthPickerVisibility();\n\n          focusOnNextUpdate();\n        }\n      : undefined;\n\n    const onGotoToday = (): void => {\n      navigateDay(today!);\n      if (showMonthPickerAsOverlay && isMonthPickerVisible) {\n        toggleDayMonthPickerVisibility();\n      }\n      focusOnNextUpdate();\n    };\n\n    const onButtonKeyDown = (callback: () => void): ((ev: React.KeyboardEvent<HTMLButtonElement>) => void) => {\n      return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n        switch (ev.key) {\n          case Enter:\n          case Space:\n            callback();\n            break;\n        }\n      };\n    };\n\n    const onDatePickerPopupKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n      switch (ev.key) {\n        case Enter:\n          ev.preventDefault();\n          break;\n\n        case Backspace:\n          ev.preventDefault();\n          break;\n\n        case Escape:\n          ev.stopPropagation();\n          onDismiss?.();\n          break;\n\n        case PageUp:\n          if (ev.ctrlKey) {\n            // go to next year\n            navigateDay(addYears(navigatedDay, 1));\n          } else {\n            // go to next month\n            navigateDay(addMonths(navigatedDay, 1));\n          }\n          ev.preventDefault();\n          break;\n        case PageDown:\n          if (ev.ctrlKey) {\n            // go to previous year\n            navigateDay(addYears(navigatedDay, -1));\n          } else {\n            // go to previous month\n            navigateDay(addMonths(navigatedDay, -1));\n          }\n          ev.preventDefault();\n          break;\n        default:\n          break;\n      }\n    };\n\n    const monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n\n    const classes = useCalendarStyles_unstable({\n      className,\n      isDayPickerVisible,\n      isMonthPickerVisible,\n      showWeekNumbers,\n    });\n\n    let todayDateString: string = '';\n    let selectedDateString: string = '';\n    if (dateTimeFormatter && strings!.todayDateFormatString) {\n      todayDateString = strings!.todayDateFormatString.replace(\n        '{0}',\n        dateTimeFormatter.formatMonthDayYear(today, strings!),\n      );\n    }\n    if (dateTimeFormatter && strings!.selectedDateFormatString) {\n      const dateStringFormatter = monthPickerOnly\n        ? dateTimeFormatter.formatMonthYear\n        : dateTimeFormatter.formatMonthDayYear;\n      selectedDateString = strings!.selectedDateFormatString.replace(\n        '{0}',\n        dateStringFormatter(selectedDate, strings!),\n      );\n    }\n    const selectionAndTodayString = selectedDateString + ', ' + todayDateString;\n\n    return (\n      <div id={id} ref={forwardedRef} className={classes.root} onKeyDown={onDatePickerPopupKeyDown}>\n        <div className={classes.liveRegion} aria-live=\"polite\" aria-atomic=\"true\">\n          <span>{selectedDateString}</span>\n        </div>\n        {isDayPickerVisible && (\n          <CalendarDay\n            gridLabel={selectionAndTodayString}\n            selectedDate={selectedDate!}\n            navigatedDate={navigatedDay!}\n            today={today}\n            onSelectDate={onDateSelected}\n            // eslint-disable-next-line react/jsx-no-bind\n            onNavigateDate={onNavigateDayDate}\n            onDismiss={onDismiss}\n            firstDayOfWeek={firstDayOfWeek!}\n            dateRangeType={dateRangeType!}\n            strings={strings!}\n            // eslint-disable-next-line react/jsx-no-bind\n            onHeaderSelect={onHeaderSelect}\n            showWeekNumbers={showWeekNumbers}\n            firstWeekOfYear={firstWeekOfYear!}\n            dateTimeFormatter={dateTimeFormatter!}\n            showSixWeeksByDefault={showSixWeeksByDefault}\n            minDate={minDate}\n            maxDate={maxDate}\n            navigationIcons={defaultNavigationIcons}\n            restrictedDates={restrictedDates}\n            workWeekDays={workWeekDays}\n            componentRef={dayPicker}\n            showCloseButton={showCloseButton}\n            allFocusable={allFocusable}\n            {...calendarDayProps} // at end of list so consumer's custom functions take precedence\n          />\n        )}\n        {isDayPickerVisible && isMonthPickerVisible && <div className={classes.divider} />}\n        {isMonthPickerVisible ? (\n          <div className={classes.monthPickerWrapper}>\n            <CalendarMonth\n              navigatedDate={navigatedMonth}\n              selectedDate={navigatedDay}\n              strings={strings!}\n              // eslint-disable-next-line react/jsx-no-bind\n              onNavigateDate={onNavigateMonthDate}\n              today={today}\n              highlightCurrentMonth={highlightCurrentMonth!}\n              highlightSelectedMonth={highlightSelectedMonth!}\n              // eslint-disable-next-line react/jsx-no-bind\n              onHeaderSelect={onHeaderSelect}\n              dateTimeFormatter={dateTimeFormatter!}\n              minDate={minDate}\n              maxDate={maxDate}\n              componentRef={monthPicker}\n              navigationIcons={defaultNavigationIcons}\n              {...calendarMonthProps} // at end of list so consumer's custom functions take precedence\n            />\n            {renderGoToTodayButton()}\n          </div>\n        ) : (\n          renderGoToTodayButton()\n        )}\n      </div>\n    );\n  },\n);\nCalendar.displayName = 'Calendar';\n\nconst useShowMonthPickerAsOverlay = ({ isDayPickerVisible, showMonthPickerAsOverlay }: CalendarProps) => {\n  const { targetDocument } = useFluent();\n  const win = targetDocument?.defaultView;\n  return showMonthPickerAsOverlay || (isDayPickerVisible && win && win.innerWidth <= MIN_SIZE_FORCE_OVERLAY);\n};\n"],"names":["React","Backspace","Enter","Escape","PageDown","PageUp","Space","useControllableState","useFluent_unstable","useFluent","addMonths","addYears","DateRangeType","DayOfWeek","DEFAULT_CALENDAR_STRINGS","DEFAULT_DATE_FORMATTING","FirstWeekOfYear","focusAsync","CalendarDay","CalendarMonth","defaultNavigationIcons","useCalendarStyles_unstable","MIN_SIZE_FORCE_OVERLAY","defaultWorkWeekDays","Monday","Tuesday","Wednesday","Thursday","Friday","useDateState","props","value","today","todayProp","onSelectDate","useMemo","Date","selectedDate","setSelectedDate","state","defaultState","undefined","initialState","navigatedDay","setNavigatedDay","useState","navigatedMonth","setNavigatedMonth","lastSelectedDate","setLastSelectedDate","valueOf","navigateMonth","date","navigateDay","onDateSelected","selectedDateRangeArray","useVisibilityState","isDayPickerVisible","isDayPickerVisibleProp","isMonthPickerVisible","isMonthPickerVisibleProp","showMonthPickerAsOverlay","showMonthPickerAsOverlayState","useShowMonthPickerAsOverlay","setIsMonthPickerVisible","setIsDayPickerVisible","toggleDayMonthPickerVisibility","useFocusLogic","componentRef","dayPicker","useRef","monthPicker","focusOnUpdate","targetDocument","win","defaultView","focus","useCallback","current","useImperativeHandle","useEffect","focusOnNextUpdate","Calendar","forwardRef","forwardedRef","allFocusable","calendarDayProps","calendarMonthProps","className","dateRangeType","Day","dateTimeFormatter","firstDayOfWeek","Sunday","firstWeekOfYear","FirstDay","highlightCurrentMonth","highlightSelectedMonth","id","maxDate","minDate","onDismiss","restrictedDates","showCloseButton","showGoToToday","showMonthPickerAsOverlayProp","showSixWeeksByDefault","showWeekNumbers","strings","workWeekDays","renderGoToTodayButton","goTodayEnabled","getFullYear","getMonth","button","classes","goTodayButton","onClick","onGotoToday","onKeyDown","onButtonKeyDown","type","disabled","goToToday","onNavigateDayDate","focusOnNavigatedDay","onNavigateMonthDate","monthPickerOnly","onHeaderSelect","callback","ev","key","onDatePickerPopupKeyDown","preventDefault","stopPropagation","ctrlKey","todayDateString","selectedDateString","todayDateFormatString","replace","formatMonthDayYear","selectedDateFormatString","dateStringFormatter","formatMonthYear","selectionAndTodayString","div","ref","root","liveRegion","aria-live","aria-atomic","span","gridLabel","navigatedDate","onNavigateDate","navigationIcons","divider","monthPickerWrapper","displayName","innerWidth"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}