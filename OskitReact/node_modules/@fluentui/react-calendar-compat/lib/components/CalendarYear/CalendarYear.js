import * as React from 'react';
import { Enter, Space } from '@fluentui/keyboard-keys';
import { useArrowNavigationGroup } from '@fluentui/react-tabster';
import { mergeClasses } from '@griffel/react';
import { useCalendarYearStyles_unstable } from './useCalendarYearStyles.styles';
const CELL_COUNT = 12;
const CELLS_PER_ROW = 4;
const DefaultCalendarYearStrings = {
    prevRangeAriaLabel: undefined,
    nextRangeAriaLabel: undefined
};
const CalendarYearGridCell = (props)=>{
    const { className, highlightCurrentYear, highlightSelectedYear, year, selected, disabled, componentRef, onSelectYear, onRenderYear } = props;
    const buttonRef = React.useRef(null);
    React.useImperativeHandle(componentRef, ()=>({
            focus () {
                var _buttonRef_current_focus, _buttonRef_current;
                (_buttonRef_current = buttonRef.current) === null || _buttonRef_current === void 0 ? void 0 : (_buttonRef_current_focus = _buttonRef_current.focus) === null || _buttonRef_current_focus === void 0 ? void 0 : _buttonRef_current_focus.call(_buttonRef_current);
            }
        }), []);
    const onClick = ()=>{
        onSelectYear === null || onSelectYear === void 0 ? void 0 : onSelectYear(year);
    };
    const onKeyDown = (ev)=>{
        if (ev.key === Enter) {
            onSelectYear === null || onSelectYear === void 0 ? void 0 : onSelectYear(year);
        }
    };
    const classNames = useCalendarYearStyles_unstable({
        className,
        highlightCurrent: highlightCurrentYear,
        highlightSelected: highlightSelectedYear
    });
    var _onRenderYear;
    return /*#__PURE__*/ React.createElement("button", {
        className: mergeClasses(classNames.itemButton, selected && classNames.selected, disabled && classNames.disabled),
        type: "button",
        role: "gridcell",
        onClick: !disabled ? onClick : undefined,
        onKeyDown: !disabled ? onKeyDown : undefined,
        disabled: disabled,
        "aria-selected": selected,
        ref: buttonRef
    }, (_onRenderYear = onRenderYear === null || onRenderYear === void 0 ? void 0 : onRenderYear(year)) !== null && _onRenderYear !== void 0 ? _onRenderYear : year);
};
CalendarYearGridCell.displayName = 'CalendarYearGridCell';
const CalendarYearGrid = (props)=>{
    const { className, fromYear, toYear, animationDirection, animateBackwards, minYear, maxYear, onSelectYear, selectedYear, componentRef } = props;
    const selectedCellRef = React.useRef(null);
    const currentCellRef = React.useRef(null);
    React.useImperativeHandle(componentRef, ()=>({
            focus () {
                var _focus, _this;
                (_this = selectedCellRef.current || currentCellRef.current) === null || _this === void 0 ? void 0 : (_focus = _this.focus) === null || _focus === void 0 ? void 0 : _focus.call(_this);
            }
        }), []);
    const renderCell = (yearToRender)=>{
        const selected = yearToRender === selectedYear;
        const disabled = minYear !== undefined && yearToRender < minYear || maxYear !== undefined && yearToRender > maxYear;
        const current = yearToRender === new Date().getFullYear();
        return /*#__PURE__*/ React.createElement(CalendarYearGridCell, {
            ...props,
            key: yearToRender,
            year: yearToRender,
            selected: selected,
            current: current,
            disabled: disabled,
            onSelectYear: onSelectYear,
            componentRef: selected ? selectedCellRef : current ? currentCellRef : undefined
        });
    };
    const classNames = useCalendarYearStyles_unstable({
        className,
        animateBackwards,
        animationDirection
    });
    const onRenderYear = (value)=>{
        var _props_onRenderYear;
        var _props_onRenderYear1;
        return (_props_onRenderYear1 = (_props_onRenderYear = props.onRenderYear) === null || _props_onRenderYear === void 0 ? void 0 : _props_onRenderYear.call(props, value)) !== null && _props_onRenderYear1 !== void 0 ? _props_onRenderYear1 : value;
    };
    const gridAriaLabel = `${onRenderYear(fromYear)} - ${onRenderYear(toYear)}`;
    let year = fromYear;
    const cells = [];
    for(let i = 0; i < (toYear - fromYear + 1) / CELLS_PER_ROW; i++){
        cells.push([]);
        for(let j = 0; j < CELLS_PER_ROW; j++){
            cells[i].push(renderCell(year));
            year++;
        }
    }
    const arrowNavigationAttributes = useArrowNavigationGroup({
        axis: 'grid'
    });
    return /*#__PURE__*/ React.createElement("div", {
        ...arrowNavigationAttributes,
        className: classNames.gridContainer,
        role: "grid",
        "aria-label": gridAriaLabel
    }, cells.map((cellRow, index)=>{
        return /*#__PURE__*/ React.createElement("div", {
            key: 'yearPickerRow_' + index + '_' + fromYear,
            role: "row",
            className: classNames.buttonRow
        }, cellRow);
    }));
};
CalendarYearGrid.displayName = 'CalendarYearGrid';
const CalendarYearNavDirection = {
    Previous: 0,
    Next: 1
};
const CalendarYearNavArrow = (props)=>{
    const { className, strings = DefaultCalendarYearStrings, direction, onSelectPrev, onSelectNext, fromYear, toYear, maxYear, minYear, navigationIcons } = props;
    const classNames = useCalendarYearStyles_unstable({
        className
    });
    const ariaLabel = direction === CalendarYearNavDirection.Previous ? strings.prevRangeAriaLabel : strings.nextRangeAriaLabel;
    const newRangeOffset = direction === CalendarYearNavDirection.Previous ? -CELL_COUNT : CELL_COUNT;
    const newRange = {
        fromYear: fromYear + newRangeOffset,
        toYear: toYear + newRangeOffset
    };
    const ariaLabelString = ariaLabel ? typeof ariaLabel === 'string' ? ariaLabel : ariaLabel(newRange) : undefined;
    const disabled = direction === CalendarYearNavDirection.Previous ? minYear !== undefined && fromYear < minYear : maxYear !== undefined && props.fromYear + CELL_COUNT > maxYear;
    const onNavigate = ()=>{
        direction === CalendarYearNavDirection.Previous ? onSelectPrev === null || onSelectPrev === void 0 ? void 0 : onSelectPrev() : onSelectNext === null || onSelectNext === void 0 ? void 0 : onSelectNext();
    };
    const onKeyDown = (ev)=>{
        if (ev.key === Enter) {
            onNavigate();
        }
    };
    return /*#__PURE__*/ React.createElement("button", {
        className: mergeClasses(classNames.navigationButton, disabled && classNames.disabled),
        onClick: !disabled ? onNavigate : undefined,
        onKeyDown: !disabled ? onKeyDown : undefined,
        type: "button",
        title: ariaLabelString,
        disabled: disabled
    }, direction === CalendarYearNavDirection.Previous ? navigationIcons.upNavigation : navigationIcons.downNavigation);
};
CalendarYearNavArrow.displayName = 'CalendarYearNavArrow';
const CalendarYearNav = (props)=>{
    const { className } = props;
    const classNames = useCalendarYearStyles_unstable({
        className
    });
    return /*#__PURE__*/ React.createElement("div", {
        className: classNames.navigationButtonsContainer
    }, /*#__PURE__*/ React.createElement(CalendarYearNavArrow, {
        ...props,
        direction: CalendarYearNavDirection.Previous
    }), /*#__PURE__*/ React.createElement(CalendarYearNavArrow, {
        ...props,
        direction: CalendarYearNavDirection.Next
    }));
};
CalendarYearNav.displayName = 'CalendarYearNav';
const CalendarYearTitle = (props)=>{
    const { className, fromYear, toYear, strings = DefaultCalendarYearStrings, animateBackwards, animationDirection } = props;
    const onHeaderSelect = ()=>{
        var _props_onHeaderSelect;
        (_props_onHeaderSelect = props.onHeaderSelect) === null || _props_onHeaderSelect === void 0 ? void 0 : _props_onHeaderSelect.call(props, true);
    };
    const onHeaderKeyDown = (ev)=>{
        if (ev.key === Enter || ev.key === Space) {
            onHeaderSelect();
        }
    };
    const onRenderYear = (year)=>{
        var _props_onRenderYear;
        var _props_onRenderYear1;
        return (_props_onRenderYear1 = (_props_onRenderYear = props.onRenderYear) === null || _props_onRenderYear === void 0 ? void 0 : _props_onRenderYear.call(props, year)) !== null && _props_onRenderYear1 !== void 0 ? _props_onRenderYear1 : year;
    };
    const classNames = useCalendarYearStyles_unstable({
        className,
        hasHeaderClickCallback: !!props.onHeaderSelect,
        animateBackwards,
        animationDirection
    });
    if (props.onHeaderSelect) {
        const rangeAriaLabel = strings.rangeAriaLabel;
        const headerAriaLabelFormatString = strings.headerAriaLabelFormatString;
        const currentDateRange = rangeAriaLabel ? typeof rangeAriaLabel === 'string' ? rangeAriaLabel : rangeAriaLabel(props) : undefined;
        const ariaLabel = headerAriaLabelFormatString ? headerAriaLabelFormatString.replace('{0}', currentDateRange !== null && currentDateRange !== void 0 ? currentDateRange : '') : currentDateRange;
        return /*#__PURE__*/ React.createElement("button", {
            className: classNames.currentItemButton,
            onClick: onHeaderSelect,
            onKeyDown: onHeaderKeyDown,
            "aria-label": ariaLabel,
            role: "button",
            type: "button"
        }, /*#__PURE__*/ React.createElement("span", {
            "aria-live": "assertive",
            "aria-atomic": "true"
        }, onRenderYear(fromYear), " - ", onRenderYear(toYear)));
    }
    return /*#__PURE__*/ React.createElement("div", {
        className: classNames.current
    }, onRenderYear(fromYear), " - ", onRenderYear(toYear));
};
CalendarYearTitle.displayName = 'CalendarYearTitle';
const CalendarYearHeader = (props)=>{
    const { className, animateBackwards, animationDirection, onRenderTitle } = props;
    const classNames = useCalendarYearStyles_unstable({
        className,
        hasHeaderClickCallback: !!props.onHeaderSelect,
        animateBackwards,
        animationDirection
    });
    var _onRenderTitle;
    return /*#__PURE__*/ React.createElement("div", {
        className: classNames.headerContainer
    }, (_onRenderTitle = onRenderTitle === null || onRenderTitle === void 0 ? void 0 : onRenderTitle(props)) !== null && _onRenderTitle !== void 0 ? _onRenderTitle : /*#__PURE__*/ React.createElement(CalendarYearTitle, props), /*#__PURE__*/ React.createElement(CalendarYearNav, props));
};
CalendarYearHeader.displayName = 'CalendarYearHeader';
function useAnimateBackwards({ selectedYear, navigatedYear }) {
    const rangeYear = selectedYear || navigatedYear || new Date().getFullYear();
    const fromYear = Math.floor(rangeYear / 10) * 10;
    const previousFromYearRef = React.useRef(fromYear);
    React.useRef(()=>{
        previousFromYearRef.current = fromYear;
    });
    const previousFromYear = previousFromYearRef.current;
    if (!previousFromYear || previousFromYear === fromYear) {
        return undefined;
    } else if (previousFromYear > fromYear) {
        return true;
    } else {
        return false;
    }
}
function useYearRangeState({ selectedYear, navigatedYear }) {
    const rangeYear = React.useMemo(()=>{
        return selectedYear || navigatedYear || Math.floor(new Date().getFullYear() / 10) * 10;
    }, [
        navigatedYear,
        selectedYear
    ]);
    const [fromYear, setFromYear] = React.useState(rangeYear);
    const onNavNext = ()=>{
        setFromYear((year)=>year + CELL_COUNT);
    };
    const onNavPrevious = ()=>{
        setFromYear((year)=>year - CELL_COUNT);
    };
    React.useEffect(()=>{
        setFromYear(rangeYear);
    }, [
        rangeYear
    ]);
    const toYear = fromYear + CELL_COUNT - 1;
    return [
        fromYear,
        toYear,
        onNavNext,
        onNavPrevious
    ];
}
/**
 * @internal
 */ export const CalendarYear = (props)=>{
    const animateBackwards = useAnimateBackwards(props);
    const [fromYear, toYear, onNavNext, onNavPrevious] = useYearRangeState(props);
    const gridRef = React.useRef(null);
    React.useImperativeHandle(props.componentRef, ()=>({
            focus () {
                var _gridRef_current_focus, _gridRef_current;
                (_gridRef_current = gridRef.current) === null || _gridRef_current === void 0 ? void 0 : (_gridRef_current_focus = _gridRef_current.focus) === null || _gridRef_current_focus === void 0 ? void 0 : _gridRef_current_focus.call(_gridRef_current);
            }
        }));
    const { className } = props;
    const classNames = useCalendarYearStyles_unstable({
        className
    });
    return /*#__PURE__*/ React.createElement("div", {
        className: classNames.root
    }, /*#__PURE__*/ React.createElement(CalendarYearHeader, {
        ...props,
        fromYear: fromYear,
        toYear: toYear,
        onSelectPrev: onNavPrevious,
        onSelectNext: onNavNext,
        animateBackwards: animateBackwards
    }), /*#__PURE__*/ React.createElement(CalendarYearGrid, {
        ...props,
        fromYear: fromYear,
        toYear: toYear,
        animateBackwards: animateBackwards,
        componentRef: gridRef
    }));
};
CalendarYear.displayName = 'CalendarYear';
