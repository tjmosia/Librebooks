{"version":3,"sources":["dateMath.ts"],"sourcesContent":["import { DateRangeType, DayOfWeek, FirstWeekOfYear, MonthOfYear, TimeConstants } from '../constants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return (\n      date1.getFullYear() === date2.getFullYear() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getDate() === date2.getDate()\n    );\n  }\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray: Date[] = [];\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  // eslint-disable-next-line no-bitwise\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for `getWeekNumber`.\n * Returns adjusted week day number when `firstDayOfWeek` is other than Sunday.\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year:\n * the number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"],"names":["DateRangeType","DayOfWeek","FirstWeekOfYear","MonthOfYear","TimeConstants","addDays","date","days","result","Date","getTime","setDate","getDate","addWeeks","weeks","DaysInOneWeek","addMonths","months","newMonth","getMonth","setMonth","MonthInOneYear","addYears","years","setFullYear","getFullYear","getMonthStart","getMonthEnd","getYearStart","getYearEnd","month","compareDates","date1","date2","compareDatePart","getDatePartHashValue","getDateRangeArray","dateRangeType","firstDayOfWeek","workWeekDays","daysToSelectInDayView","datesArray","startDate","endDate","Monday","Tuesday","Wednesday","Thursday","Friday","Math","max","Day","getDatePart","Week","WorkWeek","getStartDateOfWeek","Month","Error","nextDate","push","indexOf","getDay","isInDateRangeArray","dateRange","dateInRange","getWeekNumbersInMonth","weeksInMonth","firstWeekOfYear","navigatedDate","selectedYear","selectedMonth","dayOfMonth","fistDayOfMonth","endOfFirstWeek","adjustWeekDay","endOfWeekRange","weeksArray","i","getWeekNumber","fourDayWeek","FirstFullWeek","getWeekOfYearFullDays","FirstFourDayWeek","getFirstDayWeekOfYear","daysOffset","getEndDateOfWeek","lastDayOfWeek","numberOfFullDays","dayOfYear","getDayOfYear","num","lastDayOfPrevYear","December","daysInYear","num2","num3","floor","dateWeekDay","Sunday","year","daysUntilDate","daysInMonth"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}