{"version":3,"sources":["getDateRangeTypeToUse.ts"],"sourcesContent":["import { DateRangeType, DayOfWeek } from '../constants';\nimport { isContiguous } from './isContiguous';\n/**\n * Return corrected date range type, given `dateRangeType` and list of working days.\n * For non-contiguous working days and working week range type, returns general week range type.\n * For other cases returns input date range type.\n * @param dateRangeType - input type of range\n * @param workWeekDays - list of working days in a week\n */\nexport const getDateRangeTypeToUse = (\n  dateRangeType: DateRangeType,\n  workWeekDays: DayOfWeek[] | undefined,\n  firstDayOfWeek: DayOfWeek,\n): DateRangeType => {\n  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {\n      return DateRangeType.Week;\n    }\n  }\n\n  return dateRangeType;\n};\n"],"names":["DateRangeType","isContiguous","getDateRangeTypeToUse","dateRangeType","workWeekDays","firstDayOfWeek","WorkWeek","length","Week"],"rangeMappings":";;;;;;;;;;;;;;;","mappings":"AAAA,SAASA,aAAa,QAAmB,eAAe;AACxD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C;;;;;;CAMC,GACD,OAAO,MAAMC,wBAAwB,CACnCC,eACAC,cACAC;IAEA,IAAID,gBAAgBD,kBAAkBH,cAAcM,QAAQ,EAAE;QAC5D,IAAI,CAACL,aAAaG,cAAc,MAAMC,mBAAmBD,aAAaG,MAAM,KAAK,GAAG;YAClF,OAAOP,cAAcQ,IAAI;QAC3B;IACF;IAEA,OAAOL;AACT,EAAE"}