{"version":3,"sources":["useTreeItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  getIntrinsicElementProps,\n  useId,\n  useEventCallback,\n  slot,\n  elementContains,\n  useMergedRefs,\n} from '@fluentui/react-utilities';\nimport type { TreeItemProps, TreeItemState, TreeItemValue } from './TreeItem.types';\nimport { Space } from '@fluentui/keyboard-keys';\nimport { treeDataTypes } from '../../utils/tokens';\nimport {\n  useTreeContext_unstable,\n  useSubtreeContext_unstable,\n  useTreeItemContext_unstable,\n  TreeContext,\n} from '../../contexts';\nimport { dataTreeItemValueAttrName } from '../../utils/getTreeItemValueFromElement';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\nimport { treeClassNames } from '../../Tree';\n\n/**\n * Create the state required to render TreeItem.\n *\n * The returned state can be modified with hooks such as useTreeItemStyles_unstable,\n * before being passed to renderTreeItem_unstable.\n *\n * @param props - props from this instance of TreeItem\n * @param ref - reference to root HTMLElement of TreeItem\n */\nexport function useTreeItem_unstable(props: TreeItemProps, ref: React.Ref<HTMLDivElement>): TreeItemState {\n  'use no memo';\n\n  const treeType = useTreeContext_unstable(ctx => ctx.treeType);\n  if (treeType === 'flat') {\n    warnIfNoProperPropsFlatTreeItem(props);\n  }\n  const requestTreeResponse = useTreeContext_unstable(ctx => ctx.requestTreeResponse);\n  const forceUpdateRovingTabIndex = useTreeContext_unstable(ctx => ctx.forceUpdateRovingTabIndex);\n  const { level: contextLevel } = useSubtreeContext_unstable();\n  const parentValue = useTreeItemContext_unstable(ctx => props.parentValue ?? ctx.value);\n\n  // note, if the value is not externally provided,\n  // then selection and expansion will not work properly\n  const internalValue = useId('fuiTreeItemValue-');\n  const value: TreeItemValue = props.value ?? internalValue;\n\n  const {\n    onClick,\n    onKeyDown,\n    onChange,\n    as = 'div',\n    itemType = 'leaf',\n    'aria-level': level = contextLevel,\n    'aria-selected': ariaSelected,\n    'aria-expanded': ariaExpanded,\n    ...rest\n  } = props;\n\n  const actionsRef = React.useRef<HTMLDivElement>(null);\n  const expandIconRef = React.useRef<HTMLDivElement>(null);\n  const layoutRef = React.useRef<HTMLDivElement>(null);\n  const subtreeRef = React.useRef<HTMLDivElement>(null);\n  const selectionRef = React.useRef<HTMLInputElement>(null);\n  const treeItemRef = React.useRef<HTMLDivElement>(null);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is acceptable since the NODE_ENV will not change during runtime\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const hasTreeContext = useHasParentContext(TreeContext);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (hasTreeContext) {\n        return;\n      }\n\n      if (treeItemRef.current?.querySelector(`.${treeClassNames.root}`)) {\n        // eslint-disable-next-line no-console\n        console.error(/** #__DE-INDENT__ */ `\n          @fluentui/react-tree [useTreeItem]:\n          <TreeItem> should be declared inside a <Tree> component.\n        `);\n      }\n    }, [hasTreeContext]);\n  }\n\n  React.useEffect(() => {\n    const treeItem = treeItemRef.current;\n    return () => {\n      // When the tree item is unmounted, we need to update the roving tab index\n      // if the tree item is the current tab indexed item\n      if (treeItem && treeItem.tabIndex === 0) {\n        forceUpdateRovingTabIndex?.();\n      }\n    };\n  }, [forceUpdateRovingTabIndex]);\n\n  const open = useTreeContext_unstable(ctx => props.open ?? ctx.openItems.has(value));\n  const getNextOpen = () => (itemType === 'branch' ? !open : open);\n  const selectionMode = useTreeContext_unstable(ctx => ctx.selectionMode);\n  const checked = useTreeContext_unstable(ctx => ctx.checkedItems.get(value) ?? false);\n\n  const handleClick = useEventCallback((event: React.MouseEvent<HTMLDivElement>) => {\n    const isEventFromActions = () => actionsRef.current && elementContains(actionsRef.current, event.target as Node);\n\n    const isEventFromSubtree = () => subtreeRef.current && elementContains(subtreeRef.current, event.target as Node);\n\n    const isEventFromSelection = () => selectionRef.current?.contains(event.target as Node);\n\n    const isEventFromExpandIcon = expandIconRef.current?.contains(event.target as Node);\n\n    if (isEventFromActions() || isEventFromSubtree() || isEventFromSelection()) {\n      return;\n    } else if (!isEventFromExpandIcon) {\n      onClick?.(event);\n    }\n    if (event.isDefaultPrevented() || itemType === 'leaf') {\n      return;\n    }\n\n    ReactDOM.unstable_batchedUpdates(() => {\n      const data = {\n        event,\n        value,\n        open: getNextOpen(),\n        target: event.currentTarget,\n        type: isEventFromExpandIcon ? treeDataTypes.ExpandIconClick : treeDataTypes.Click,\n      } as const;\n      props.onOpenChange?.(event, data);\n      requestTreeResponse({\n        ...data,\n        itemType,\n        requestType: 'open',\n      });\n      requestTreeResponse({\n        ...data,\n        itemType,\n        parentValue,\n        requestType: 'navigate',\n        type: treeDataTypes.Click,\n      });\n    });\n  });\n\n  const handleKeyDown = useEventCallback((event: React.KeyboardEvent<HTMLDivElement>) => {\n    onKeyDown?.(event);\n    // Ignore keyboard events that do not originate from the current tree item.\n    if (event.isDefaultPrevented() || event.currentTarget !== event.target) {\n      return;\n    }\n    switch (event.key) {\n      case Space:\n        if (selectionMode !== 'none') {\n          selectionRef.current?.click();\n          // Prevents the page from scrolling down when the spacebar is pressed\n          event.preventDefault();\n        }\n        return;\n      case treeDataTypes.Enter: {\n        return event.currentTarget.click();\n      }\n      case treeDataTypes.End:\n      case treeDataTypes.Home:\n      case treeDataTypes.ArrowUp:\n      case treeDataTypes.ArrowDown:\n        return requestTreeResponse({\n          requestType: 'navigate',\n          event,\n          value,\n          itemType,\n          parentValue,\n          type: event.key,\n          target: event.currentTarget,\n        });\n      case treeDataTypes.ArrowLeft: {\n        // arrow left with alt key is reserved for history navigation\n        if (event.altKey) {\n          return;\n        }\n        // do not navigate to parent if the item is on the top level\n        if (level === 1 && !open) {\n          return;\n        }\n        const data = {\n          value,\n          event,\n          open: getNextOpen(),\n          type: event.key,\n          target: event.currentTarget,\n        } as const;\n        if (open) {\n          props.onOpenChange?.(event, data);\n        }\n        requestTreeResponse({\n          ...data,\n          itemType,\n          parentValue,\n          requestType: open ? 'open' : 'navigate',\n        });\n        return;\n      }\n      case treeDataTypes.ArrowRight: {\n        // arrow right with alt key is reserved for history navigation\n        if (event.altKey) {\n          return;\n        }\n        // do not navigate or open if the item is a leaf\n        if (itemType === 'leaf') {\n          return;\n        }\n        const data = {\n          value,\n          event,\n          open: getNextOpen(),\n          type: event.key,\n          target: event.currentTarget,\n        } as const;\n        if (!open) {\n          props.onOpenChange?.(event, data);\n        }\n        requestTreeResponse({\n          ...data,\n          itemType,\n          parentValue,\n          requestType: open ? 'navigate' : 'open',\n        });\n        return;\n      }\n    }\n    const isTypeAheadCharacter =\n      event.key.length === 1 && event.key.match(/\\w/) && !event.altKey && !event.ctrlKey && !event.metaKey;\n    if (isTypeAheadCharacter) {\n      requestTreeResponse({\n        requestType: 'navigate',\n        event,\n        target: event.currentTarget,\n        value,\n        itemType,\n        type: treeDataTypes.TypeAhead,\n        parentValue,\n      });\n    }\n  });\n\n  const handleChange = useEventCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange?.(event);\n    if (event.isDefaultPrevented()) {\n      return;\n    }\n    const isEventFromSubtree = subtreeRef.current && elementContains(subtreeRef.current, event.target as Node);\n    if (isEventFromSubtree) {\n      return;\n    }\n    requestTreeResponse({\n      requestType: 'selection',\n      event,\n      value,\n      itemType,\n      type: 'Change',\n      target: event.currentTarget,\n      checked: checked === 'mixed' ? true : !checked,\n    });\n  });\n\n  return {\n    value,\n    open,\n    checked,\n    subtreeRef,\n    layoutRef,\n    selectionRef,\n    expandIconRef,\n    treeItemRef,\n    actionsRef,\n    itemType,\n    level,\n    components: {\n      root: 'div',\n    },\n    // FIXME: this property is not necessary anymore, but as removing it would be a breaking change, we need to keep it as false\n    isAsideVisible: false,\n    // FIXME: this property is not necessary anymore, but as removing it would be a breaking change, we need to keep it as false\n    isActionsVisible: false,\n    root: slot.always(\n      getIntrinsicElementProps(as, {\n        tabIndex: -1,\n        [dataTreeItemValueAttrName]: value,\n        ...rest,\n        ref: useMergedRefs(ref, treeItemRef),\n        role: 'treeitem',\n        'aria-level': level,\n        'aria-checked': selectionMode === 'multiselect' ? checked : undefined,\n        // Casting: when selectionMode is 'single', checked is a boolean\n        'aria-selected': ariaSelected !== undefined ? ariaSelected : selectionMode === 'single' ? !!checked : undefined,\n        'aria-expanded': ariaExpanded !== undefined ? ariaExpanded : itemType === 'branch' ? open : undefined,\n        onClick: handleClick,\n        onKeyDown: handleKeyDown,\n        onChange: handleChange,\n      } as const),\n      { elementType: 'div' },\n    ),\n  };\n}\n\nfunction warnIfNoProperPropsFlatTreeItem(\n  props: Pick<TreeItemProps, 'aria-setsize' | 'aria-posinset' | 'aria-level' | 'parentValue'>,\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (\n      props['aria-posinset'] === undefined ||\n      props['aria-setsize'] === undefined ||\n      props['aria-level'] === undefined ||\n      (props.parentValue === undefined && props['aria-level'] !== 1)\n    ) {\n      // eslint-disable-next-line no-console\n      console.error(/** #__DE-INDENT__ */ `\n        @fluentui/react-tree [${useTreeItem_unstable.name}]:\n        A flat treeitem must have \"aria-posinset\", \"aria-setsize\", \"aria-level\"\n        and \"parentValue\" (if \"aria-level\" > 1) to ensure a11y and navigation.\n\n        - \"aria-posinset\": the position of this treeitem in the current level of the tree.\n        - \"aria-setsize\": the number of siblings in this level of the tree.\n        - \"aria-level\": the current level of the treeitem.\n        - \"parentValue\": the \"value\" property of the parent item of this item.\n      `);\n    }\n  }\n}\n"],"names":["useTreeItem_unstable","props","ref","treeType","useTreeContext_unstable","ctx","warnIfNoProperPropsFlatTreeItem","requestTreeResponse","forceUpdateRovingTabIndex","level","contextLevel","useSubtreeContext_unstable","parentValue","useTreeItemContext_unstable","value","internalValue","useId","onClick","onKeyDown","onChange","as","itemType","ariaSelected","ariaExpanded","rest","actionsRef","React","useRef","expandIconRef","layoutRef","subtreeRef","selectionRef","treeItemRef","process","env","NODE_ENV","hasTreeContext","useHasParentContext","TreeContext","useEffect","current","querySelector","treeClassNames","root","console","error","treeItem","tabIndex","open","openItems","has","getNextOpen","selectionMode","checked","checkedItems","get","handleClick","useEventCallback","event","isEventFromActions","elementContains","target","isEventFromSubtree","isEventFromSelection","contains","isEventFromExpandIcon","isDefaultPrevented","ReactDOM","unstable_batchedUpdates","data","currentTarget","type","treeDataTypes","ExpandIconClick","Click","onOpenChange","requestType","handleKeyDown","key","Space","click","preventDefault","Enter","End","Home","ArrowUp","ArrowDown","ArrowLeft","altKey","ArrowRight","isTypeAheadCharacter","length","match","ctrlKey","metaKey","TypeAhead","handleChange","components","isAsideVisible","isActionsVisible","slot","always","getIntrinsicElementProps","dataTreeItemValueAttrName","useMergedRefs","role","undefined","elementType","name"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}