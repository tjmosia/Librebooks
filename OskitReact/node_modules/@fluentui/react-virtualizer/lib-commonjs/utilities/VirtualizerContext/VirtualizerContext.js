"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    VirtualizerContextProvider: function() {
        return VirtualizerContextProvider;
    },
    useVirtualizerContextState_unstable: function() {
        return useVirtualizerContextState_unstable;
    },
    useVirtualizerContext_unstable: function() {
        return useVirtualizerContext_unstable;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const VirtualizerContext = /*#__PURE__*/ _react.createContext(undefined);
const VirtualizerContextProvider = VirtualizerContext.Provider;
const useVirtualizerContext_unstable = ()=>{
    return _react.useContext(VirtualizerContext);
};
const useVirtualizerContextState_unstable = (passedContext)=>{
    const virtualizerContext = useVirtualizerContext_unstable();
    const [_contextIndex, _setContextIndex] = (0, _react.useState)(-1);
    const [_contextPosition, _setContextPosition] = (0, _react.useState)(0);
    const childProgressiveSizes = (0, _react.useRef)([]);
    /* We respect any wrapped providers while also ensuring defaults or passed through
   * Order of usage -> Passed Prop -> Provider Context -> Internal State default
   */ const context = (0, _react.useMemo)(()=>{
        var _passedContext_contextIndex, _ref, _passedContext_setContextIndex, _ref1, _passedContext_contextPosition, _ref2, _passedContext_setContextPosition, _ref3;
        return {
            contextIndex: (_ref = (_passedContext_contextIndex = passedContext === null || passedContext === void 0 ? void 0 : passedContext.contextIndex) !== null && _passedContext_contextIndex !== void 0 ? _passedContext_contextIndex : virtualizerContext === null || virtualizerContext === void 0 ? void 0 : virtualizerContext.contextIndex) !== null && _ref !== void 0 ? _ref : _contextIndex,
            setContextIndex: (_ref1 = (_passedContext_setContextIndex = passedContext === null || passedContext === void 0 ? void 0 : passedContext.setContextIndex) !== null && _passedContext_setContextIndex !== void 0 ? _passedContext_setContextIndex : virtualizerContext === null || virtualizerContext === void 0 ? void 0 : virtualizerContext.setContextIndex) !== null && _ref1 !== void 0 ? _ref1 : _setContextIndex,
            contextPosition: (_ref2 = (_passedContext_contextPosition = passedContext === null || passedContext === void 0 ? void 0 : passedContext.contextPosition) !== null && _passedContext_contextPosition !== void 0 ? _passedContext_contextPosition : virtualizerContext === null || virtualizerContext === void 0 ? void 0 : virtualizerContext.contextPosition) !== null && _ref2 !== void 0 ? _ref2 : _contextPosition,
            setContextPosition: (_ref3 = (_passedContext_setContextPosition = passedContext === null || passedContext === void 0 ? void 0 : passedContext.setContextPosition) !== null && _passedContext_setContextPosition !== void 0 ? _passedContext_setContextPosition : virtualizerContext === null || virtualizerContext === void 0 ? void 0 : virtualizerContext.setContextPosition) !== null && _ref3 !== void 0 ? _ref3 : _setContextPosition,
            childProgressiveSizes
        };
    }, [
        _contextIndex,
        _contextPosition,
        passedContext,
        virtualizerContext
    ]);
    return context;
};
