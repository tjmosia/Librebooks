{"version":3,"sources":["DatePicker.types.ts"],"sourcesContent":["import { DayOfWeek, FirstWeekOfYear } from '@fluentui/react-calendar-compat';\nimport { Input } from '@fluentui/react-input';\nimport type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';\nimport type { CalendarProps, CalendarStrings, DateFormatting } from '@fluentui/react-calendar-compat';\nimport type { PortalProps } from '@fluentui/react-portal';\nimport type { PositioningProps } from '@fluentui/react-positioning';\n\nexport type DatePickerSlots = {\n  root: NonNullable<Slot<typeof Input>>;\n  calendar: NonNullable<Slot<Partial<CalendarProps>>>;\n  popupSurface?: Slot<'div'>;\n};\n\nexport type DatePickerProps = Omit<ComponentProps<Partial<DatePickerSlots>>, 'defaultValue' | 'value'> &\n  Pick<PortalProps, 'mountNode'> & {\n    /**\n     * Callback issued when a date is selected\n     */\n    // eslint-disable-next-line @nx/workspace-consistent-callback-type -- can't change type of existing callback\n    onSelectDate?: (date: Date | null | undefined) => void;\n\n    /**\n     * Whether the DatePicker is a required field or not. When using `<Field>`, this prop is automatically set.\n     * @default false\n     */\n    required?: boolean;\n\n    /**\n     * Disabled state of the DatePicker.\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether or not the Input of the DatePicker is underlined.\n     * @default false\n     */\n    underlined?: boolean;\n\n    /**\n     * Whether the month picker is shown beside the day picker or hidden.\n     * @default true\n     */\n    isMonthPickerVisible?: boolean;\n\n    /**\n     * Show month picker on top of date picker when visible.\n     * @default false\n     */\n    showMonthPickerAsOverlay?: boolean;\n\n    /**\n     * Whether the DatePicker allows input a date string directly or not\n     * @default false\n     */\n    allowTextInput?: boolean;\n\n    /**\n     * Whether the DatePicker should open automatically when the control is focused\n     * WARNING: setting this to false creates an accessibility violation and is not recommended\n     * @default true\n     */\n    disableAutoFocus?: boolean;\n\n    /**\n     * Whether the DatePicker should open when the input is clicked\n     * @default true\n     */\n    openOnClick?: boolean;\n\n    /**\n     * Whether the DatePicker should be open by default\n     *\n     * @default false\n     */\n    defaultOpen?: boolean;\n\n    /**\n     * Whether the DatePicker is open or not\n     *\n     * @default false\n     */\n    open?: boolean;\n\n    /**\n     * Callback to run when the DatePicker's open state changes\n     */\n    // eslint-disable-next-line @nx/workspace-consistent-callback-type -- can't change type of existing callback\n    onOpenChange?: (open: boolean) => void;\n\n    /**\n     * Callback to run after the DatePicker's input has been validated\n     */\n    // eslint-disable-next-line @nx/workspace-consistent-callback-type -- can't change type of existing callback\n    onValidationResult?: (data: DatePickerValidationResultData) => void;\n\n    /**\n     * Whether the DatePicker should render the popup as inline or in a portal\n     *\n     * @default false\n     */\n    inlinePopup?: boolean;\n\n    /**\n     * Configure the positioning of the DatePicker dialog\n     *\n     * @default below\n     */\n    positioning?: PositioningProps;\n\n    /**\n     * Placeholder text for the DatePicker\n     */\n    placeholder?: string;\n\n    /**\n     * Value of today. If unspecified, current time in client machine will be used.\n     */\n    today?: Date;\n\n    /**\n     * Default value of the DatePicker, if any\n     *\n     * When the component is controlled, `null` should be used instead of `undefined` to avoid controlled vs. uncontrolled\n     * ambiguity.\n     */\n    value?: Date | null;\n\n    /**\n     * Optional method to format the chosen date to a string to display in the DatePicker\n     * @default date.toString()\n     */\n    formatDate?: (date?: Date) => string;\n\n    /**\n     * Optional method to parse the text input value to date, it is only useful when allowTextInput is set to true\n     * @default new Date(Date.parse(dateStr))\n     */\n    parseDateFromString?: (dateStr: string) => Date | null;\n\n    /**\n     * The first day of the week for your locale.\n     * @default DayOfWeek.Sunday\n     */\n    firstDayOfWeek?: DayOfWeek;\n\n    /**\n     * Localized strings to use in the Calendar\n     */\n    strings?: CalendarStrings;\n\n    /**\n     * Whether the month picker should highlight the current month\n     * @default false\n     */\n    highlightCurrentMonth?: boolean;\n\n    /**\n     * Whether the month picker should highlight the selected month\n     * @default false\n     */\n    highlightSelectedMonth?: boolean;\n\n    /**\n     * Whether the calendar should show the week number (weeks 1 to 53) before each week row\n     * @default false\n     */\n    showWeekNumbers?: boolean;\n\n    /**\n     * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\n     * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\n     * @default FirstWeekOfYear.FirstFullWeek\n     */\n    firstWeekOfYear?: FirstWeekOfYear;\n\n    /**\n     * Whether the \"Go to today\" link should be shown or not\n     */\n    showGoToToday?: boolean;\n\n    /**\n     * Determines if the DatePicker has a border.\n     * @default false\n     */\n    borderless?: boolean;\n\n    /**\n     * Apply additional formatting to dates, for example localized date formatting.\n     */\n    dateTimeFormatter?: DateFormatting;\n\n    /**\n     * The minimum allowable date.\n     */\n    minDate?: Date;\n\n    /**\n     * The maximum allowable date.\n     */\n    maxDate?: Date;\n\n    /**\n     * The initially highlighted date.\n     */\n    initialPickerDate?: Date;\n\n    /**\n     * Allows all elements to be focused, including disabled ones\n     * @default false\n     */\n    allFocusable?: boolean;\n\n    /**\n     * Whether the CalendarDay close button should be shown or not.\n     */\n    showCloseButton?: boolean;\n  };\n\n/**\n * State used in rendering DatePicker.\n */\nexport type DatePickerState = ComponentState<DatePickerSlots> &\n  Pick<DatePickerProps, 'mountNode'> & {\n    disabled: boolean;\n    inlinePopup: boolean;\n  };\n\n/**\n * Data passed to the `onValidationResult` callback.\n */\nexport type DatePickerValidationResultData = {\n  /** The error found when validating the input. */\n  error?: DatePickerErrorType;\n};\n\n/**\n * Error types returned by the `onValidationResult` callback.\n */\nexport type DatePickerErrorType = 'invalid-input' | 'out-of-bounds' | 'required-input';\n"],"names":[],"rangeMappings":";;","mappings":"AA4OA;;CAEC,GACD,WAAuF"}