"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Collapse: function() {
        return Collapse;
    },
    CollapseExaggerated: function() {
        return CollapseExaggerated;
    },
    CollapseSnappy: function() {
        return CollapseSnappy;
    },
    createCollapsePresence: function() {
        return createCollapsePresence;
    }
});
const _reactmotion = require("@fluentui/react-motion");
const createCollapsePresence = ({ enterDuration = _reactmotion.motionTokens.durationNormal, enterEasing = _reactmotion.motionTokens.curveEasyEaseMax, exitDuration = enterDuration, exitEasing = enterEasing } = {})=>({ element, animateOpacity = true, orientation = 'vertical' })=>{
        const fromOpacity = 0;
        const toOpacity = 1;
        const fromSize = '0'; // Could be a custom param in the future to start with partially expanded width or height
        const measuredSize = orientation === 'horizontal' ? element.scrollWidth : element.scrollHeight;
        const toSize = `${measuredSize}px`;
        // use generic names for size and overflow, handling vertical or horizontal orientation
        const sizeName = orientation === 'horizontal' ? 'maxWidth' : 'maxHeight';
        const overflowName = orientation === 'horizontal' ? 'overflowX' : 'overflowY';
        // The enter transition is an array of up to 2 motion atoms: size and opacity.
        const enterAtoms = [
            // Expand size (height or width)
            {
                keyframes: [
                    {
                        [sizeName]: fromSize,
                        [overflowName]: 'hidden'
                    },
                    {
                        [sizeName]: toSize,
                        offset: 0.9999,
                        [overflowName]: 'hidden'
                    },
                    {
                        [sizeName]: 'unset',
                        [overflowName]: 'unset'
                    }
                ],
                duration: enterDuration,
                easing: enterEasing
            }
        ];
        // Fade in only if animateOpacity is true. Otherwise, leave opacity unaffected.
        if (animateOpacity) {
            enterAtoms.push({
                keyframes: [
                    {
                        opacity: fromOpacity
                    },
                    {
                        opacity: toOpacity
                    }
                ],
                duration: enterDuration,
                easing: enterEasing,
                fill: 'both'
            });
        }
        // The exit transition is an array of up to 2 motion atoms: opacity and size.
        const exitAtoms = [];
        // Fade out only if animateOpacity is false. Otherwise, leave opacity unaffected.
        if (animateOpacity) {
            exitAtoms.push({
                keyframes: [
                    {
                        opacity: toOpacity
                    },
                    {
                        opacity: fromOpacity
                    }
                ],
                duration: exitDuration,
                easing: exitEasing
            });
        }
        exitAtoms.push({
            keyframes: [
                {
                    [sizeName]: toSize,
                    [overflowName]: 'hidden'
                },
                {
                    [sizeName]: fromSize,
                    [overflowName]: 'hidden'
                }
            ],
            duration: exitDuration,
            easing: exitEasing,
            fill: 'both'
        });
        return {
            enter: enterAtoms,
            exit: exitAtoms
        };
    };
const Collapse = (0, _reactmotion.createPresenceComponent)(createCollapsePresence());
const CollapseSnappy = (0, _reactmotion.createPresenceComponent)(createCollapsePresence({
    enterDuration: _reactmotion.motionTokens.durationFast
}));
const CollapseExaggerated = (0, _reactmotion.createPresenceComponent)(createCollapsePresence({
    enterDuration: _reactmotion.motionTokens.durationSlower
}));
