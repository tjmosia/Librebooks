{"version":3,"sources":["useInteractionTagPrimary.ts"],"sourcesContent":["import * as React from 'react';\nimport { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';\nimport type { InteractionTagPrimaryProps, InteractionTagPrimaryState } from './InteractionTagPrimary.types';\nimport { useInteractionTagContext_unstable } from '../../contexts/interactionTagContext';\n\nconst avatarSizeMap = {\n  medium: 28,\n  small: 20,\n  'extra-small': 16,\n} as const;\n\nconst avatarShapeMap = {\n  rounded: 'square',\n  circular: 'circular',\n} as const;\n\n/**\n * Create the state required to render InteractionTagPrimary.\n *\n * The returned state can be modified with hooks such as useInteractionTagPrimaryStyles_unstable,\n * before being passed to renderInteractionTagPrimary_unstable.\n *\n * @param props - props from this instance of InteractionTagPrimary\n * @param ref - reference to root HTMLButtonElement of InteractionTagPrimary\n */\nexport const useInteractionTagPrimary_unstable = (\n  props: InteractionTagPrimaryProps,\n  ref: React.Ref<HTMLButtonElement>,\n): InteractionTagPrimaryState => {\n  const { appearance, disabled, interactionTagPrimaryId, shape, size } = useInteractionTagContext_unstable();\n  const { hasSecondaryAction = false } = props;\n\n  return {\n    appearance,\n    avatarShape: avatarShapeMap[shape],\n    avatarSize: avatarSizeMap[size],\n    disabled,\n    hasSecondaryAction,\n    shape,\n    size,\n\n    components: {\n      root: 'button',\n      media: 'span',\n      icon: 'span',\n      primaryText: 'span',\n      secondaryText: 'span',\n    },\n\n    root: slot.always(\n      getIntrinsicElementProps('button', {\n        ref,\n        disabled,\n        id: interactionTagPrimaryId,\n        ...props,\n      }),\n      { elementType: 'button' },\n    ),\n\n    media: slot.optional(props.media, { elementType: 'span' }),\n    icon: slot.optional(props.icon, { elementType: 'span' }),\n    primaryText: slot.optional(props.primaryText, {\n      renderByDefault: true,\n      defaultProps: {\n        children: props.children,\n      },\n      elementType: 'span',\n    }),\n    secondaryText: slot.optional(props.secondaryText, { elementType: 'span' }),\n  };\n};\n"],"names":["useInteractionTagPrimary_unstable","avatarSizeMap","medium","small","avatarShapeMap","rounded","circular","props","ref","appearance","disabled","interactionTagPrimaryId","shape","size","useInteractionTagContext_unstable","hasSecondaryAction","avatarShape","avatarSize","components","root","media","icon","primaryText","secondaryText","slot","always","getIntrinsicElementProps","id","elementType","optional","renderByDefault","defaultProps","children"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAyBaA;;;eAAAA;;;;iEAzBU;gCACwB;uCAEG;AAElD,MAAMC,gBAAgB;IACpBC,QAAQ;IACRC,OAAO;IACP,eAAe;AACjB;AAEA,MAAMC,iBAAiB;IACrBC,SAAS;IACTC,UAAU;AACZ;AAWO,MAAMN,oCAAoC,CAC/CO,OACAC;IAEA,MAAM,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,uBAAuB,EAAEC,KAAK,EAAEC,IAAI,EAAE,GAAGC,IAAAA,wDAAAA;IACvE,MAAM,EAAEC,qBAAqB,KAAK,EAAE,GAAGR;IAEvC,OAAO;QACLE;QACAO,aAAaZ,cAAc,CAACQ,MAAM;QAClCK,YAAYhB,aAAa,CAACY,KAAK;QAC/BH;QACAK;QACAH;QACAC;QAEAK,YAAY;YACVC,MAAM;YACNC,OAAO;YACPC,MAAM;YACNC,aAAa;YACbC,eAAe;QACjB;QAEAJ,MAAMK,oBAAAA,CAAKC,MAAM,CACfC,IAAAA,wCAAAA,EAAyB,UAAU;YACjClB;YACAE;YACAiB,IAAIhB;YACJ,GAAGJ,KAAK;QACV,IACA;YAAEqB,aAAa;QAAS;QAG1BR,OAAOI,oBAAAA,CAAKK,QAAQ,CAACtB,MAAMa,KAAK,EAAE;YAAEQ,aAAa;QAAO;QACxDP,MAAMG,oBAAAA,CAAKK,QAAQ,CAACtB,MAAMc,IAAI,EAAE;YAAEO,aAAa;QAAO;QACtDN,aAAaE,oBAAAA,CAAKK,QAAQ,CAACtB,MAAMe,WAAW,EAAE;YAC5CQ,iBAAiB;YACjBC,cAAc;gBACZC,UAAUzB,MAAMyB,QAAQ;YAC1B;YACAJ,aAAa;QACf;QACAL,eAAeC,oBAAAA,CAAKK,QAAQ,CAACtB,MAAMgB,aAAa,EAAE;YAAEK,aAAa;QAAO;IAC1E;AACF"}