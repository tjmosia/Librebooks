@page "/auth/login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using OskitBlazor.Data

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign in</PageTitle>
<FluentBodyContent>
    <FluentCard MinimalStyle="true" Style="background-color: white;">
        <div class="LoginFormWrapper">
            <h1>Sign In</h1>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="mb-3">
                    <FluentTextField @bind-Value="Input.Email" Style="width: 100%" Name="Email" Label="Email" Required="true">
                        <FluentIcon Slot="end" Value="@(new Icons.Regular.Size16.LockClosed())" />
                        </FluentTextField>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <FluentTextField @bind-Value="Input.Password" Size="50" Style="width: 100%" Name="Password" Label="Password" Required="true" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <FluentButton Type="ButtonType.Submit" Style="width: 100%" Appearance="Appearance.Accent">Login</FluentButton>
                </div>
                <FluentStack Orientation="Orientation.Horizontal">
                    <NavLink href="@IdentityURIs.ForgottenPassword">Reset Password</NavLink>
                    <FluentDivider Role="DividerRole.Separator" Orientation="Orientation.Vertical" />
                    <NavLink href="@IdentityURIs.Register">Create Account</NavLink>
                </FluentStack>
            </EditForm>
        </div>
    </FluentCard>
</FluentBodyContent>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync ()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser ()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
